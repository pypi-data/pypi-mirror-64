# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gridpp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gridpp')
    _gridpp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gridpp', [dirname(__file__)])
        except ImportError:
            import _gridpp
            return _gridpp
        try:
            _mod = imp.load_module('_gridpp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gridpp = swig_import_helper()
    del swig_import_helper
else:
    import _gridpp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gridpp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _gridpp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gridpp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gridpp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gridpp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gridpp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gridpp.SwigPyIterator_copy(self)

    def next(self):
        return _gridpp.SwigPyIterator_next(self)

    def __next__(self):
        return _gridpp.SwigPyIterator___next__(self)

    def previous(self):
        return _gridpp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gridpp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gridpp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gridpp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gridpp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gridpp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gridpp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gridpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gridpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.IntVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.IntVector___bool__(self)

    def __len__(self):
        return _gridpp.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.IntVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.IntVector_pop(self)

    def append(self, x):
        return _gridpp.IntVector_append(self, x)

    def empty(self):
        return _gridpp.IntVector_empty(self)

    def size(self):
        return _gridpp.IntVector_size(self)

    def swap(self, v):
        return _gridpp.IntVector_swap(self, v)

    def begin(self):
        return _gridpp.IntVector_begin(self)

    def end(self):
        return _gridpp.IntVector_end(self)

    def rbegin(self):
        return _gridpp.IntVector_rbegin(self)

    def rend(self):
        return _gridpp.IntVector_rend(self)

    def clear(self):
        return _gridpp.IntVector_clear(self)

    def get_allocator(self):
        return _gridpp.IntVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.IntVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _gridpp.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridpp.IntVector_push_back(self, x)

    def front(self):
        return _gridpp.IntVector_front(self)

    def back(self):
        return _gridpp.IntVector_back(self)

    def assign(self, n, x):
        return _gridpp.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.IntVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.IntVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.IntVector_reserve(self, n)

    def capacity(self):
        return _gridpp.IntVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _gridpp.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.IntVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.IntVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.IntVector2___bool__(self)

    def __len__(self):
        return _gridpp.IntVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.IntVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.IntVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.IntVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.IntVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.IntVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.IntVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.IntVector2_pop(self)

    def append(self, x):
        return _gridpp.IntVector2_append(self, x)

    def empty(self):
        return _gridpp.IntVector2_empty(self)

    def size(self):
        return _gridpp.IntVector2_size(self)

    def swap(self, v):
        return _gridpp.IntVector2_swap(self, v)

    def begin(self):
        return _gridpp.IntVector2_begin(self)

    def end(self):
        return _gridpp.IntVector2_end(self)

    def rbegin(self):
        return _gridpp.IntVector2_rbegin(self)

    def rend(self):
        return _gridpp.IntVector2_rend(self)

    def clear(self):
        return _gridpp.IntVector2_clear(self)

    def get_allocator(self):
        return _gridpp.IntVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.IntVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.IntVector2_erase(self, *args)

    def __init__(self, *args):
        this = _gridpp.new_IntVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridpp.IntVector2_push_back(self, x)

    def front(self):
        return _gridpp.IntVector2_front(self)

    def back(self):
        return _gridpp.IntVector2_back(self)

    def assign(self, n, x):
        return _gridpp.IntVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.IntVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.IntVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.IntVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.IntVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_IntVector2
    __del__ = lambda self: None
IntVector2_swigregister = _gridpp.IntVector2_swigregister
IntVector2_swigregister(IntVector2)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.DoubleVector___bool__(self)

    def __len__(self):
        return _gridpp.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.DoubleVector_pop(self)

    def append(self, x):
        return _gridpp.DoubleVector_append(self, x)

    def empty(self):
        return _gridpp.DoubleVector_empty(self)

    def size(self):
        return _gridpp.DoubleVector_size(self)

    def swap(self, v):
        return _gridpp.DoubleVector_swap(self, v)

    def begin(self):
        return _gridpp.DoubleVector_begin(self)

    def end(self):
        return _gridpp.DoubleVector_end(self)

    def rbegin(self):
        return _gridpp.DoubleVector_rbegin(self)

    def rend(self):
        return _gridpp.DoubleVector_rend(self)

    def clear(self):
        return _gridpp.DoubleVector_clear(self)

    def get_allocator(self):
        return _gridpp.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _gridpp.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridpp.DoubleVector_push_back(self, x)

    def front(self):
        return _gridpp.DoubleVector_front(self)

    def back(self):
        return _gridpp.DoubleVector_back(self)

    def assign(self, n, x):
        return _gridpp.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.DoubleVector_reserve(self, n)

    def capacity(self):
        return _gridpp.DoubleVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _gridpp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector_pop(self)

    def append(self, x):
        return _gridpp.FloatVector_append(self, x)

    def empty(self):
        return _gridpp.FloatVector_empty(self)

    def size(self):
        return _gridpp.FloatVector_size(self)

    def swap(self, v):
        return _gridpp.FloatVector_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector_begin(self)

    def end(self):
        return _gridpp.FloatVector_end(self)

    def rbegin(self):
        return _gridpp.FloatVector_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector_rend(self)

    def clear(self):
        return _gridpp.FloatVector_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _gridpp.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridpp.FloatVector_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector_front(self)

    def back(self):
        return _gridpp.FloatVector_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _gridpp.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector2___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector2_pop(self)

    def append(self, x):
        return _gridpp.FloatVector2_append(self, x)

    def empty(self):
        return _gridpp.FloatVector2_empty(self)

    def size(self):
        return _gridpp.FloatVector2_size(self)

    def swap(self, v):
        return _gridpp.FloatVector2_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector2_begin(self)

    def end(self):
        return _gridpp.FloatVector2_end(self)

    def rbegin(self):
        return _gridpp.FloatVector2_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector2_rend(self)

    def clear(self):
        return _gridpp.FloatVector2_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector2_erase(self, *args)

    def __init__(self, *args):
        this = _gridpp.new_FloatVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridpp.FloatVector2_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector2_front(self)

    def back(self):
        return _gridpp.FloatVector2_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector2
    __del__ = lambda self: None
FloatVector2_swigregister = _gridpp.FloatVector2_swigregister
FloatVector2_swigregister(FloatVector2)

class FloatVector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector3, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector3___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector3___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector3___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector3___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector3_pop(self)

    def append(self, x):
        return _gridpp.FloatVector3_append(self, x)

    def empty(self):
        return _gridpp.FloatVector3_empty(self)

    def size(self):
        return _gridpp.FloatVector3_size(self)

    def swap(self, v):
        return _gridpp.FloatVector3_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector3_begin(self)

    def end(self):
        return _gridpp.FloatVector3_end(self)

    def rbegin(self):
        return _gridpp.FloatVector3_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector3_rend(self)

    def clear(self):
        return _gridpp.FloatVector3_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector3_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector3_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector3_erase(self, *args)

    def __init__(self, *args):
        this = _gridpp.new_FloatVector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridpp.FloatVector3_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector3_front(self)

    def back(self):
        return _gridpp.FloatVector3_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector3_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector3_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector3_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector3_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector3_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector3
    __del__ = lambda self: None
FloatVector3_swigregister = _gridpp.FloatVector3_swigregister
FloatVector3_swigregister(FloatVector3)

class DoubleVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.DoubleVector2___bool__(self)

    def __len__(self):
        return _gridpp.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.DoubleVector2_pop(self)

    def append(self, x):
        return _gridpp.DoubleVector2_append(self, x)

    def empty(self):
        return _gridpp.DoubleVector2_empty(self)

    def size(self):
        return _gridpp.DoubleVector2_size(self)

    def swap(self, v):
        return _gridpp.DoubleVector2_swap(self, v)

    def begin(self):
        return _gridpp.DoubleVector2_begin(self)

    def end(self):
        return _gridpp.DoubleVector2_end(self)

    def rbegin(self):
        return _gridpp.DoubleVector2_rbegin(self)

    def rend(self):
        return _gridpp.DoubleVector2_rend(self)

    def clear(self):
        return _gridpp.DoubleVector2_clear(self)

    def get_allocator(self):
        return _gridpp.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        this = _gridpp.new_DoubleVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridpp.DoubleVector2_push_back(self, x)

    def front(self):
        return _gridpp.DoubleVector2_front(self)

    def back(self):
        return _gridpp.DoubleVector2_back(self)

    def assign(self, n, x):
        return _gridpp.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.DoubleVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_DoubleVector2
    __del__ = lambda self: None
DoubleVector2_swigregister = _gridpp.DoubleVector2_swigregister
DoubleVector2_swigregister(DoubleVector2)

GRIDPP_VERSION = _gridpp.GRIDPP_VERSION
__version__ = _gridpp.__version__

def version():
    return _gridpp.version()
version = _gridpp.version

def optimal_interpolation(input, bgrid, pobs, pci, points, minRho, hlength, vlength, wmin, maxPoints, elevGradient, epsilon):
    return _gridpp.optimal_interpolation(input, bgrid, pobs, pci, points, minRho, hlength, vlength, wmin, maxPoints, elevGradient, epsilon)
optimal_interpolation = _gridpp.optimal_interpolation

def optimal_interpolation_ens(input, bgrid, pobs, pci, points):
    return _gridpp.optimal_interpolation_ens(input, bgrid, pobs, pci, points)
optimal_interpolation_ens = _gridpp.optimal_interpolation_ens

def neighbourhood(input, radius, operation):
    return _gridpp.neighbourhood(input, radius, operation)
neighbourhood = _gridpp.neighbourhood

def neighbourhood_ens(input, radius, operation):
    return _gridpp.neighbourhood_ens(input, radius, operation)
neighbourhood_ens = _gridpp.neighbourhood_ens

def neighbourhood_quantile_ens(input, radius, quantile, num_thresholds):
    return _gridpp.neighbourhood_quantile_ens(input, radius, quantile, num_thresholds)
neighbourhood_quantile_ens = _gridpp.neighbourhood_quantile_ens

def neighbourhood_quantile(input, radius, quantile, num_thresholds):
    return _gridpp.neighbourhood_quantile(input, radius, quantile, num_thresholds)
neighbourhood_quantile = _gridpp.neighbourhood_quantile

def fill(igrid, input, points, radii, value, outside):
    return _gridpp.fill(igrid, input, points, radii, value, outside)
fill = _gridpp.fill

def bilinear(*args):
    return _gridpp.bilinear(*args)
bilinear = _gridpp.bilinear

def nearest(*args):
    return _gridpp.nearest(*args)
nearest = _gridpp.nearest
StatTypeMean = _gridpp.StatTypeMean
StatTypeMin = _gridpp.StatTypeMin
StatTypeMedian = _gridpp.StatTypeMedian
StatTypeMax = _gridpp.StatTypeMax
StatTypeQuantile = _gridpp.StatTypeQuantile
StatTypeStd = _gridpp.StatTypeStd
StatTypeSum = _gridpp.StatTypeSum

def getStatType(iName):
    return _gridpp.getStatType(iName)
getStatType = _gridpp.getStatType

def clock():
    return _gridpp.clock()
clock = _gridpp.clock

def debug(string):
    return _gridpp.debug(string)
debug = _gridpp.debug

def error(string):
    return _gridpp.error(string)
error = _gridpp.error

def is_valid(value):
    return _gridpp.is_valid(value)
is_valid = _gridpp.is_valid

def calculate_stat(*args):
    return _gridpp.calculate_stat(*args)
calculate_stat = _gridpp.calculate_stat

def num_missing_values(iArray):
    return _gridpp.num_missing_values(iArray)
num_missing_values = _gridpp.num_missing_values

def get_lower_index(iX, iValues):
    return _gridpp.get_lower_index(iX, iValues)
get_lower_index = _gridpp.get_lower_index

def get_upper_index(iX, iValues):
    return _gridpp.get_upper_index(iX, iValues)
get_upper_index = _gridpp.get_upper_index

def interpolate(x, iX, iY):
    return _gridpp.interpolate(x, iX, iY)
interpolate = _gridpp.interpolate

def calc_even_quantiles(values, num):
    return _gridpp.calc_even_quantiles(values, num)
calc_even_quantiles = _gridpp.calc_even_quantiles
class KDTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KDTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KDTree, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gridpp.new_KDTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_nearest_neighbour(self, lat, lon):
        return _gridpp.KDTree_get_nearest_neighbour(self, lat, lon)

    def get_neighbours(self, lat, lon, radius):
        return _gridpp.KDTree_get_neighbours(self, lat, lon, radius)

    def get_neighbours_with_distance(self, lat, lon, radius, distances):
        return _gridpp.KDTree_get_neighbours_with_distance(self, lat, lon, radius, distances)

    def get_num_neighbours(self, lat, lon, radius):
        return _gridpp.KDTree_get_num_neighbours(self, lat, lon, radius)

    def get_closest_neighbours(self, lat, lon, num):
        return _gridpp.KDTree_get_closest_neighbours(self, lat, lon, num)
    if _newclass:
        convert_coordinates = staticmethod(_gridpp.KDTree_convert_coordinates)
    else:
        convert_coordinates = _gridpp.KDTree_convert_coordinates
    if _newclass:
        deg2rad = staticmethod(_gridpp.KDTree_deg2rad)
    else:
        deg2rad = _gridpp.KDTree_deg2rad
    if _newclass:
        rad2deg = staticmethod(_gridpp.KDTree_rad2deg)
    else:
        rad2deg = _gridpp.KDTree_rad2deg
    if _newclass:
        calc_distance = staticmethod(_gridpp.KDTree_calc_distance)
    else:
        calc_distance = _gridpp.KDTree_calc_distance

    def get_lats(self):
        return _gridpp.KDTree_get_lats(self)

    def get_lons(self):
        return _gridpp.KDTree_get_lons(self)

    def size(self):
        return _gridpp.KDTree_size(self)
    __swig_destroy__ = _gridpp.delete_KDTree
    __del__ = lambda self: None
KDTree_swigregister = _gridpp.KDTree_swigregister
KDTree_swigregister(KDTree)
cvar = _gridpp.cvar
MV = cvar.MV
pi = cvar.pi

def KDTree_convert_coordinates(*args):
    return _gridpp.KDTree_convert_coordinates(*args)
KDTree_convert_coordinates = _gridpp.KDTree_convert_coordinates

def KDTree_deg2rad(deg):
    return _gridpp.KDTree_deg2rad(deg)
KDTree_deg2rad = _gridpp.KDTree_deg2rad

def KDTree_rad2deg(deg):
    return _gridpp.KDTree_rad2deg(deg)
KDTree_rad2deg = _gridpp.KDTree_rad2deg

def KDTree_calc_distance(*args):
    return _gridpp.KDTree_calc_distance(*args)
KDTree_calc_distance = _gridpp.KDTree_calc_distance

class Points(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Points, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Points, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gridpp.new_Points(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_nearest_neighbour(self, lat, lon):
        return _gridpp.Points_get_nearest_neighbour(self, lat, lon)

    def get_neighbours(self, lat, lon, radius):
        return _gridpp.Points_get_neighbours(self, lat, lon, radius)

    def get_neighbours_with_distance(self, lat, lon, radius, distances):
        return _gridpp.Points_get_neighbours_with_distance(self, lat, lon, radius, distances)

    def get_num_neighbours(self, lat, lon, radius):
        return _gridpp.Points_get_num_neighbours(self, lat, lon, radius)

    def get_closest_neighbours(self, lat, lon, num):
        return _gridpp.Points_get_closest_neighbours(self, lat, lon, num)

    def get_lats(self):
        return _gridpp.Points_get_lats(self)

    def get_lons(self):
        return _gridpp.Points_get_lons(self)

    def get_elevs(self):
        return _gridpp.Points_get_elevs(self)

    def get_lafs(self):
        return _gridpp.Points_get_lafs(self)

    def size(self):
        return _gridpp.Points_size(self)
    __swig_destroy__ = _gridpp.delete_Points
    __del__ = lambda self: None
Points_swigregister = _gridpp.Points_swigregister
Points_swigregister(Points)

class Grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gridpp.new_Grid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_nearest_neighbour(self, lat, lon):
        return _gridpp.Grid_get_nearest_neighbour(self, lat, lon)

    def get_neighbours(self, lat, lon, radius):
        return _gridpp.Grid_get_neighbours(self, lat, lon, radius)

    def get_neighbours_with_distance(self, lat, lon, radius, distances):
        return _gridpp.Grid_get_neighbours_with_distance(self, lat, lon, radius, distances)

    def get_num_neighbours(self, lat, lon, radius):
        return _gridpp.Grid_get_num_neighbours(self, lat, lon, radius)

    def get_closest_neighbours(self, lat, lon, num):
        return _gridpp.Grid_get_closest_neighbours(self, lat, lon, num)

    def get_lats(self):
        return _gridpp.Grid_get_lats(self)

    def get_lons(self):
        return _gridpp.Grid_get_lons(self)

    def get_elevs(self):
        return _gridpp.Grid_get_elevs(self)

    def get_lafs(self):
        return _gridpp.Grid_get_lafs(self)

    def size(self):
        return _gridpp.Grid_size(self)
    __swig_destroy__ = _gridpp.delete_Grid
    __del__ = lambda self: None
Grid_swigregister = _gridpp.Grid_swigregister
Grid_swigregister(Grid)

# This file is compatible with both classic and new-style classes.


