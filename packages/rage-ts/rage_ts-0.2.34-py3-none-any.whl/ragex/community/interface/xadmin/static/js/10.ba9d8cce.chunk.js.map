{"version":3,"sources":["app/nlu/actions/nlu.actions.js","app/nlu/IntentConvMngItem.js","app/nlu/IntentConvMngList.js","app/nlu/IntentConvMngToolbar.js","app/nlu/IntentConvMngContainer.js","app/nlu/IntentRegNluToolbar.js","app/nlu/IntentRegNluItem.js","app/nlu/IntentRegNluList.js","app/nlu/IntentRegNluContainer.js","app/nlu/NluTraining.js"],"names":["getSuggetions","project_id","q","intent","limit","offset","axios","get","GET_SUGGESTIONS_URL","getIntents","params","GET_INTENTS_URL","getTrainingData","StyledListItemText","withStyles","root","width","maxWidth","multiline","marginRight","ListItemText","useStyles","height","Divider","makeStyles","theme","customStyles","container","provied","state","color","isSelected","IntentConvMngItem","index","data","style","intent_ranking","objectPath","map","value","item","name","label","confidence","toFixed","push","ListItem","key","id","Grid","direction","justify","alignItems","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","primary","text","secondary","styles","options","placeholder","isSearchable","onChange","selectedOption","console","log","defaultValue","filter","option","Box","Tooltip","title","IconButton","aria-label","items","requestCache","backgroundColor","palette","background","paper","renderRow","props","total","isItemLoaded","loadMoreItems","visibleStartIndex","visibleStopIndex","join","length","Array","keys","x","every","then","response","forEach","catch","error","IntentConvMngList","onRetrieve","itemCount","onItemsRendered","ref","className","itemSize","useToolbarStyles","paddingLeft","spacing","paddingRight","highlight","type","main","backgroundColot","lighten","light","dark","spacer","flex","actions","justifyContent","IntentConvMngToolbar","classes","numSelected","Toolbar","clsx","Typography","variant","onClick","IntentConvMngContainer","useState","setData","setTotal","loading","setLoading","useEffect","a","headers","fetchData","headersheaders","Container","IntentRegNluToolbar","IntentRegNluItem","intents","intentList","g_intents","IntentRegNluList","IntentRegNluContainer","setIntents","fetchIntentData","TabContainer","children","dir","component","role","hidden","aria-labelledby","div","NluTraining","useTheme","setValue","a11yProps","useRef","AppBar","position","Tabs","event","newValue","indicatorColor","textColor","Tab"],"mappings":"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","file":"static/js/10.ba9d8cce.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const GET_SUGGESTIONS_URL = \"/api/projects\";\nexport const GET_INTENTS_URL = \"/api/projects/\";\n\nexport function getSuggetions(project_id, { q, intent, limit, offset }) {\n  return axios.get(\n    GET_SUGGESTIONS_URL +\n      \"/\" +\n      project_id +\n      \"/\" +\n      \"logs\" +\n      \"?\" +\n      \"q=\" +\n      q +\n      \"&intent=\" +\n      intent +\n      \"&limit=\" +\n      limit +\n      \"&offset=\" +\n      offset\n  );\n}\n\nexport function getIntents(project_id, params) {\n  return axios.get(GET_INTENTS_URL + \"/\" + project_id + \"/\" + \"intents\");\n}\n\nexport function getTrainingData(project_id, { q, intent, limit, offset }) {\n  return axios.get(\n    GET_SUGGESTIONS_URL +\n      \"/\" +\n      project_id +\n      \"/\" +\n      \"data\" +\n      \"?\" +\n      \"q=\" +\n      q +\n      \"&intent=\" +\n      intent +\n      \"&limit=\" +\n      limit +\n      \"&offset=\" +\n      offset\n  );\n}\n","import React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"react-select\";\nimport {\n  Checkbox,\n  Typography,\n  Grid,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  Box,\n  Tooltip,\n  Divider\n} from \"@material-ui/core\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport objectPath from \"object-path\";\nimport DoubleArrowIcon from \"@material-ui/icons/DoubleArrow\";\n\nconst StyledListItemText = withStyles({\n  root: {\n    width: \"20%\",\n    maxWidth: \"600px\"\n  },\n  multiline: {\n    marginRight: \"10px\"\n  }\n})(ListItemText);\n\nconst StyledDivider = withStyles({\n  root: {\n    height: \"25px\",\n    width: \"1.5px\"\n  }\n})(Divider);\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"30%\"\n  }\n}));\n\nconst customStyles = {\n  container: (provied, state) => ({\n    ...provied,\n    width: \"40%\",\n    maxWidth: \"500px\",\n    color: state.isSelected ? \"red\" : \"blue\"\n  })\n};\n\nconst IntentConvMngItem = ({ index, data, style }) => {\n  const classes = useStyles();\n  //console.log(objectPath.get(data, \"user_input\"));\n  //   console.log(\n  //     objectPath\n  //       .get(objectPath.get(data, \"user_input\"), \"intent\")\n  //       .confidence.toFixed(3)\n  //   );\n  //   console.log(\n  //     objectPath.get(objectPath.get(data, \"user_input\"), \"intent_ranking\")\n  //   );\n  if (!data) return null;\n  let intent_ranking = [];\n  // console.log(\"IntentConvMngItem data\", data);\n  objectPath\n    .get(objectPath.get(data, \"user_input\"), \"intent_ranking\")\n    .map(value => {\n      //   console.log(value);\n      const item = {\n        value: value.name,\n        label: value.name + \" (\" + value.confidence.toFixed(3) + \")\"\n      };\n      intent_ranking.push(item);\n    });\n\n  //   console.log(intent_ranking);\n  // Object.defineProperty(\n  //   objectPath\n  //   .get(objectPath.get(data, \"intent_ranking\"),\n  // )\n  const handleChange = selectedOption => {\n    console.log(`Option selected:`, selectedOption);\n  };\n  return (\n    <>\n      <ListItem key={data.id} style={style}>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n        >\n          <ListItemIcon>\n            <Checkbox\n              edge=\"start\"\n              // checked={checked.indexOf(value) !== -1}\n              tabIndex={-1}\n              disableRipple\n              // inputProps={{ \"aria-labelledby\": labelId }}\n            />\n          </ListItemIcon>\n          {/* <ListItemText className={classes.root} primary={`Item ${index + 1}`} /> */}\n          <StyledListItemText\n            primary={objectPath.get(data, \"user_input\").text}\n            secondary={\n              objectPath.get(objectPath.get(data, \"user_input\"), \"intent\")\n                .name +\n              \" (\" +\n              objectPath\n                .get(objectPath.get(data, \"user_input\"), \"intent\")\n                .confidence.toFixed(3) +\n              \")\"\n            }\n          />\n          {/* <StyledDivider orientation=\"vertical\" /> */}\n          <Select\n            styles={customStyles}\n            options={intent_ranking}\n            placeholder=\"의도 선택...\"\n            isSearchable={false}\n            onChange={handleChange}\n            defaultValue={intent_ranking.filter(\n              option =>\n                option.value ===\n                objectPath.get(objectPath.get(data, \"user_input\"), \"intent\")\n                  .name\n            )}\n          ></Select>\n          {/* <StyledDivider orientation=\"vertical\" /> */}\n          <Box>\n            <Tooltip title=\"저장\">\n              <IconButton edge=\"end\" aria-label=\"Save\">\n                <DoubleArrowIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n          {/* <StyledDivider orientation=\"vertical\" /> */}\n          <Box>\n            <Tooltip title=\"삭제\">\n              <IconButton edge=\"end\" aria-label=\"Delete\">\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Grid>\n      </ListItem>\n      <Divider />\n    </>\n  );\n};\n\nexport default IntentConvMngItem;\n","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n// import ListItem from \"@material-ui/core/ListItem\";\n// import ListItemText from \"@material-ui/core/ListItemText\";\n// import List from \"@material-ui/core/List\";\nimport PropTypes from \"prop-types\";\nimport IntentConvMngItem from \"./IntentConvMngItem\";\nimport { FixedSizeList } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport { getSuggetions } from \"./actions/nlu.actions\";\n\nlet items = {};\nlet requestCache = {};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    maxWidth: 1500,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nconst renderRow = props => {\n  const { index, style, data, total, limit, offset } = props;\n  const item = items[index];\n\n  console.log(\"renderRow\", index);\n\n  return (\n    <IntentConvMngItem\n      index={index}\n      style={style}\n      data={item}\n      total={total}\n      limit={limit}\n      offset={offset}\n    />\n  );\n};\nrenderRow.propTypes = {\n  index: PropTypes.number.isRequired,\n  style: PropTypes.object.isRequired\n};\n\nconst isItemLoaded = ({ index }) => !!items[index];\n\nconst loadMoreItems = (visibleStartIndex, visibleStopIndex) => {\n  console.log(visibleStartIndex, visibleStopIndex);\n  const key = [visibleStartIndex, visibleStopIndex].join(\":\"); // 0:10\n  if (requestCache[key]) {\n    return;\n  }\n\n  const length = visibleStopIndex - visibleStartIndex;\n  const visibleRange = [...Array(length).keys()].map(\n    x => x + visibleStartIndex\n  );\n  const itemsRetrieved = visibleRange.every(index => !!items[index]);\n\n  if (itemsRetrieved) {\n    requestCache[key] = key;\n    return;\n  }\n\n  return getSuggetions(\"default\", {\n    q: \"\",\n    intent: \"\",\n    limit: length,\n    offset: visibleStartIndex\n  })\n    .then(response => response.data)\n    .then(data => {\n      // data.records.forEach((city, index) => {\n      //   items[index + visibleStartIndex] = city.fields;\n      // });\n      data.forEach((item, index) => {\n        items[index + visibleStartIndex] = item;\n      });\n      console.log(data);\n    })\n    .catch(error => console.error(\"Error:\", error));\n};\n\n// try{\n// const response = await getSuggetions(project_id, {\n//   q: \"\",\n//   intent: \"\",\n//   limit: limit,\n//   offset: offset\n// });\n// console.log(response);\n// setData(response.data);\n// setTotal(response.headers[\"x-total-count\"]);\n// } catch (e) {\n// console.log(e);\n// }\n\nconst IntentConvMngList = ({\n  data,\n  name,\n  index,\n  total,\n  limit,\n  offset,\n  onRetrieve\n}) => {\n  const classes = useStyles();\n  console.log(data);\n  return (\n    <AutoSizer>\n      {({ height, width }) => (\n        <InfiniteLoader\n          isItemLoaded={isItemLoaded}\n          loadMoreItems={loadMoreItems}\n          itemCount={total}\n        >\n          {({ onItemsRendered, ref }) => (\n            // <AutoSizer>\n            //   {({ height, width }) => (\n            <FixedSizeList\n              className=\"List\"\n              height={height}\n              itemCount={total}\n              itemSize={80}\n              width={width}\n              // itemData={data}\n              ref={ref}\n              onItemsRendered={onItemsRendered}\n            >\n              {renderRow}\n            </FixedSizeList>\n            //   )}\n            // </AutoSizer>\n          )}\n        </InfiniteLoader>\n      )}\n    </AutoSizer>\n  );\n};\n\nexport default IntentConvMngList;\n\n// {data &&\n//   data.map((item, index) => {\n//     return (\n//       <IntentConvMngItem key={item.hash} index={index} data={item} />\n//     );\n//   })}\n","import React from \"react\";\nimport { makeStyles, lighten } from \"@material-ui/core/styles\";\nimport { Toolbar, Typography, IconButton, Tooltip } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport DoubleArrow from \"@material-ui/icons/DoubleArrow\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1)\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColot: lighten(theme.palette.secondary.light, 0.85)\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.primary.dark\n        },\n  spacer: {\n    flex: \"1 1 100%\"\n  },\n\n  actions: {\n    flex: \"0 0 auto\",\n    justifyContent: \"flex-end\",\n    color: theme.palette.text.secondary\n  },\n  title: {\n    flex: \"0 0 auto\"\n  }\n}));\n\nconst refreshClick = () => {\n  console.log(\"Refresh Clicked\");\n};\n\nconst removeClick = () => {\n  console.log(\"Remove Clicked\");\n};\n\nconst activeClick = () => {\n  console.log(\"Active Clicked\");\n};\nconst IntentConvMngToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected, onRetrieve } = props;\n  const onClickRefresh = () => {\n    onRetrieve(\"default\", { q: \"\", intent: \"\", limit: 50, offset: 0 });\n  };\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0\n      })}\n    >\n      <div className={classes.title}>\n        {numSelected > 0 ? (\n          <Typography color=\"inherit\" variant=\"subtitle1\">\n            {numSelected} 개 모델이 선택되었습니다\n          </Typography>\n        ) : (\n          <Typography variant=\"h6\" id=\"tableTitle\">\n            대화 의도 재설정 리스트\n          </Typography>\n        )}\n      </div>\n      <div className={classes.spacer} />\n      <div className={classes.actions}>\n        {numSelected > 0 ? (\n          numSelected === 1 ? (\n            <>\n              <Tooltip title=\"모델 활성화\">\n                <IconButton aria-label=\"Active Model\">\n                  <DoubleArrow />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"모델 삭제\">\n                <IconButton aria-label=\"Delete\">\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </>\n          ) : (\n            <>\n              <Tooltip title=\"모델 삭제\">\n                <IconButton aria-label=\"Delete\">\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </>\n          )\n        ) : (\n          <Tooltip title=\"재조회\">\n            <IconButton aria-label=\"Refresh\" onClick={onClickRefresh}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </div>\n    </Toolbar>\n  );\n};\n\nexport default IntentConvMngToolbar;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { getSuggetions } from \"./actions/nlu.actions\";\nimport IntentConvMngList from \"./IntentConvMngList\";\nimport { Container } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IntentConvMngToolbar from \"./IntentConvMngToolbar\";\n\nconst containerStyle = makeStyles(theme => ({\n  root: {\n    height: \"100%\"\n  }\n}));\nconst getIntentSuggetion = async (project_id, params) => {\n  const response = await getSuggetions(project_id, params);\n  console.log(response);\n  return response;\n};\n\nfunction IntentConvMngContainer({ project_id, name, index }) {\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(50);\n  const [offset, setOffset] = useState(0);\n\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        //getTrainingData\n        //getSuggetions\n        const response = await getSuggetions(project_id, {\n          q: \"\",\n          intent: \"\",\n          limit: limit,\n          offset: offset\n        });\n        console.log(response);\n        setData(response.data);\n        setTotal(response.headers[\"x-total-count\"]);\n      } catch (e) {\n        console.log(e);\n      }\n\n      setLoading(false);\n    };\n    fetchData();\n  }, [project_id, limit, offset]);\n\n  const onRetrieve = async (project_id, params) => {\n    console.log(project_id, params);\n\n    try {\n      const response = await getSuggetions(project_id, params);\n      console.log(response);\n      setData(response.data);\n      setTotal(response.headersheaders[\"x-total-count\"]);\n    } catch (e) {\n      console.log(e);\n    }\n\n    setLoading(false);\n  };\n  if (loading) {\n    console.log(\"loading....\");\n    return null;\n  } else if (data.length === 0) {\n    console.log(\"data empty\");\n  } else {\n    console.log(\"data load\", data);\n    console.log(\"data total\", total);\n  }\n  return (\n    <>\n      {/* <IntentConvMngTable\n        data={data}\n        name={name}\n        index={index}\n        onRetrieve={onRetrieve}\n      /> */}\n      <IntentConvMngToolbar onRetrieve={onRetrieve} />\n      <Container style={{ height: \"100%\" }}>\n        <IntentConvMngList\n          data={data}\n          name={name}\n          index={index}\n          total={total}\n          limit={limit}\n          offset={offset}\n          onRetrieve={onRetrieve}\n        />\n      </Container>\n    </>\n  );\n}\n\nexport default IntentConvMngContainer;\n","import React from \"react\";\nimport { makeStyles, lighten } from \"@material-ui/core/styles\";\nimport { Toolbar, Typography, IconButton, Tooltip } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport DoubleArrow from \"@material-ui/icons/DoubleArrow\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1)\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColot: lighten(theme.palette.secondary.light, 0.85)\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.primary.dark\n        },\n  spacer: {\n    flex: \"1 1 100%\"\n  },\n\n  actions: {\n    flex: \"0 0 auto\",\n    justifyContent: \"flex-end\",\n    color: theme.palette.text.secondary\n  },\n  title: {\n    flex: \"0 0 auto\"\n  }\n}));\n\nconst refreshClick = () => {\n  console.log(\"Refresh Clicked\");\n};\n\nconst removeClick = () => {\n  console.log(\"Remove Clicked\");\n};\n\nconst activeClick = () => {\n  console.log(\"Active Clicked\");\n};\nconst IntentRegNluToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected, onRetrieve } = props;\n  const onClickRefresh = () => {\n    onRetrieve(\"default\", { q: \"\", intent: \"\", limit: 50, offset: 0 });\n  };\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0\n      })}\n    >\n      <div className={classes.title}>\n        {numSelected > 0 ? (\n          <Typography color=\"inherit\" variant=\"subtitle1\">\n            {numSelected} 개 모델이 선택되었습니다\n          </Typography>\n        ) : (\n          <Typography variant=\"h6\" id=\"tableTitle\">\n            기등록 학습 NLU 데이터\n          </Typography>\n        )}\n      </div>\n      <div className={classes.spacer} />\n      <div className={classes.actions}>\n        {numSelected > 0 ? (\n          numSelected === 1 ? (\n            <>\n              <Tooltip title=\"모델 활성화\">\n                <IconButton aria-label=\"Active Model\">\n                  <DoubleArrow />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"모델 삭제\">\n                <IconButton aria-label=\"Delete\">\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </>\n          ) : (\n            <>\n              <Tooltip title=\"모델 삭제\">\n                <IconButton aria-label=\"Delete\">\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </>\n          )\n        ) : (\n          <Tooltip title=\"재조회\">\n            <IconButton aria-label=\"Refresh\" onClick={onClickRefresh}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </div>\n    </Toolbar>\n  );\n};\n\nexport default IntentRegNluToolbar;\n","import React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"react-select\";\nimport {\n  Checkbox,\n  Typography,\n  Grid,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  Box,\n  Tooltip,\n  Divider\n} from \"@material-ui/core\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport objectPath from \"object-path\";\nimport DoubleArrowIcon from \"@material-ui/icons/DoubleArrow\";\n\nconst StyledListItemText = withStyles({\n  root: {\n    width: \"20%\",\n    maxWidth: \"600px\"\n  },\n  multiline: {\n    marginRight: \"10px\"\n  }\n})(ListItemText);\n\nconst StyledDivider = withStyles({\n  root: {\n    height: \"25px\",\n    width: \"1.5px\"\n  }\n})(Divider);\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"30%\"\n  }\n}));\n\nconst customStyles = {\n  container: provied => ({\n    ...provied,\n    width: \"40%\",\n    maxWidth: \"500px\"\n  })\n};\n\nconst IntentRegNluItem = ({ index, data, intents }) => {\n  const classes = useStyles();\n  console.log(\"IntentRegNluItem data\", data);\n  console.log(\"IntentRegNluItem intents\", intents);\n  //console.log(objectPath.get(data, \"user_input\"));\n  //   console.log(\n  //     objectPath\n  //       .get(objectPath.get(data, \"user_input\"), \"intent\")\n  //       .confidence.toFixed(3)\n  //   );\n  //   console.log(\n  //     objectPath.get(objectPath.get(data, \"user_input\"), \"intent_ranking\")\n  //   );\n  if (!data) return null;\n  if (!intents) return null;\n  let intentList = [];\n\n  intents.map(value => {\n    //   console.log(value);\n    const item = {\n      value: value.intent,\n      label: value.intent\n    };\n    intentList.push(item);\n  });\n\n  //   console.log(intent_ranking);\n  // Object.defineProperty(\n  //   objectPath\n  //   .get(objectPath.get(data, \"intent_ranking\"),\n  // )\n\n  return (\n    <>\n      <ListItem key={data.id}>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n        >\n          <ListItemIcon>\n            <Checkbox\n              edge=\"start\"\n              // checked={checked.indexOf(value) !== -1}\n              tabIndex={-1}\n              disableRipple\n              // inputProps={{ \"aria-labelledby\": labelId }}\n            />\n          </ListItemIcon>\n          {/* <ListItemText className={classes.root} primary={`Item ${index + 1}`} /> */}\n          <StyledListItemText\n            primary={objectPath.get(data, \"text\")}\n            secondary={\n              objectPath.get(data, \"intent\") +\n              \" (\" +\n              objectPath.get(data, \"id\") +\n              \")\"\n            }\n          />\n          {/* <StyledDivider orientation=\"vertical\" /> */}\n          <Select\n            styles={customStyles}\n            options={intentList}\n            placeholder=\"의도(intent) 선택...\"\n            value={intentList.filter(\n              option => option.label === objectPath.get(data, \"intent\")\n            )}\n          ></Select>\n          {/* <StyledDivider orientation=\"vertical\" /> */}\n          <Box>\n            <Tooltip title=\"저장\">\n              <IconButton edge=\"end\" aria-label=\"Save\">\n                <DoubleArrowIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n          {/* <StyledDivider orientation=\"vertical\" /> */}\n          <Box>\n            <Tooltip title=\"삭제\">\n              <IconButton edge=\"end\" aria-label=\"Delete\">\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Grid>\n      </ListItem>\n      <Divider />\n    </>\n  );\n};\n\nexport default IntentRegNluItem;\n","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n// import List from \"@material-ui/core/List\";\nimport PropTypes from \"prop-types\";\nimport IntentRegNluItem from \"./IntentRegNluItem\";\nimport { FixedSizeList } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport { getTrainingData } from \"./actions/nlu.actions\";\n\nlet items = {};\nlet requestCache = {};\nlet g_intents = [];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    height: 700,\n    maxWidth: 1500,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nconst renderRow = props => {\n  const { index, style, data, total, limit, offset, intents } = props;\n  const item = items[index];\n  console.log(\"renderRow props\", props);\n  console.log(\"renderRow\", index);\n  console.log(\"renderRow item\", item);\n\n  return (\n    <IntentRegNluItem\n      index={index}\n      style={style}\n      data={item}\n      total={total}\n      limit={limit}\n      offset={offset}\n      intents={g_intents}\n    />\n  );\n};\nrenderRow.propTypes = {\n  index: PropTypes.number.isRequired,\n  style: PropTypes.object.isRequired\n};\n\nconst isItemLoaded = ({ index }) => !!items[index];\n\nconst loadMoreItems = (visibleStartIndex, visibleStopIndex) => {\n  console.log(visibleStartIndex, visibleStopIndex);\n  const key = [visibleStartIndex, visibleStopIndex].join(\":\"); // 0:10\n  if (requestCache[key]) {\n    return;\n  }\n\n  const length = visibleStopIndex - visibleStartIndex;\n  const visibleRange = [...Array(length).keys()].map(\n    x => x + visibleStartIndex\n  );\n  const itemsRetrieved = visibleRange.every(index => !!items[index]);\n\n  if (itemsRetrieved) {\n    requestCache[key] = key;\n    return;\n  }\n\n  return getTrainingData(\"default\", {\n    q: \"\",\n    intent: \"\",\n    limit: length,\n    offset: visibleStartIndex\n  })\n    .then(response => response.data)\n    .then(data => {\n      // data.records.forEach((city, index) => {\n      //   items[index + visibleStartIndex] = city.fields;\n      // });\n      data.forEach((item, index) => {\n        items[index + visibleStartIndex] = item;\n      });\n      console.log(data);\n    })\n    .catch(error => console.error(\"Error:\", error));\n};\n\nconst IntentRegNluList = ({\n  data,\n  intents,\n  name,\n  index,\n  total,\n  limit,\n  offset,\n  onRetrieve\n}) => {\n  const classes = useStyles();\n  console.log(data);\n  console.log(intents);\n  g_intents = intents;\n  return (\n    <AutoSizer>\n      {({ height, width }) => (\n        <InfiniteLoader\n          isItemLoaded={isItemLoaded}\n          loadMoreItems={loadMoreItems}\n          itemCount={total}\n        >\n          {({ onItemsRendered, ref }) => (\n            // <AutoSizer>\n            //   {({ height, width }) => (\n            <FixedSizeList\n              className=\"List\"\n              height={height}\n              itemCount={total}\n              itemSize={80}\n              width={width}\n              // itemData={data}\n              ref={ref}\n              onItemsRendered={onItemsRendered}\n            >\n              {renderRow}\n            </FixedSizeList>\n            //   )}\n            // </AutoSizer>\n          )}\n        </InfiniteLoader>\n      )}\n    </AutoSizer>\n  );\n\n  // return (\n  //   <List>\n  //     {data &&\n  //       data.map((item, index) => {\n  //         return (\n  //           <IntentRegNluItem\n  //             key={item.id}\n  //             index={index}\n  //             data={item}\n  //             intents={intents}\n  //           />\n  //         );\n  //       })}\n  //   </List>\n  // );\n};\n\nexport default IntentRegNluList;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IntentRegNluToolbar from \"./IntentRegNluToolbar\";\nimport { getIntents, getTrainingData } from \"./actions/nlu.actions\";\nimport IntentRegNluList from \"./IntentRegNluList\";\n\nconst containerStyle = makeStyles(theme => ({\n  root: {\n    height: \"100%\"\n  }\n}));\nconst getRegNluData = async (project_id, params) => {\n  const response = await getTrainingData(project_id, params);\n  console.log(response);\n  return response;\n};\n\nfunction IntentRegNluContainer({ project_id, name, index }) {\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [intents, setIntents] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [limit, setLimit] = useState(50);\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await getTrainingData(project_id, {\n          q: \"\",\n          intent: \"\",\n          limit: limit,\n          offset: offset\n        });\n        console.log(response);\n        setData(response.data);\n        setTotal(response.headers[\"x-total-count\"]);\n      } catch (e) {\n        console.log(e);\n      }\n\n      setLoading(false);\n    };\n    fetchData();\n    const fetchIntentData = async () => {\n      setLoading(true);\n      try {\n        const response = await getIntents(project_id);\n        console.log(response);\n        setIntents(response.data);\n      } catch (e) {\n        console.log(e);\n      }\n\n      setLoading(false);\n    };\n\n    fetchIntentData();\n  }, [project_id]);\n\n  const onRetrieve = async (project_id, params) => {\n    console.log(project_id, params);\n\n    try {\n      const response = await getTrainingData(project_id, params);\n      console.log(response);\n      setData(response.data);\n      setTotal(response.headersheaders[\"x-total-count\"]);\n    } catch (e) {\n      console.log(e);\n    }\n\n    try {\n      const response = await getIntents(project_id);\n      console.log(response);\n      setIntents(response.data);\n    } catch (e) {\n      console.log(e);\n    }\n\n    setLoading(false);\n  };\n  if (loading) {\n    console.log(\"loading....\");\n    return null;\n  } else if (data.length === 0) {\n    console.log(\"data empty\");\n  } else {\n    console.log(\"data load\", data);\n    console.log(\"data total\", total);\n  }\n\n  return (\n    <>\n      {/* <IntentConvMngTable\n        data={data}\n        name={name}\n        index={index}\n        onRetrieve={onRetrieve}\n      /> */}\n      <IntentRegNluToolbar onRetrieve={onRetrieve} />\n      <Container style={{ height: \"100%\" }}>\n        <IntentRegNluList\n          data={data}\n          intents={intents}\n          name={name}\n          index={index}\n          total={total}\n          limit={limit}\n          offset={offset}\n          onRetrieve={onRetrieve}\n        />\n      </Container>\n    </>\n  );\n}\n\nexport default IntentRegNluContainer;\n","import React from \"react\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { Tab, AppBar, Tabs, Typography, Container } from \"@material-ui/core\";\n// import SwipeableViews from \"react-swipeable-views\";\nimport PropTypes from \"prop-types\";\n// import EnhancedTable from \"./components/TabInnerGrid\";\nimport IntentConvMngContainer from \"./IntentConvMngContainer\";\n// import IntentConvMngTable from \"./components/IntentConvMngTable\";\n// import Fade from \"@material-ui/core/Fade\";\nimport IntentRegNluContainer from \"./IntentRegNluContainer\";\n\nfunction TabContainer({ children, dir, value, index }) {\n  return (\n    <div\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      dir={dir}\n      style={{ height: \"80%\" }}\n      id={`tabcontainer-${index}`}\n      aria-labelledby={`tabcontainer-${index}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  dir: PropTypes.string.isRequired,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: theme.palette.background.paper\n  },\n  div: {\n    height: \"100%\",\n    flex: \"0 0 100%\",\n    maxWidth: \"100%\"\n  }\n}));\n\nfunction NluTraining() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = useState(0);\n  const ref = useRef(null);\n  useEffect(() => {\n    console.log(\"effect\");\n    // return () => {\n    //   console.log(ref);\n    // };\n  });\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`\n    };\n  }\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  function handleChangeIndex(index) {\n    setValue(index);\n  }\n\n  return (\n    <>\n      {/* <div className={useStyles().div}>\n        <div className=\"kt-section\">\n          <span className=\"kt-section__sub\">\n            <strong>\n              <code>NLU</code> 학습 유형 선택\n            </strong>\n          </span> */}\n      {/* <div className=\"kt-separator kt-separator--dashed\"></div> */}\n      {/* <div className=\"kt-section__content\"> */}\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"default\">\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"대화 의도 재설정\" {...a11yProps(0)} />\n            <Tab label=\"기등록 학습 NLU 데이터\" {...a11yProps(1)} />\n            {/* <Tab label=\"정규 표헌 및 Lookup 테이블\" {...a11yProps(2)} /> */}\n          </Tabs>\n        </AppBar>\n\n        {/* <SwipeableViews\n          axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n          index={value}\n          onChangeIndex={handleChangeIndex}\n          ref={ref}\n          // slideStyle={{ height: \"100%\" }}\n        > */}\n\n        <TabContainer\n          className={classes.root}\n          dir={theme.direction}\n          value={value}\n          index={0}\n        >\n          {/* <IntentConvMngTable name={\"대화 의도 재설정\"} index={value} /> */}\n          <IntentConvMngContainer\n            project_id={\"default\"}\n            name={\"대화 의도 재설정\"}\n          />\n        </TabContainer>\n        <TabContainer\n          className={classes.root}\n          dir={theme.direction}\n          value={value}\n          index={1}\n        >\n          <IntentRegNluContainer\n            project_id={\"default\"}\n            name={\"기등록 학습 NLU 데이터\"}\n          />\n        </TabContainer>\n        {/* <TabContainer dir={theme.direction} value={value} index={2}>\n          <EnhancedTable name={\"정규 표현 및 Lookup 테이블 내역\"} />\n        </TabContainer> */}\n\n        {/* </SwipeableViews> */}\n      </div>\n      {/* </div> */}\n      {/* </div>\n      </div> */}\n    </>\n  );\n}\n\nexport default NluTraining;\n"],"sourceRoot":""}