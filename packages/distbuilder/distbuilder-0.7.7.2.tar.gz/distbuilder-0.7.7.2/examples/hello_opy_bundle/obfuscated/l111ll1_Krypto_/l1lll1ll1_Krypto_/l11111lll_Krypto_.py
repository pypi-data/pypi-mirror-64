# -*- coding: utf-8 -*-
from sys import version_info as __1l111l_Krypto_
l1lll_Krypto_ = __1l111l_Krypto_[0] == 2
l1l11ll_Krypto_ = 2048
l1l11_Krypto_ = 7
def l1l1111_Krypto_ (l1ll1l1_Krypto_):
    global l1l1l11_Krypto_
    l1111_Krypto_ = ord (l1ll1l1_Krypto_ [-1])
    l11l_Krypto_ = l1ll1l1_Krypto_ [:-1]
    l1l1lll_Krypto_ = l1111_Krypto_ % len (l11l_Krypto_)
    l11ll1_Krypto_ = l11l_Krypto_ [:l1l1lll_Krypto_] + l11l_Krypto_ [l1l1lll_Krypto_:]
    if l1lll_Krypto_:
        l1l_Krypto_ = unicode () .join ([unichr (ord (char) - l1l11ll_Krypto_ - (l11l1_Krypto_ + l1111_Krypto_) % l1l11_Krypto_) for l11l1_Krypto_, char in enumerate (l11ll1_Krypto_)])
    else:
        l1l_Krypto_ = str () .join ([chr (ord (char) - l1l11ll_Krypto_ - (l11l1_Krypto_ + l1111_Krypto_) % l1l11_Krypto_) for l11l1_Krypto_, char in enumerate (l11ll1_Krypto_)])
    return eval (l1l_Krypto_)
from binascii import hexlify as l1111l111_Krypto_
class l1111l11l_Krypto_:
    l1l1111_Krypto_ (u"ࠥࠦࠧࡇࠠࡨࡧࡱࡩࡷ࡯ࡣࠡࡥ࡯ࡥࡸࡹࠠࡧࡱࡵࠤࡦࡴࠠࡢࡤࡶࡸࡷࡧࡣࡵࠢࡦࡶࡾࡶࡴࡰࡩࡵࡥࡵ࡮ࡩࡤࠢ࡫ࡥࡸ࡮ࠠࡢ࡮ࡪࡳࡷ࡯ࡴࡩ࡯࠱ࠎࠥࠦࠠࠡࠌࠣࠤࠥࠦ࠺ࡶࡰࡧࡳࡨࡻ࡭ࡦࡰࡷࡩࡩࡀࠠࡣ࡮ࡲࡧࡰࡥࡳࡪࡼࡨࠎࠥࠦࠠࠡࠤࠥࠦ࢒")
    digest_size = None
    block_size = None
    def __init__(self, l1111l1l1_Krypto_, data=None):
        l1l1111_Krypto_ (u"ࠦࠧࠨࡉ࡯࡫ࡷ࡭ࡦࡲࡩࡻࡧࠣࡸ࡭࡫ࠠࡩࡣࡶ࡬ࠥࡵࡢ࡫ࡧࡦࡸ࠳ࠐࠊࠡࠢࠣࠤࠥࠦࠠࠡ࠼ࡓࡥࡷࡧ࡭ࡦࡶࡨࡶࡸࡀࠊࠡࠢࠣࠤࠥࠦࠠࠡࠢ࡫ࡥࡸ࡮ࡆࡢࡥࡷࡳࡷࡿࠠ࠻ࠢࡦࡥࡱࡲࡡࡣ࡮ࡨࠎࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࡄࡲࠥࡵࡢ࡫ࡧࡦࡸࠥࡺࡨࡢࡶࠣࡻ࡮ࡲ࡬ࠡࡩࡨࡲࡪࡸࡡࡵࡧࠣࡸ࡭࡫ࠠࡢࡥࡷࡹࡦࡲࠠࡩࡣࡶ࡬ࠥ࡯࡭ࡱ࡮ࡨࡱࡪࡴࡴࡢࡶ࡬ࡳࡳ࠴ࠊࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥ࠰ࡨࡢࡵ࡫ࡊࡦࡩࡴࡰࡴࡼ࠮ࠥࡳࡵࡴࡶࠣ࡬ࡦࡼࡥࠡࡣࠣ࠮ࡳ࡫ࡷࠩࠫ࠭ࠤࡲ࡫ࡴࡩࡱࡧ࠰ࠥࡵࡲࠡ࡯ࡸࡷࡹࠦࡢࡦࠢࡧ࡭ࡷ࡫ࡣࡵ࡮ࡼࠎࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࡦࡥࡱࡲࡡࡣ࡮ࡨ࠲ࠏࠦࠠࠡࠢࠣࠤࠥࠦࠠࡥࡣࡷࡥࠥࡀࠠࡣࡻࡷࡩࠥࡹࡴࡳ࡫ࡱ࡫ࠏࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࡘ࡭࡫ࠠࡷࡧࡵࡽࠥ࡬ࡩࡳࡵࡷࠤࡨ࡮ࡵ࡯࡭ࠣࡳ࡫ࠦࡴࡩࡧࠣࡱࡪࡹࡳࡢࡩࡨࠤࡹࡵࠠࡩࡣࡶ࡬࠳ࠐࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࠤࡎࡺࠠࡪࡵࠣࡩࡶࡻࡩࡷࡣ࡯ࡩࡳࡺࠠࡵࡱࠣࡥࡳࠦࡥࡢࡴ࡯ࡽࠥࡩࡡ࡭࡮ࠣࡸࡴࠦࡠࡶࡲࡧࡥࡹ࡫ࠨࠪࡢ࠱ࠎࠥࠦࠠࠡࠢࠣࠤࠥࠨࠢࠣ࢓")
        if hasattr(l1111l1l1_Krypto_, l1l1111_Krypto_ (u"ࠬࡴࡥࡸࠩ࢔")):
            self._hash = l1111l1l1_Krypto_.new()
        else:
            self._hash = l1111l1l1_Krypto_()
        if data:
            self.update(data)
    def update(self, data):
        l1l1111_Krypto_ (u"ࠨࠢࠣࡅࡲࡲࡹ࡯࡮ࡶࡧࠣ࡬ࡦࡹࡨࡪࡰࡪࠤࡴ࡬ࠠࡢࠢࡰࡩࡸࡹࡡࡨࡧࠣࡦࡾࠦࡣࡰࡰࡶࡹࡲ࡯࡮ࡨࠢࡷ࡬ࡪࠦ࡮ࡦࡺࡷࠤࡨ࡮ࡵ࡯࡭ࠣࡳ࡫ࠦࡤࡢࡶࡤ࠲ࠏࠦࠠࠡࠢࠣࠤࠥࠦࠊࠡࠢࠣࠤࠥࠦࠠࠡࡔࡨࡴࡪࡧࡴࡦࡦࠣࡧࡦࡲ࡬ࡴࠢࡤࡶࡪࠦࡥࡲࡷ࡬ࡺࡦࡲࡥ࡯ࡶࠣࡸࡴࠦࡡࠡࡵ࡬ࡲ࡬ࡲࡥࠡࡥࡤࡰࡱࠦࡷࡪࡶ࡫ࠤࡹ࡮ࡥࠡࡥࡲࡲࡨࡧࡴࡦࡰࡤࡸ࡮ࡵ࡮ࠋࠢࠣࠤࠥࠦࠠࠡࠢࡲࡪࠥࡧ࡬࡭ࠢࡷ࡬ࡪࠦࡡࡳࡩࡸࡱࡪࡴࡴࡴ࠰ࠣࡍࡳࠦ࡯ࡵࡪࡨࡶࠥࡽ࡯ࡳࡦࡶ࠾ࠏࠐࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࡂࡃࡄࠠ࡮࠰ࡸࡴࡩࡧࡴࡦࠪࡤ࠭ࡀࠦ࡭࠯ࡷࡳࡨࡦࡺࡥࠩࡤࠬࠎࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠌࠣࠤࠥࠦࠠࠡࠢࠣ࡭ࡸࠦࡥࡲࡷ࡬ࡺࡦࡲࡥ࡯ࡶࠣࡸࡴࡀࠊࠡࠢࠣࠤࠥࠦࠠࠡࠌࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦ࠾࠿ࡀࠣࡱ࠳ࡻࡰࡥࡣࡷࡩ࠭ࡧࠫࡣࠫࠍࠎࠥࠦࠠࠡࠢࠣࠤࠥࡀࡐࡢࡴࡤࡱࡪࡺࡥࡳࡵ࠽ࠎࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࡥࡣࡷࡥࠥࡀࠠࡣࡻࡷࡩࠥࡹࡴࡳ࡫ࡱ࡫ࠏࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࠢࠣࡘ࡭࡫ࠠ࡯ࡧࡻࡸࠥࡩࡨࡶࡰ࡮ࠤࡴ࡬ࠠࡵࡪࡨࠤࡲ࡫ࡳࡴࡣࡪࡩࠥࡨࡥࡪࡰࡪࠤ࡭ࡧࡳࡩࡧࡧ࠲ࠏࠦࠠࠡࠢࠣࠤࠥࠦࠢࠣࠤ࢕")
        return self._hash.update(data)
    def digest(self):
        l1l1111_Krypto_ (u"ࠢࠣࠤࡕࡩࡹࡻࡲ࡯ࠢࡷ࡬ࡪࠦࠪࠫࡤ࡬ࡲࡦࡸࡹࠫࠬࠣࠬࡳࡵ࡮࠮ࡲࡵ࡭ࡳࡺࡡࡣ࡮ࡨ࠭ࠥࡪࡩࡨࡧࡶࡸࠥࡵࡦࠡࡶ࡫ࡩࠥࡳࡥࡴࡵࡤ࡫ࡪࠦࡴࡩࡣࡷࠤ࡭ࡧࡳࠡࡤࡨࡩࡳࠦࡨࡢࡵ࡫ࡩࡩࠦࡳࡰࠢࡩࡥࡷ࠴ࠊࠋࠢࠣࠤࠥࠦࠠࠡࠢࡗ࡬࡮ࡹࠠ࡮ࡧࡷ࡬ࡴࡪࠠࡥࡱࡨࡷࠥࡴ࡯ࡵࠢࡦ࡬ࡦࡴࡧࡦࠢࡷ࡬ࡪࠦࡳࡵࡣࡷࡩࠥࡵࡦࠡࡶ࡫ࡩࠥ࡮ࡡࡴࡪࠣࡳࡧࡰࡥࡤࡶ࠱ࠎࠥࠦࠠࠡࠢࠣࠤࠥ࡟࡯ࡶࠢࡦࡥࡳࠦࡣࡰࡰࡷ࡭ࡳࡻࡥࠡࡷࡳࡨࡦࡺࡩ࡯ࡩࠣࡸ࡭࡫ࠠࡰࡤ࡭ࡩࡨࡺࠠࡢࡨࡷࡩࡷࠦࡣࡢ࡮࡯࡭ࡳ࡭ࠠࡵࡪ࡬ࡷࠥ࡬ࡵ࡯ࡥࡷ࡭ࡴࡴ࠮ࠋࠢࠣࠤࠥࠦࠠࠡࠢࠍࠤࠥࠦࠠࠡࠢࠣࠤ࠿ࡘࡥࡵࡷࡵࡲ࠿ࠦࡁࠡࡤࡼࡸࡪࠦࡳࡵࡴ࡬ࡲ࡬ࠦ࡯ࡧࠢࡣࡨ࡮࡭ࡥࡴࡶࡢࡷ࡮ࢀࡥࡡࠢࡥࡽࡹ࡫ࡳ࠯ࠢࡌࡸࠥࡳࡡࡺࠢࡦࡳࡳࡺࡡࡪࡰࠣࡲࡴࡴ࠭ࡂࡕࡆࡍࡎࠐࠠࠡࠢࠣࠤࠥࠦࠠࠡࡥ࡫ࡥࡷࡧࡣࡵࡧࡵࡷ࠱ࠦࡩ࡯ࡥ࡯ࡹࡩ࡯࡮ࡨࠢࡱࡹࡱࡲࠠࡣࡻࡷࡩࡸ࠴ࠊࠡࠢࠣࠤࠥࠦࠠࠡࠤࠥࠦ࢖")
        return self._hash.digest()
    def hexdigest(self):
        l1l1111_Krypto_ (u"ࠣࠤࠥࡖࡪࡺࡵࡳࡰࠣࡸ࡭࡫ࠠࠫࠬࡳࡶ࡮ࡴࡴࡢࡤ࡯ࡩ࠯࠰ࠠࡥ࡫ࡪࡩࡸࡺࠠࡰࡨࠣࡸ࡭࡫ࠠ࡮ࡧࡶࡷࡦ࡭ࡥࠡࡶ࡫ࡥࡹࠦࡨࡢࡵࠣࡦࡪ࡫࡮ࠡࡪࡤࡷ࡭࡫ࡤࠡࡵࡲࠤ࡫ࡧࡲ࠯ࠌࠍࠤࠥࠦࠠࠡࠢࠣࠤ࡙࡮ࡩࡴࠢࡰࡩࡹ࡮࡯ࡥࠢࡧࡳࡪࡹࠠ࡯ࡱࡷࠤࡨ࡮ࡡ࡯ࡩࡨࠤࡹ࡮ࡥࠡࡵࡷࡥࡹ࡫ࠠࡰࡨࠣࡸ࡭࡫ࠠࡩࡣࡶ࡬ࠥࡵࡢ࡫ࡧࡦࡸ࠳ࠐࠠࠡࠢࠣࠤࠥࠦࠠࠋࠢࠣࠤࠥࠦࠠࠡࠢ࠽ࡖࡪࡺࡵࡳࡰ࠽ࠤࡆࠦࡳࡵࡴ࡬ࡲ࡬ࠦ࡯ࡧࠢ࠵࠮ࠥࡦࡤࡪࡩࡨࡷࡹࡥࡳࡪࡼࡨࡤࠥࡩࡨࡢࡴࡤࡧࡹ࡫ࡲࡴ࠰ࠣࡍࡹࠦࡣࡰࡰࡷࡥ࡮ࡴࡳࠡࡱࡱࡰࡾࠐࠠࠡࠢࠣࠤࠥࠦࠠࠡࡪࡨࡼࡦࡪࡥࡤ࡫ࡰࡥࡱࠦࡁࡔࡅࡌࡍࠥࡪࡩࡨ࡫ࡷࡷ࠳ࠐࠠࠡࠢࠣࠤࠥࠦࠠࠣࠤࠥࢗ")
        return self._hash.hexdigest()
    def copy(self):
        l1l1111_Krypto_ (u"ࠤࠥࠦࡗ࡫ࡴࡶࡴࡱࠤࡦࠦࡣࡰࡲࡼࠤ࠭ࠨࡣ࡭ࡱࡱࡩࠧ࠯ࠠࡰࡨࠣࡸ࡭࡫ࠠࡩࡣࡶ࡬ࠥࡵࡢ࡫ࡧࡦࡸ࠳ࠐࠊࠡࠢࠣࠤࠥࠦࠠࠡࡖ࡫ࡩࠥࡩ࡯ࡱࡻࠣࡻ࡮ࡲ࡬ࠡࡪࡤࡺࡪࠦࡴࡩࡧࠣࡷࡦࡳࡥࠡ࡫ࡱࡸࡪࡸ࡮ࡢ࡮ࠣࡷࡹࡧࡴࡦࠢࡤࡷࠥࡺࡨࡦࠢࡲࡶ࡮࡭ࡩ࡯ࡣ࡯ࠤ࡭ࡧࡳࡩࠌࠣࠤࠥࠦࠠࠡࠢࠣࡳࡧࡰࡥࡤࡶ࠱ࠎࠥࠦࠠࠡࠢࠣࠤ࡚ࠥࡨࡪࡵࠣࡧࡦࡴࠠࡣࡧࠣࡹࡸ࡫ࡤࠡࡶࡲࠤࡪ࡬ࡦࡪࡥ࡬ࡩࡳࡺ࡬ࡺࠢࡦࡳࡲࡶࡵࡵࡧࠣࡸ࡭࡫ࠠࡥ࡫ࡪࡩࡸࡺࡳࠡࡱࡩࠤࡸࡺࡲࡪࡰࡪࡷࠥࡺࡨࡢࡶࠍࠤࠥࠦࠠࠡࠢࠣࠤࡸ࡮ࡡࡳࡧࠣࡥࠥࡩ࡯࡮࡯ࡲࡲࠥ࡯࡮ࡪࡶ࡬ࡥࡱࠦࡳࡶࡤࡶࡸࡷ࡯࡮ࡨ࠰ࠍࠎࠥࠦࠠࠡࠢࠣࠤࠥࡀࡒࡦࡶࡸࡶࡳࡀࠠࡂࠢ࡫ࡥࡸ࡮ࠠࡰࡤ࡭ࡩࡨࡺࠠࡰࡨࠣࡸ࡭࡫ࠠࡴࡣࡰࡩࠥࡺࡹࡱࡧࠍࠤࠥࠦࠠࠡࠢࠣࠤࠧࠨࠢ࢘")
        return self._hash.copy()
    def new(self, data=None):
        l1l1111_Krypto_ (u"ࠥࠦࠧࡘࡥࡵࡷࡵࡲࠥࡧࠠࡧࡴࡨࡷ࡭ࠦࡩ࡯ࡵࡷࡥࡳࡩࡥࠡࡱࡩࠤࡹ࡮ࡥࠡࡪࡤࡷ࡭ࠦ࡯ࡣ࡬ࡨࡧࡹ࠴ࠊࠋࠢࠣࠤࠥࠦࠠࠡࠢࡘࡲࡱ࡯࡫ࡦࠢࡷ࡬ࡪࠦࡠࡤࡱࡳࡽࡥࠦ࡭ࡦࡶ࡫ࡳࡩ࠲ࠠࡵࡪࡨࠤ࡮ࡴࡴࡦࡴࡱࡥࡱࠦࡳࡵࡣࡷࡩࠥࡵࡦࠡࡶ࡫ࡩࠥࡵࡢ࡫ࡧࡦࡸࠥ࡯ࡳࠡࡧࡰࡴࡹࡿ࠮ࠋࠌࠣࠤࠥࠦࠠࠡࠢࠣ࠾ࡕࡧࡲࡢ࡯ࡨࡸࡪࡸࡳ࠻ࠌࠣࠤࠥࠦࠠࠡࠢࠣࠤࠥࡪࡡࡵࡣࠣ࠾ࠥࡨࡹࡵࡧࠣࡷࡹࡸࡩ࡯ࡩࠍࠤࠥࠦࠠࠡࠢࠣࠤࠥࠦࠠࠡࡖ࡫ࡩࠥࡴࡥࡹࡶࠣࡧ࡭ࡻ࡮࡬ࠢࡲࡪࠥࡺࡨࡦࠢࡰࡩࡸࡹࡡࡨࡧࠣࡦࡪ࡯࡮ࡨࠢ࡫ࡥࡸ࡮ࡥࡥ࠰ࠍࠎࠥࠦࠠࠡࠢࠣࠤࠥࡀࡒࡦࡶࡸࡶࡳࡀࠠࡂࠢ࡫ࡥࡸ࡮ࠠࡰࡤ࡭ࡩࡨࡺࠠࡰࡨࠣࡸ࡭࡫ࠠࡴࡣࡰࡩࠥࡺࡹࡱࡧࠍࠤࠥࠦࠠࠡࠢࠣࠤࠧࠨ࢙ࠢ")
        pass