Help on class Penn in module comodels.penn:

class PPeennnn(comodels.sir.SIR)
 |  Penn(S: int, I: int, R: int, detect_prob: float = 1, hosp_rate: float = 0.05, icu_rate: float = 0.02, vent_rate: float = 0.01, contact_reduction: float = 0.0, t_double: float = 6, beta_decay: float = 0, vent_los: float = 10, hos_los: float = 7, icu_los: float = 9, recover_time: float = 14) -> None
 |  
 |  Penn:
 |      Make SIR predictions given the assumed detection rate (out of all infected cases), using
 |      the parameter estimation method from the Penn model.
 |  ----------------------------------------------------------------------
 |  Parameters:
 |      S: pop size, Number of people affected
 |      I: infected, Number of positive tests in region
 |      R: recovered, number of recoveries
 |      detect_prob: percentage of all infected cases in region which you believe are being detected = 1
 |      hosp_rate: rate of infected admitted to the hospital = 0.05
 |      icu_rate: rate of infected who need to be in ICU = 0.02
 |      vent_rate: rate of infected who need ventilators = 0.01
 |      contact_reduction: percent contact reduced by social distancing = 0
 |      t_double: time to double number of infected = 6.
 |      beta_decay: decay rate of beta, which represents how often a contact results in a new infection = 0
 |      vent_los: time one patient takes up a ventilator=10
 |      hos_los: time one patient takes up a normal hospital bed = 7
 |      icu_los: time one patient takes up an ICU bed = 9
 |      recover_time: time to get better, to shift from I to R = 14
 |  
 |  Attributes:
 |      rates: dict = rate of hospitalization, icu, and ventilators
 |      los: dict = length of stay at hospital, icu, and ventilator
 |      contact_reduction: float = contact reduction
 |      t_double: float = number of days to double
 |      intrinsic_growth: float = growth rate
 |      recover_time: float = time to recover from illness
 |      beta: float =  how often a contact results in a new infection
 |      gamma:  float = rate at which an infected person recovers
 |      beta_decay:  float = decay rate of beta
 |      r_naught:  float = speadability of disease
 |      r_t:  float = r_naught after distancing
 |      S: int = number of susceptible people
 |      I: int = number of actually infected people
 |      R: int = number of recovered people
 |  
 |  
 |  Methods:
 |      sir(n_days):
 |          run simulation, see docstring for sir
 |  
 |  Method resolution order:
 |      Penn
 |      comodels.sir.SIR
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ____iinniitt____(self, S: int, I: int, R: int, detect_prob: float = 1, hosp_rate: float = 0.05, icu_rate: float = 0.02, vent_rate: float = 0.01, contact_reduction: float = 0.0, t_double: float = 6, beta_decay: float = 0, vent_los: float = 10, hos_los: float = 7, icu_los: float = 9, recover_time: float = 14) -> None
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ssiirr(self, n_days: int) -> (<class 'dict'>, <class 'dict'>)
 |      sir: fit SIR model to the data
 |      -----------------------------------
 |      Inputs:
 |          n_days: int = number of days ahead to predict
 |      Outputs:
 |          curve: dict :
 |              susceptible: np.ndarray = history of susceptible pop
 |              infected: np.ndarray = history of infection
 |              recovered: np.ndarray = history of recovery
 |          admissino: dict: of occupancy
 |              hospitalized
 |              icu
 |              ventilator
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from comodels.sir.SIR:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
