image: ubuntu:18.04

include:
  - template: License-Scanning.gitlab-ci.yml

variables:
  REGION: eu-central-1

before_script:
  - apt-get update
  - apt-get -y -qq install locales locales-all
  - export LANG=C.UTF-8
  - export LC_ALL=C.UTF-8
  - apt-get -y -qq install git python3.6 python3.6-dev python3-pip
  - pip3 install -U pip virtualenv
  - virtualenv env
  - source env/bin/activate
  - pip install -e . --no-cache-dir
  - pip install pytest-cov flake8 twine

stages:
  - test
  - build
  - deploy

test:
  stage: test
  script:
    - pytest test --cov py_presi --cov-report term --cov-report html
    - flake8 test py_presi
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\%)$/'
  artifacts:
    paths:
      - htmlcov/

build-py-presi:
  stage: build
  dependencies:
    - test
  script:
    - pp-build
    - mkdir presi
    - mv theme presi/
    - mv index.html presi/
  artifacts:
    paths:
      - presi/

pages:
  stage: deploy
  before_script:
    - "true"
  dependencies:
    - test
    - build-py-presi
  script:
    - |
      echo '<!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8" />
          <title>py-presi repo</title>
          <body>
            <ul>
              <li><a href="presi/index.html" target="_blank">Presentation</a></li>
              <li><a href="htmlcov/index.html" target="_blank">Coverage</a></li>
            </ul>
          </body>
       </html>' >  index.html
    - ls -lah
    - mkdir public
    - mv presi/ public/presi
    - mv htmlcov/ public/htmlcov/
    - mv index.html public/
  artifacts:
    paths:
      - public
    expire_in: 30 days

deploy-dev:
  stage: deploy
  script:
    - pip install -U setuptools wheel gitlab-release twine
    - python setup.py bdist_wheel sdist bdist_egg
    # XXX TWINE_PASSWORD and TWINE_USERNAME needs to be set
    - twine upload dist/*
    # CI_BUILD_TOKEN is out private token we should rename
    - gitlab-release --description "https://pypi.python.org/pypi/py-presi" $CI_BUILD_TOKEN dist/*.whl
  # when: manual
  only:
    - tags

deploy-docker:
  stage: deploy
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  before_script:
    - echo "Do nothing!"
  dependencies:
    - test
  only:
    - tags


