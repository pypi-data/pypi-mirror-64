Metadata-Version: 2.1
Name: urlchecker
Version: 0.0.0
Summary: tool to collect and validate urls over static files (code and documentation)
Home-page: http://www.github.com/urlstechie/urlchecker-python
Author: Ayoub Malek, Vanessa Sochat
Author-email: vsochat@stanford.edu
Maintainer: Ayoub Malek, Vanessa Sochat
Maintainer-email: vsochat@stanford.edu
License: LICENSE
Description: # urlchecker python
        
        [![License](https://img.shields.io/badge/license-MIT-brightgreen)](https://github.com/urlstechie/urlchecker-python/blob/master/LICENSE)
        
        ![docs/urlstechie.png](docs/urlstechie.png)
        
        This is a python module to collect urls over static files (code and documentation)
        and then test for and report broken links.
        
        ## Module Documentation
        
        A detailed documentation of the code is available under [urls-checker.readthedocs.io](https://urls-checker.readthedocs.io/en/latest/)
        
        ## Usage
        
        ### Install
        
        You can install the urlchecker as follows:
        
        ```bash
        pip install urlchecker
        ```
        
        or install from the repository directly:
        
        ```bash
        git clone https://github.com/urlstechie/urlchecker-python.git
        cd urlchecker-python
        python setup.py install
        ```
        
        Installation will place a binary, `urlchecker` in your Python path.
        
        ```bash
        $ which urlchecker
        /home/vanessa/anaconda3/bin/urlchecker
        ```
        
        
        ### Check Local Folder
        
        Your most likely use case will be to check a local directory with static files (documentation or code)
        for files. In this case, you can use urlchecker check:
        
        ```bash
        $ urlchecker check --help
        
        $ urlchecker check --help
        usage: urlchecker check [-h] [-b BRANCH] [--subfolder SUBFOLDER] [--cleanup]
                                [--force-pass] [--no-print] [--file-types FILE_TYPES]
                                [--white-listed-urls WHITE_LISTED_URLS]
                                [--white-listed-patterns WHITE_LISTED_PATTERNS]
                                [--white-listed-files WHITE_LISTED_FILES]
                                [--retry-count RETRY_COUNT] [--timeout TIMEOUT]
                                path
        
        positional arguments:
          path                  the local path or GitHub repository to clone and check
        
        optional arguments:
          -h, --help            show this help message and exit
          -b BRANCH, --branch BRANCH
                                if cloning, specify a branch to use (defaults to
                                master)
          --subfolder SUBFOLDER
                                relative subfolder path within path (if not specified,
                                we use root)
          --cleanup             remove root folder after checking (defaults to False,
                                no cleaup)
          --force-pass          force successful pass (return code 0) regardless of
                                result
          --no-print            Skip printing results to the screen (defaults to
                                printing to console).
          --file-types FILE_TYPES
                                comma separated list of file extensions to check
                                (defaults to .md,.py)
          --white-listed-urls WHITE_LISTED_URLS
                                comma separated list of white listed urls (no spaces)
          --white-listed-patterns WHITE_LISTED_PATTERNS
                                comma separated list of white listed patterns for urls
                                (no spaces)
          --white-listed-files WHITE_LISTED_FILES
                                comma separated list of white listed files and
                                patterns for files (no spaces)
          --retry-count RETRY_COUNT
                                retry count upon failure (defaults to 2, one retry).
          --timeout TIMEOUT     timeout (seconds) to provide to the requests library
                                (defaults to 5)
        ```
        
        You have a lot of flexibility to define patterns of urls or files to skip,
        along with the number of retries or timeout (seconds). The most basic usage will
        check an entire directory. Let's clone and check the directory of one of the
        maintainers:
        
        ```bash
        git clone https://github.com/SuperKogito/SuperKogito.github.io.git
        cd SuperKogito.github.io
        urlchecker check .
        ```
        
        
        ## Development
        
        ### Organization
        
        The module is organized as follows:
        
        ```
        ├── client              # command line client
        ├── main                # functions for supported integrations (e.g., GitHub)
        ├── core                # core file and url processing tools
        └── version.py          # package and versioning
        ```
        
        In the "client" folder, for example, the commands that are exposed for the client 
        (e.g., check) would named accordingly, e.g., `client/check.py`.
        Functions for Github are be provided in `main/github.py`. This organization should
        be fairly straight forward to always find what you are looking for.
        
Keywords: urls,static checking,checking,validation
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development
Classifier: Topic :: Scientific/Engineering
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python :: 3.7
Description-Content-Type: text/markdown
