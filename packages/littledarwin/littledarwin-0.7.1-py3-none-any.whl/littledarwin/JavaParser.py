from custom_antlr4 import *
from custom_antlr4.error.Errors import FailedPredicateException

from .JavaListener import JavaListener


class JavaParser(Parser):
    """

    """
    grammarFileName = "java-escape"

    def atnData():
        """

        :return:
        :rtype:
        """
        return u'\x03\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\x03m\u0536\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\x08\t\x08\x04\t\t\t\x04\n\t\n\x04\x0b\t\x0b\x04\x0c\t\x0c\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x04\x1d\t\x1d\x04\x1e\t\x1e\x04\x1f\t\x1f\x04 \t \x04!\t!\x04"\t"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04i\ti\x04j\tj\x03\x02\x05\x02\xd6\n\x02\x03\x02\x07\x02\xd9\n\x02\x0c\x02\x0e\x02\xdc\x0b\x02\x03\x02\x07\x02\xdf\n\x02\x0c\x02\x0e\x02\xe2\x0b\x02\x03\x02\x03\x02\x03\x03\x07\x03\xe7\n\x03\x0c\x03\x0e\x03\xea\x0b\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x05\x04\xf2\n\x04\x03\x04\x03\x04\x03\x04\x05\x04\xf7\n\x04\x03\x04\x03\x04\x03\x05\x07\x05\xfc\n\x05\x0c\x05\x0e\x05\xff\x0b\x05\x03\x05\x03\x05\x07\x05\u0103\n\x05\x0c\x05\x0e\x05\u0106\x0b\x05\x03\x05\x03\x05\x07\x05\u010a\n\x05\x0c\x05\x0e\x05\u010d\x0b\x05\x03\x05\x03\x05\x07\x05\u0111\n\x05\x0c\x05\x0e\x05\u0114\x0b\x05\x03\x05\x03\x05\x05\x05\u0118\n\x05\x03\x06\x03\x06\x05\x06\u011c\n\x06\x03\x07\x03\x07\x05\x07\u0120\n\x07\x03\x08\x03\x08\x05\x08\u0124\n\x08\x03\t\x03\t\x03\t\x05\t\u0129\n\t\x03\t\x03\t\x05\t\u012d\n\t\x03\t\x03\t\x05\t\u0131\n\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\n\u0139\n\n\x0c\n\x0e\n\u013c\x0b\n\x03\n\x03\n\x03\x0b\x03\x0b\x03\x0b\x05\x0b\u0143\n\x0b\x03\x0c\x03\x0c\x03\x0c\x07\x0c\u0148\n\x0c\x0c\x0c\x0e\x0c\u014b\x0b\x0c\x03\r\x03\r\x03\r\x03\r\x05\r\u0151\n\r\x03\r\x03\r\x05\r\u0155\n\r\x03\r\x05\r\u0158\n\r\x03\r\x05\r\u015b\n\r\x03\r\x03\r\x03\x0e\x03\x0e\x03\x0e\x07\x0e\u0162\n\x0e\x0c\x0e\x0e\x0e\u0165\x0b\x0e\x03\x0f\x07\x0f\u0168\n\x0f\x0c\x0f\x0e\x0f\u016b\x0b\x0f\x03\x0f\x03\x0f\x05\x0f\u016f\n\x0f\x03\x0f\x05\x0f\u0172\n\x0f\x03\x10\x03\x10\x07\x10\u0176\n\x10\x0c\x10\x0e\x10\u0179\x0b\x10\x03\x11\x03\x11\x03\x11\x05\x11\u017e\n\x11\x03\x11\x03\x11\x05\x11\u0182\n\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x07\x12\u0189\n\x12\x0c\x12\x0e\x12\u018c\x0b\x12\x03\x13\x03\x13\x07\x13\u0190\n\x13\x0c\x13\x0e\x13\u0193\x0b\x13\x03\x13\x03\x13\x03\x14\x03\x14\x07\x14\u0199\n\x14\x0c\x14\x0e\x14\u019c\x0b\x14\x03\x14\x03\x14\x03\x15\x03\x15\x05\x15\u01a2\n\x15\x03\x15\x03\x15\x07\x15\u01a6\n\x15\x0c\x15\x0e\x15\u01a9\x0b\x15\x03\x15\x05\x15\u01ac\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u01b7\n\x16\x03\x17\x03\x17\x05\x17\u01bb\n\x17\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\u01c1\n\x17\x0c\x17\x0e\x17\u01c4\x0b\x17\x03\x17\x03\x17\x05\x17\u01c8\n\x17\x03\x17\x03\x17\x05\x17\u01cc\n\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\u01d5\n\x19\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1b\x03\x1b\x03\x1c\x07\x1c\u01e1\n\x1c\x0c\x1c\x0e\x1c\u01e4\x0b\x1c\x03\x1c\x03\x1c\x05\x1c\u01e8\n\x1c\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x05\x1d\u01f1\n\x1d\x03\x1e\x03\x1e\x03\x1e\x03\x1e\x07\x1e\u01f7\n\x1e\x0c\x1e\x0e\x1e\u01fa\x0b\x1e\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x1f\x07\x1f\u0201\n\x1f\x0c\x1f\x0e\x1f\u0204\x0b\x1f\x03\x1f\x03\x1f\x03\x1f\x03 \x03 \x05 \u020b\n \x03 \x03 \x03 \x03 \x07 \u0211\n \x0c \x0e \u0214\x0b \x03 \x03 \x05 \u0218\n \x03 \x03 \x03 \x03 \x05 \u021e\n \x03!\x03!\x03!\x03"\x03"\x03"\x07"\u0226\n"\x0c"\x0e"\u0229\x0b"\x03#\x03#\x03#\x05#\u022e\n#\x03$\x03$\x03$\x07$\u0233\n$\x0c$\x0e$\u0236\x0b$\x03%\x03%\x05%\u023a\n%\x03&\x03&\x03&\x03&\x07&\u0240\n&\x0c&\x0e&\u0243\x0b&\x03&\x05&\u0246\n&\x05&\u0248\n&\x03&\x03&\x03\'\x03\'\x03(\x03(\x03(\x07(\u0251\n(\x0c(\x0e(\u0254\x0b(\x03(\x03(\x03(\x07(\u0259\n(\x0c(\x0e(\u025c\x0b(\x05(\u025e\n(\x03)\x03)\x05)\u0262\n)\x03)\x03)\x03)\x05)\u0267\n)\x07)\u0269\n)\x0c)\x0e)\u026c\x0b)\x03*\x03*\x03+\x03+\x03+\x03+\x07+\u0274\n+\x0c+\x0e+\u0277\x0b+\x03+\x03+\x03,\x03,\x03,\x03,\x05,\u027f\n,\x05,\u0281\n,\x03-\x03-\x03-\x07-\u0286\n-\x0c-\x0e-\u0289\x0b-\x03.\x03.\x05.\u028d\n.\x03.\x03.\x03/\x03/\x03/\x07/\u0294\n/\x0c/\x0e/\u0297\x0b/\x03/\x03/\x05/\u029b\n/\x03/\x05/\u029e\n/\x030\x070\u02a1\n0\x0c0\x0e0\u02a4\x0b0\x030\x030\x030\x031\x071\u02aa\n1\x0c1\x0e1\u02ad\x0b1\x031\x031\x031\x031\x032\x032\x033\x033\x034\x034\x034\x074\u02ba\n4\x0c4\x0e4\u02bd\x0b4\x035\x035\x036\x036\x036\x036\x036\x056\u02c6\n6\x036\x056\u02c9\n6\x037\x037\x038\x038\x038\x078\u02d0\n8\x0c8\x0e8\u02d3\x0b8\x039\x039\x039\x039\x03:\x03:\x03:\x05:\u02dc\n:\x03;\x03;\x03;\x03;\x07;\u02e2\n;\x0c;\x0e;\u02e5\x0b;\x05;\u02e7\n;\x03;\x05;\u02ea\n;\x03;\x03;\x03<\x03<\x03<\x03<\x03<\x03=\x03=\x07=\u02f5\n=\x0c=\x0e=\u02f8\x0b=\x03=\x03=\x03>\x07>\u02fd\n>\x0c>\x0e>\u0300\x0b>\x03>\x03>\x05>\u0304\n>\x03?\x03?\x03?\x03?\x03?\x03?\x05?\u030c\n?\x03?\x03?\x05?\u0310\n?\x03?\x03?\x05?\u0314\n?\x03?\x03?\x05?\u0318\n?\x05?\u031a\n?\x03@\x03@\x05@\u031e\n@\x03A\x03A\x03A\x03A\x05A\u0324\nA\x03B\x03B\x03C\x03C\x03C\x03D\x03D\x07D\u032d\nD\x0cD\x0eD\u0330\x0bD\x03D\x03D\x03E\x03E\x03E\x05E\u0337\nE\x03F\x03F\x03F\x03G\x07G\u033d\nG\x0cG\x0eG\u0340\x0bG\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x05H\u034a\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u0353\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x06H\u0368\nH\rH\x0eH\u0369\x03H\x05H\u036d\nH\x03H\x05H\u0370\nH\x03H\x03H\x03H\x03H\x07H\u0376\nH\x0cH\x0eH\u0379\x0bH\x03H\x05H\u037c\nH\x03H\x03H\x03H\x03H\x07H\u0382\nH\x0cH\x0eH\u0385\x0bH\x03H\x07H\u0388\nH\x0cH\x0eH\u038b\x0bH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u0395\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u039e\nH\x03H\x03H\x03H\x05H\u03a3\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u03ad\nH\x03I\x03I\x03I\x07I\u03b2\nI\x0cI\x0eI\u03b5\x0bI\x03I\x03I\x03I\x03I\x03I\x03J\x03J\x03J\x07J\u03bf\nJ\x0cJ\x0eJ\u03c2\x0bJ\x03K\x03K\x03K\x03L\x03L\x03L\x05L\u03ca\nL\x03L\x03L\x03M\x03M\x03M\x07M\u03d1\nM\x0cM\x0eM\u03d4\x0bM\x03N\x07N\u03d7\nN\x0cN\x0eN\u03da\x0bN\x03N\x03N\x03N\x03N\x03N\x03O\x06O\u03e2\nO\rO\x0eO\u03e3\x03O\x06O\u03e7\nO\rO\x0eO\u03e8\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u03f5\nP\x03Q\x03Q\x05Q\u03f9\nQ\x03Q\x03Q\x05Q\u03fd\nQ\x03Q\x03Q\x05Q\u0401\nQ\x05Q\u0403\nQ\x03R\x03R\x05R\u0407\nR\x03S\x07S\u040a\nS\x0cS\x0eS\u040d\x0bS\x03S\x03S\x03S\x03S\x03S\x03T\x03T\x03U\x03U\x03U\x03U\x03V\x03V\x03V\x07V\u041d\nV\x0cV\x0eV\u0420\x0bV\x03W\x03W\x03X\x03X\x03Y\x03Y\x03Y\x03Y\x03Z\x03Z\x03Z\x05Z\u042d\nZ\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z\u0434\nZ\x03[\x03[\x03[\x07[\u0439\n[\x0c[\x0e[\u043c\x0b[\x03\\\x03\\\x05\\\u0440\n\\\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u0450\n]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u0460\n]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u048b\n]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u049d\n]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u04a8\n]\x03]\x03]\x03]\x03]\x05]\u04ae\n]\x03]\x07]\u04b1\n]\x0c]\x0e]\u04b4\x0b]\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x05^\u04c9\n^\x05^\u04cb\n^\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x05_\u04d4\n_\x05_\u04d6\n_\x03`\x03`\x05`\u04da\n`\x03`\x03`\x03`\x05`\u04df\n`\x07`\u04e1\n`\x0c`\x0e`\u04e4\x0b`\x03`\x05`\u04e7\n`\x03a\x03a\x05a\u04eb\na\x03a\x03a\x03b\x03b\x03b\x03b\x07b\u04f3\nb\x0cb\x0eb\u04f6\x0bb\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x07b\u04ff\nb\x0cb\x0eb\u0502\x0bb\x03b\x03b\x07b\u0506\nb\x0cb\x0eb\u0509\x0bb\x05b\u050b\nb\x03c\x03c\x05c\u050f\nc\x03d\x03d\x03d\x03e\x03e\x03e\x03e\x03f\x03f\x03f\x05f\u051b\nf\x03g\x03g\x03g\x05g\u0520\ng\x03h\x03h\x03h\x03h\x05h\u0526\nh\x05h\u0528\nh\x03i\x03i\x03i\x03i\x05i\u052e\ni\x03j\x03j\x05j\u0532\nj\x03j\x03j\x03j\x02\x03\xb8k\x02\x04\x06\x08\n\x0c\x0e\x10\x12\x14\x16\x18\x1a\x1c\x1e "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80\x82\x84\x86\x88\x8a\x8c\x8e\x90\x92\x94\x96\x98\x9a\x9c\x9e\xa0\xa2\xa4\xa6\xa8\xaa\xac\xae\xb0\xb2\xb4\xb6\xb8\xba\xbc\xbe\xc0\xc2\xc4\xc6\xc8\xca\xcc\xce\xd0\xd2\x02\x10\x06\x02""..2255\x06\x02\x05\x05\x16\x16%\'*+\x04\x02\x10\x10**\n\x02\x07\x07\t\t\x0c\x0c\x12\x12\x18\x18\x1f\x1f!!))\x04\x02\x15\x15,,\x03\x027<\x03\x02SV\x03\x02IJ\x04\x02WX\\\\\x03\x02UV\x04\x02GHNO\x04\x02MMPP\x04\x02FF]g\x03\x02ST\u05af\x02\xd5\x03\x02\x02\x02\x04\xe8\x03\x02\x02\x02\x06\xef\x03\x02\x02\x02\x08\u0117\x03\x02\x02\x02\n\u011b\x03\x02\x02\x02\x0c\u011f\x03\x02\x02\x02\x0e\u0123\x03\x02\x02\x02\x10\u0125\x03\x02\x02\x02\x12\u0134\x03\x02\x02\x02\x14\u013f\x03\x02\x02\x02\x16\u0144\x03\x02\x02\x02\x18\u014c\x03\x02\x02\x02\x1a\u015e\x03\x02\x02\x02\x1c\u0169\x03\x02\x02\x02\x1e\u0173\x03\x02\x02\x02 \u017a\x03\x02\x02\x02"\u0185\x03\x02\x02\x02$\u018d\x03\x02\x02\x02&\u0196\x03\x02\x02\x02(\u01ab\x03\x02\x02\x02*\u01b6\x03\x02\x02\x02,\u01ba\x03\x02\x02\x02.\u01cd\x03\x02\x02\x020\u01d0\x03\x02\x02\x022\u01d8\x03\x02\x02\x024\u01db\x03\x02\x02\x026\u01e7\x03\x02\x02\x028\u01f0\x03\x02\x02\x02:\u01f2\x03\x02\x02\x02<\u01fd\x03\x02\x02\x02>\u021d\x03\x02\x02\x02@\u021f\x03\x02\x02\x02B\u0222\x03\x02\x02\x02D\u022a\x03\x02\x02\x02F\u022f\x03\x02\x02\x02H\u0239\x03\x02\x02\x02J\u023b\x03\x02\x02\x02L\u024b\x03\x02\x02\x02N\u025d\x03\x02\x02\x02P\u025f\x03\x02\x02\x02R\u026d\x03\x02\x02\x02T\u026f\x03\x02\x02\x02V\u0280\x03\x02\x02\x02X\u0282\x03\x02\x02\x02Z\u028a\x03\x02\x02\x02\\\u029d\x03\x02\x02\x02^\u02a2\x03\x02\x02\x02`\u02ab\x03\x02\x02\x02b\u02b2\x03\x02\x02\x02d\u02b4\x03\x02\x02\x02f\u02b6\x03\x02\x02\x02h\u02be\x03\x02\x02\x02j\u02c0\x03\x02\x02\x02l\u02ca\x03\x02\x02\x02n\u02cc\x03\x02\x02\x02p\u02d4\x03\x02\x02\x02r\u02db\x03\x02\x02\x02t\u02dd\x03\x02\x02\x02v\u02ed\x03\x02\x02\x02x\u02f2\x03\x02\x02\x02z\u0303\x03\x02\x02\x02|\u0319\x03\x02\x02\x02~\u031d\x03\x02\x02\x02\x80\u031f\x03\x02\x02\x02\x82\u0325\x03\x02\x02\x02\x84\u0327\x03\x02\x02\x02\x86\u032a\x03\x02\x02\x02\x88\u0336\x03\x02\x02\x02\x8a\u0338\x03\x02\x02\x02\x8c\u033e\x03\x02\x02\x02\x8e\u03ac\x03\x02\x02\x02\x90\u03ae\x03\x02\x02\x02\x92\u03bb\x03\x02\x02\x02\x94\u03c3\x03\x02\x02\x02\x96\u03c6\x03\x02\x02\x02\x98\u03cd\x03\x02\x02\x02\x9a\u03d8\x03\x02\x02\x02\x9c\u03e1\x03\x02\x02\x02\x9e\u03f4\x03\x02\x02\x02\xa0\u0402\x03\x02\x02\x02\xa2\u0406\x03\x02\x02\x02\xa4\u040b\x03\x02\x02\x02\xa6\u0413\x03\x02\x02\x02\xa8\u0415\x03\x02\x02\x02\xaa\u0419\x03\x02\x02\x02\xac\u0421\x03\x02\x02\x02\xae\u0423\x03\x02\x02\x02\xb0\u0425\x03\x02\x02\x02\xb2\u0433\x03\x02\x02\x02\xb4\u0435\x03\x02\x02\x02\xb6\u043f\x03\x02\x02\x02\xb8\u044f\x03\x02\x02\x02\xba\u04ca\x03\x02\x02\x02\xbc\u04d5\x03\x02\x02\x02\xbe\u04e6\x03\x02\x02\x02\xc0\u04e8\x03\x02\x02\x02\xc2\u04ee\x03\x02\x02\x02\xc4\u050c\x03\x02\x02\x02\xc6\u0510\x03\x02\x02\x02\xc8\u0513\x03\x02\x02\x02\xca\u051a\x03\x02\x02\x02\xcc\u051f\x03\x02\x02\x02\xce\u0527\x03\x02\x02\x02\xd0\u052d\x03\x02\x02\x02\xd2\u052f\x03\x02\x02\x02\xd4\xd6\x05\x04\x03\x02\xd5\xd4\x03\x02\x02\x02\xd5\xd6\x03\x02\x02\x02\xd6\xda\x03\x02\x02\x02\xd7\xd9\x05\x06\x04\x02\xd8\xd7\x03\x02\x02\x02\xd9\xdc\x03\x02\x02\x02\xda\xd8\x03\x02\x02\x02\xda\xdb\x03\x02\x02\x02\xdb\xe0\x03\x02\x02\x02\xdc\xda\x03\x02\x02\x02\xdd\xdf\x05\x08\x05\x02\xde\xdd\x03\x02\x02\x02\xdf\xe2\x03\x02\x02\x02\xe0\xde\x03\x02\x02\x02\xe0\xe1\x03\x02\x02\x02\xe1\xe3\x03\x02\x02\x02\xe2\xe0\x03\x02\x02\x02\xe3\xe4\x07\x02\x02\x03\xe4\x03\x03\x02\x02\x02\xe5\xe7\x05j6\x02\xe6\xe5\x03\x02\x02\x02\xe7\xea\x03\x02\x02\x02\xe8\xe6\x03\x02\x02\x02\xe8\xe9\x03\x02\x02\x02\xe9\xeb\x03\x02\x02\x02\xea\xe8\x03\x02\x02\x02\xeb\xec\x07$\x02\x02\xec\xed\x05f4\x02\xed\xee\x07C\x02\x02\xee\x05\x03\x02\x02\x02\xef\xf1\x07\x1d\x02\x02\xf0\xf2\x07*\x02\x02\xf1\xf0\x03\x02\x02\x02\xf1\xf2\x03\x02\x02\x02\xf2\xf3\x03\x02\x02\x02\xf3\xf6\x05f4\x02\xf4\xf5\x07E\x02\x02\xf5\xf7\x07W\x02\x02\xf6\xf4\x03\x02\x02\x02\xf6\xf7\x03\x02\x02\x02\xf7\xf8\x03\x02\x02\x02\xf8\xf9\x07C\x02\x02\xf9\x07\x03\x02\x02\x02\xfa\xfc\x05\x0c\x07\x02\xfb\xfa\x03\x02\x02\x02\xfc\xff\x03\x02\x02\x02\xfd\xfb\x03\x02\x02\x02\xfd\xfe\x03\x02\x02\x02\xfe\u0100\x03\x02\x02\x02\xff\xfd\x03\x02\x02\x02\u0100\u0118\x05\x10\t\x02\u0101\u0103\x05\x0c\x07\x02\u0102\u0101\x03\x02\x02\x02\u0103\u0106\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02\u0104\u0105\x03\x02\x02\x02\u0105\u0107\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0107\u0118\x05\x18\r\x02\u0108\u010a\x05\x0c\x07\x02\u0109\u0108\x03\x02\x02\x02\u010a\u010d\x03\x02\x02\x02\u010b\u0109\x03\x02\x02\x02\u010b\u010c\x03\x02\x02\x02\u010c\u010e\x03\x02\x02\x02\u010d\u010b\x03\x02\x02\x02\u010e\u0118\x05 \x11\x02\u010f\u0111\x05\x0c\x07\x02\u0110\u010f\x03\x02\x02\x02\u0111\u0114\x03\x02\x02\x02\u0112\u0110\x03\x02\x02\x02\u0112\u0113\x03\x02\x02\x02\u0113\u0115\x03\x02\x02\x02\u0114\u0112\x03\x02\x02\x02\u0115\u0118\x05v<\x02\u0116\u0118\x07C\x02\x02\u0117\xfd\x03\x02\x02\x02\u0117\u0104\x03\x02\x02\x02\u0117\u010b\x03\x02\x02\x02\u0117\u0112\x03\x02\x02\x02\u0117\u0116\x03\x02\x02\x02\u0118\t\x03\x02\x02\x02\u0119\u011c\x05\x0c\x07\x02\u011a\u011c\t\x02\x02\x02\u011b\u0119\x03\x02\x02\x02\u011b\u011a\x03\x02\x02\x02\u011c\x0b\x03\x02\x02\x02\u011d\u0120\x05j6\x02\u011e\u0120\t\x03\x02\x02\u011f\u011d\x03\x02\x02\x02\u011f\u011e\x03\x02\x02\x02\u0120\r\x03\x02\x02\x02\u0121\u0124\x07\x16\x02\x02\u0122\u0124\x05j6\x02\u0123\u0121\x03\x02\x02\x02\u0123\u0122\x03\x02\x02\x02\u0124\x0f\x03\x02\x02\x02\u0125\u0126\x07\r\x02\x02\u0126\u0128\x07h\x02\x02\u0127\u0129\x05\x12\n\x02\u0128\u0127\x03\x02\x02\x02\u0128\u0129\x03\x02\x02\x02\u0129\u012c\x03\x02\x02\x02\u012a\u012b\x07\x15\x02\x02\u012b\u012d\x05N(\x02\u012c\u012a\x03\x02\x02\x02\u012c\u012d\x03\x02\x02\x02\u012d\u0130\x03\x02\x02\x02\u012e\u012f\x07\x1c\x02\x02\u012f\u0131\x05"\x12\x02\u0130\u012e\x03\x02\x02\x02\u0130\u0131\x03\x02\x02\x02\u0131\u0132\x03\x02\x02\x02\u0132\u0133\x05$\x13\x02\u0133\x11\x03\x02\x02\x02\u0134\u0135\x07H\x02\x02\u0135\u013a\x05\x14\x0b\x02\u0136\u0137\x07D\x02\x02\u0137\u0139\x05\x14\x0b\x02\u0138\u0136\x03\x02\x02\x02\u0139\u013c\x03\x02\x02\x02\u013a\u0138\x03\x02\x02\x02\u013a\u013b\x03\x02\x02\x02\u013b\u013d\x03\x02\x02\x02\u013c\u013a\x03\x02\x02\x02\u013d\u013e\x07G\x02\x02\u013e\x13\x03\x02\x02\x02\u013f\u0142\x07h\x02\x02\u0140\u0141\x07\x15\x02\x02\u0141\u0143\x05\x16\x0c\x02\u0142\u0140\x03\x02\x02\x02\u0142\u0143\x03\x02\x02\x02\u0143\x15\x03\x02\x02\x02\u0144\u0149\x05N(\x02\u0145\u0146\x07Y\x02\x02\u0146\u0148\x05N(\x02\u0147\u0145\x03\x02\x02\x02\u0148\u014b\x03\x02\x02\x02\u0149\u0147\x03\x02\x02\x02\u0149\u014a\x03\x02\x02\x02\u014a\x17\x03\x02\x02\x02\u014b\u0149\x03\x02\x02\x02\u014c\u014d\x07\x14\x02\x02\u014d\u0150\x07h\x02\x02\u014e\u014f\x07\x1c\x02\x02\u014f\u0151\x05"\x12\x02\u0150\u014e\x03\x02\x02\x02\u0150\u0151\x03\x02\x02\x02\u0151\u0152\x03\x02\x02\x02\u0152\u0154\x07?\x02\x02\u0153\u0155\x05\x1a\x0e\x02\u0154\u0153\x03\x02\x02\x02\u0154\u0155\x03\x02\x02\x02\u0155\u0157\x03\x02\x02\x02\u0156\u0158\x07D\x02\x02\u0157\u0156\x03\x02\x02\x02\u0157\u0158\x03\x02\x02\x02\u0158\u015a\x03\x02\x02\x02\u0159\u015b\x05\x1e\x10\x02\u015a\u0159\x03\x02\x02\x02\u015a\u015b\x03\x02\x02\x02\u015b\u015c\x03\x02\x02\x02\u015c\u015d\x07@\x02\x02\u015d\x19\x03\x02\x02\x02\u015e\u0163\x05\x1c\x0f\x02\u015f\u0160\x07D\x02\x02\u0160\u0162\x05\x1c\x0f\x02\u0161\u015f\x03\x02\x02\x02\u0162\u0165\x03\x02\x02\x02\u0163\u0161\x03\x02\x02\x02\u0163\u0164\x03\x02\x02\x02\u0164\x1b\x03\x02\x02\x02\u0165\u0163\x03\x02\x02\x02\u0166\u0168\x05j6\x02\u0167\u0166\x03\x02\x02\x02\u0168\u016b\x03\x02\x02\x02\u0169\u0167\x03\x02\x02\x02\u0169\u016a\x03\x02\x02\x02\u016a\u016c\x03\x02\x02\x02\u016b\u0169\x03\x02\x02\x02\u016c\u016e\x07h\x02\x02\u016d\u016f\x05\xd2j\x02\u016e\u016d\x03\x02\x02\x02\u016e\u016f\x03\x02\x02\x02\u016f\u0171\x03\x02\x02\x02\u0170\u0172\x05$\x13\x02\u0171\u0170\x03\x02\x02\x02\u0171\u0172\x03\x02\x02\x02\u0172\x1d\x03\x02\x02\x02\u0173\u0177\x07C\x02\x02\u0174\u0176\x05(\x15\x02\u0175\u0174\x03\x02\x02\x02\u0176\u0179\x03\x02\x02\x02\u0177\u0175\x03\x02\x02\x02\u0177\u0178\x03\x02\x02\x02\u0178\x1f\x03\x02\x02\x02\u0179\u0177\x03\x02\x02\x02\u017a\u017b\x07 \x02\x02\u017b\u017d\x07h\x02\x02\u017c\u017e\x05\x12\n\x02\u017d\u017c\x03\x02\x02\x02\u017d\u017e\x03\x02\x02\x02\u017e\u0181\x03\x02\x02\x02\u017f\u0180\x07\x15\x02\x02\u0180\u0182\x05"\x12\x02\u0181\u017f\x03\x02\x02\x02\u0181\u0182\x03\x02\x02\x02\u0182\u0183\x03\x02\x02\x02\u0183\u0184\x05&\x14\x02\u0184!\x03\x02\x02\x02\u0185\u018a\x05N(\x02\u0186\u0187\x07D\x02\x02\u0187\u0189\x05N(\x02\u0188\u0186\x03\x02\x02\x02\u0189\u018c\x03\x02\x02\x02\u018a\u0188\x03\x02\x02\x02\u018a\u018b\x03\x02\x02\x02\u018b#\x03\x02\x02\x02\u018c\u018a\x03\x02\x02\x02\u018d\u0191\x07?\x02\x02\u018e\u0190\x05(\x15\x02\u018f\u018e\x03\x02\x02\x02\u0190\u0193\x03\x02\x02\x02\u0191\u018f\x03\x02\x02\x02\u0191\u0192\x03\x02\x02\x02\u0192\u0194\x03\x02\x02\x02\u0193\u0191\x03\x02\x02\x02\u0194\u0195\x07@\x02\x02\u0195%\x03\x02\x02\x02\u0196\u019a\x07?\x02\x02\u0197\u0199\x056\x1c\x02\u0198\u0197\x03\x02\x02\x02\u0199\u019c\x03\x02\x02\x02\u019a\u0198\x03\x02\x02\x02\u019a\u019b\x03\x02\x02\x02\u019b\u019d\x03\x02\x02\x02\u019c\u019a\x03\x02\x02\x02\u019d\u019e\x07@\x02\x02\u019e\'\x03\x02\x02\x02\u019f\u01ac\x07C\x02\x02\u01a0\u01a2\x07*\x02\x02\u01a1\u01a0\x03\x02\x02\x02\u01a1\u01a2\x03\x02\x02\x02\u01a2\u01a3\x03\x02\x02\x02\u01a3\u01ac\x05\x86D\x02\u01a4\u01a6\x05\n\x06\x02\u01a5\u01a4\x03\x02\x02\x02\u01a6\u01a9\x03\x02\x02\x02\u01a7\u01a5\x03\x02\x02\x02\u01a7\u01a8\x03\x02\x02\x02\u01a8\u01aa\x03\x02\x02\x02\u01a9\u01a7\x03\x02\x02\x02\u01aa\u01ac\x05*\x16\x02\u01ab\u019f\x03\x02\x02\x02\u01ab\u01a1\x03\x02\x02\x02\u01ab\u01a7\x03\x02\x02\x02\u01ac)\x03\x02\x02\x02\u01ad\u01b7\x05,\x17\x02\u01ae\u01b7\x05.\x18\x02\u01af\u01b7\x054\x1b\x02\u01b0\u01b7\x050\x19\x02\u01b1\u01b7\x052\x1a\x02\u01b2\u01b7\x05 \x11\x02\u01b3\u01b7\x05v<\x02\u01b4\u01b7\x05\x10\t\x02\u01b5\u01b7\x05\x18\r\x02\u01b6\u01ad\x03\x02\x02\x02\u01b6\u01ae\x03\x02\x02\x02\u01b6\u01af\x03\x02\x02\x02\u01b6\u01b0\x03\x02\x02\x02\u01b6\u01b1\x03\x02\x02\x02\u01b6\u01b2\x03\x02\x02\x02\u01b6\u01b3\x03\x02\x02\x02\u01b6\u01b4\x03\x02\x02\x02\u01b6\u01b5\x03\x02\x02\x02\u01b7+\x03\x02\x02\x02\u01b8\u01bb\x05N(\x02\u01b9\u01bb\x074\x02\x02\u01ba\u01b8\x03\x02\x02\x02\u01ba\u01b9\x03\x02\x02\x02\u01bb\u01bc\x03\x02\x02\x02\u01bc\u01bd\x07h\x02\x02\u01bd\u01c2\x05Z.\x02\u01be\u01bf\x07A\x02\x02\u01bf\u01c1\x07B\x02\x02\u01c0\u01be\x03\x02\x02\x02\u01c1\u01c4\x03\x02\x02\x02\u01c2\u01c0\x03\x02\x02\x02\u01c2\u01c3\x03\x02\x02\x02\u01c3\u01c7\x03\x02\x02\x02\u01c4\u01c2\x03\x02\x02\x02\u01c5\u01c6\x071\x02\x02\u01c6\u01c8\x05X-\x02\u01c7\u01c5\x03\x02\x02\x02\u01c7\u01c8\x03\x02\x02\x02\u01c8\u01cb\x03\x02\x02\x02\u01c9\u01cc\x05b2\x02\u01ca\u01cc\x07C\x02\x02\u01cb\u01c9\x03\x02\x02\x02\u01cb\u01ca\x03\x02\x02\x02\u01cc-\x03\x02\x02\x02\u01cd\u01ce\x05\x12\n\x02\u01ce\u01cf\x05,\x17\x02\u01cf/\x03\x02\x02\x02\u01d0\u01d1\x07h\x02\x02\u01d1\u01d4\x05Z.\x02\u01d2\u01d3\x071\x02\x02\u01d3\u01d5\x05X-\x02\u01d4\u01d2\x03\x02\x02\x02\u01d4\u01d5\x03\x02\x02\x02\u01d5\u01d6\x03\x02\x02\x02\u01d6\u01d7\x05d3\x02\u01d71\x03\x02\x02\x02\u01d8\u01d9\x05\x12\n\x02\u01d9\u01da\x050\x19\x02\u01da3\x03\x02\x02\x02\u01db\u01dc\x05N(\x02\u01dc\u01dd\x05B"\x02\u01dd\u01de\x07C\x02\x02\u01de5\x03\x02\x02\x02\u01df\u01e1\x05\n\x06\x02\u01e0\u01df\x03\x02\x02\x02\u01e1\u01e4\x03\x02\x02\x02\u01e2\u01e0\x03\x02\x02\x02\u01e2\u01e3\x03\x02\x02\x02\u01e3\u01e5\x03\x02\x02\x02\u01e4\u01e2\x03\x02\x02\x02\u01e5\u01e8\x058\x1d\x02\u01e6\u01e8\x07C\x02\x02\u01e7\u01e2\x03\x02\x02\x02\u01e7\u01e6\x03\x02\x02\x02\u01e87\x03\x02\x02\x02\u01e9\u01f1\x05:\x1e\x02\u01ea\u01f1\x05> \x02\u01eb\u01f1\x05@!\x02\u01ec\u01f1\x05 \x11\x02\u01ed\u01f1\x05v<\x02\u01ee\u01f1\x05\x10\t\x02\u01ef\u01f1\x05\x18\r\x02\u01f0\u01e9\x03\x02\x02\x02\u01f0\u01ea\x03\x02\x02\x02\u01f0\u01eb\x03\x02\x02\x02\u01f0\u01ec\x03\x02\x02\x02\u01f0\u01ed\x03\x02\x02\x02\u01f0\u01ee\x03\x02\x02\x02\u01f0\u01ef\x03\x02\x02\x02\u01f19\x03\x02\x02\x02\u01f2\u01f3\x05N(\x02\u01f3\u01f8\x05<\x1f\x02\u01f4\u01f5\x07D\x02\x02\u01f5\u01f7\x05<\x1f\x02\u01f6\u01f4\x03\x02\x02\x02\u01f7\u01fa\x03\x02\x02\x02\u01f8\u01f6\x03\x02\x02\x02\u01f8\u01f9\x03\x02\x02\x02\u01f9\u01fb\x03\x02\x02\x02\u01fa\u01f8\x03\x02\x02\x02\u01fb\u01fc\x07C\x02\x02\u01fc;\x03\x02\x02\x02\u01fd\u0202\x07h\x02\x02\u01fe\u01ff\x07A\x02\x02\u01ff\u0201\x07B\x02\x02\u0200\u01fe\x03\x02\x02\x02\u0201\u0204\x03\x02\x02\x02\u0202\u0200\x03\x02\x02\x02\u0202\u0203\x03\x02\x02\x02\u0203\u0205\x03\x02\x02\x02\u0204\u0202\x03\x02\x02\x02\u0205\u0206\x07F\x02\x02\u0206\u0207\x05H%\x02\u0207=\x03\x02\x02\x02\u0208\u020b\x05N(\x02\u0209\u020b\x074\x02\x02\u020a\u0208\x03\x02\x02\x02\u020a\u0209\x03\x02\x02\x02\u020b\u020c\x03\x02\x02\x02\u020c\u020d\x07h\x02\x02\u020d\u0212\x05Z.\x02\u020e\u020f\x07A\x02\x02\u020f\u0211\x07B\x02\x02\u0210\u020e\x03\x02\x02\x02\u0211\u0214\x03\x02\x02\x02\u0212\u0210\x03\x02\x02\x02\u0212\u0213\x03\x02\x02\x02\u0213\u0217\x03\x02\x02\x02\u0214\u0212\x03\x02\x02\x02\u0215\u0216\x071\x02\x02\u0216\u0218\x05X-\x02\u0217\u0215\x03\x02\x02\x02\u0217\u0218\x03\x02\x02\x02\u0218\u0219\x03\x02\x02\x02\u0219\u021a\x07C\x02\x02\u021a\u021e\x03\x02\x02\x02\u021b\u021c\t\x04\x02\x02\u021c\u021e\x05,\x17\x02\u021d\u020a\x03\x02\x02\x02\u021d\u021b\x03\x02\x02\x02\u021e?\x03\x02\x02\x02\u021f\u0220\x05\x12\n\x02\u0220\u0221\x05> \x02\u0221A\x03\x02\x02\x02\u0222\u0227\x05D#\x02\u0223\u0224\x07D\x02\x02\u0224\u0226\x05D#\x02\u0225\u0223\x03\x02\x02\x02\u0226\u0229\x03\x02\x02\x02\u0227\u0225\x03\x02\x02\x02\u0227\u0228\x03\x02\x02\x02\u0228C\x03\x02\x02\x02\u0229\u0227\x03\x02\x02\x02\u022a\u022d\x05F$\x02\u022b\u022c\x07F\x02\x02\u022c\u022e\x05H%\x02\u022d\u022b\x03\x02\x02\x02\u022d\u022e\x03\x02\x02\x02\u022eE\x03\x02\x02\x02\u022f\u0234\x07h\x02\x02\u0230\u0231\x07A\x02\x02\u0231\u0233\x07B\x02\x02\u0232\u0230\x03\x02\x02\x02\u0233\u0236\x03\x02\x02\x02\u0234\u0232\x03\x02\x02\x02\u0234\u0235\x03\x02\x02\x02\u0235G\x03\x02\x02\x02\u0236\u0234\x03\x02\x02\x02\u0237\u023a\x05J&\x02\u0238\u023a\x05\xb8]\x02\u0239\u0237\x03\x02\x02\x02\u0239\u0238\x03\x02\x02\x02\u023aI\x03\x02\x02\x02\u023b\u0247\x07?\x02\x02\u023c\u0241\x05H%\x02\u023d\u023e\x07D\x02\x02\u023e\u0240\x05H%\x02\u023f\u023d\x03\x02\x02\x02\u0240\u0243\x03\x02\x02\x02\u0241\u023f\x03\x02\x02\x02\u0241\u0242\x03\x02\x02\x02\u0242\u0245\x03\x02\x02\x02\u0243\u0241\x03\x02\x02\x02\u0244\u0246\x07D\x02\x02\u0245\u0244\x03\x02\x02\x02\u0245\u0246\x03\x02\x02\x02\u0246\u0248\x03\x02\x02\x02\u0247\u023c\x03\x02\x02\x02\u0247\u0248\x03\x02\x02\x02\u0248\u0249\x03\x02\x02\x02\u0249\u024a\x07@\x02\x02\u024aK\x03\x02\x02\x02\u024b\u024c\x07h\x02\x02\u024cM\x03\x02\x02\x02\u024d\u0252\x05P)\x02\u024e\u024f\x07A\x02\x02\u024f\u0251\x07B\x02\x02\u0250\u024e\x03\x02\x02\x02\u0251\u0254\x03\x02\x02\x02\u0252\u0250\x03\x02\x02\x02\u0252\u0253\x03\x02\x02\x02\u0253\u025e\x03\x02\x02\x02\u0254\u0252\x03\x02\x02\x02\u0255\u025a\x05R*\x02\u0256\u0257\x07A\x02\x02\u0257\u0259\x07B\x02\x02\u0258\u0256\x03\x02\x02\x02\u0259\u025c\x03\x02\x02\x02\u025a\u0258\x03\x02\x02\x02\u025a\u025b\x03\x02\x02\x02\u025b\u025e\x03\x02\x02\x02\u025c\u025a\x03\x02\x02\x02\u025d\u024d\x03\x02\x02\x02\u025d\u0255\x03\x02\x02\x02\u025eO\x03\x02\x02\x02\u025f\u0261\x07h\x02\x02\u0260\u0262\x05T+\x02\u0261\u0260\x03\x02\x02\x02\u0261\u0262\x03\x02\x02\x02\u0262\u026a\x03\x02\x02\x02\u0263\u0264\x07E\x02\x02\u0264\u0266\x07h\x02\x02\u0265\u0267\x05T+\x02\u0266\u0265\x03\x02\x02\x02\u0266\u0267\x03\x02\x02\x02\u0267\u0269\x03\x02\x02\x02\u0268\u0263\x03\x02\x02\x02\u0269\u026c\x03\x02\x02\x02\u026a\u0268\x03\x02\x02\x02\u026a\u026b\x03\x02\x02\x02\u026bQ\x03\x02\x02\x02\u026c\u026a\x03\x02\x02\x02\u026d\u026e\t\x05\x02\x02\u026eS\x03\x02\x02\x02\u026f\u0270\x07H\x02\x02\u0270\u0275\x05V,\x02\u0271\u0272\x07D\x02\x02\u0272\u0274\x05V,\x02\u0273\u0271\x03\x02\x02\x02\u0274\u0277\x03\x02\x02\x02\u0275\u0273\x03\x02\x02\x02\u0275\u0276\x03\x02\x02\x02\u0276\u0278\x03\x02\x02\x02\u0277\u0275\x03\x02\x02\x02\u0278\u0279\x07G\x02\x02\u0279U\x03\x02\x02\x02\u027a\u0281\x05N(\x02\u027b\u027e\x07K\x02\x02\u027c\u027d\t\x06\x02\x02\u027d\u027f\x05N(\x02\u027e\u027c\x03\x02\x02\x02\u027e\u027f\x03\x02\x02\x02\u027f\u0281\x03\x02\x02\x02\u0280\u027a\x03\x02\x02\x02\u0280\u027b\x03\x02\x02\x02\u0281W\x03\x02\x02\x02\u0282\u0287\x05f4\x02\u0283\u0284\x07D\x02\x02\u0284\u0286\x05f4\x02\u0285\u0283\x03\x02\x02\x02\u0286\u0289\x03\x02\x02\x02\u0287\u0285\x03\x02\x02\x02\u0287\u0288\x03\x02\x02\x02\u0288Y\x03\x02\x02\x02\u0289\u0287\x03\x02\x02\x02\u028a\u028c\x07=\x02\x02\u028b\u028d\x05\\/\x02\u028c\u028b\x03\x02\x02\x02\u028c\u028d\x03\x02\x02\x02\u028d\u028e\x03\x02\x02\x02\u028e\u028f\x07>\x02\x02\u028f[\x03\x02\x02\x02\u0290\u0295\x05^0\x02\u0291\u0292\x07D\x02\x02\u0292\u0294\x05^0\x02\u0293\u0291\x03\x02\x02\x02\u0294\u0297\x03\x02\x02\x02\u0295\u0293\x03\x02\x02\x02\u0295\u0296\x03\x02\x02\x02\u0296\u029a\x03\x02\x02\x02\u0297\u0295\x03\x02\x02\x02\u0298\u0299\x07D\x02\x02\u0299\u029b\x05`1\x02\u029a\u0298\x03\x02\x02\x02\u029a\u029b\x03\x02\x02\x02\u029b\u029e\x03\x02\x02\x02\u029c\u029e\x05`1\x02\u029d\u0290\x03\x02\x02\x02\u029d\u029c\x03\x02\x02\x02\u029e]\x03\x02\x02\x02\u029f\u02a1\x05\x0e\x08\x02\u02a0\u029f\x03\x02\x02\x02\u02a1\u02a4\x03\x02\x02\x02\u02a2\u02a0\x03\x02\x02\x02\u02a2\u02a3\x03\x02\x02\x02\u02a3\u02a5\x03\x02\x02\x02\u02a4\u02a2\x03\x02\x02\x02\u02a5\u02a6\x05N(\x02\u02a6\u02a7\x05F$\x02\u02a7_\x03\x02\x02\x02\u02a8\u02aa\x05\x0e\x08\x02\u02a9\u02a8\x03\x02\x02\x02\u02aa\u02ad\x03\x02\x02\x02\u02ab\u02a9\x03\x02\x02\x02\u02ab\u02ac\x03\x02\x02\x02\u02ac\u02ae\x03\x02\x02\x02\u02ad\u02ab\x03\x02\x02\x02\u02ae\u02af\x05N(\x02\u02af\u02b0\x07j\x02\x02\u02b0\u02b1\x05F$\x02\u02b1a\x03\x02\x02\x02\u02b2\u02b3\x05\x86D\x02\u02b3c\x03\x02\x02\x02\u02b4\u02b5\x05\x86D\x02\u02b5e\x03\x02\x02\x02\u02b6\u02bb\x07h\x02\x02\u02b7\u02b8\x07E\x02\x02\u02b8\u02ba\x07h\x02\x02\u02b9\u02b7\x03\x02\x02\x02\u02ba\u02bd\x03\x02\x02\x02\u02bb\u02b9\x03\x02\x02\x02\u02bb\u02bc\x03\x02\x02\x02\u02bcg\x03\x02\x02\x02\u02bd\u02bb\x03\x02\x02\x02\u02be\u02bf\t\x07\x02\x02\u02bfi\x03\x02\x02\x02\u02c0\u02c1\x07i\x02\x02\u02c1\u02c8\x05l7\x02\u02c2\u02c5\x07=\x02\x02\u02c3\u02c6\x05n8\x02\u02c4\u02c6\x05r:\x02\u02c5\u02c3\x03\x02\x02\x02\u02c5\u02c4\x03\x02\x02\x02\u02c5\u02c6\x03\x02\x02\x02\u02c6\u02c7\x03\x02\x02\x02\u02c7\u02c9\x07>\x02\x02\u02c8\u02c2\x03\x02\x02\x02\u02c8\u02c9\x03\x02\x02\x02\u02c9k\x03\x02\x02\x02\u02ca\u02cb\x05f4\x02\u02cbm\x03\x02\x02\x02\u02cc\u02d1\x05p9\x02\u02cd\u02ce\x07D\x02\x02\u02ce\u02d0\x05p9\x02\u02cf\u02cd\x03\x02\x02\x02\u02d0\u02d3\x03\x02\x02\x02\u02d1\u02cf\x03\x02\x02\x02\u02d1\u02d2\x03\x02\x02\x02\u02d2o\x03\x02\x02\x02\u02d3\u02d1\x03\x02\x02\x02\u02d4\u02d5\x07h\x02\x02\u02d5\u02d6\x07F\x02\x02\u02d6\u02d7\x05r:\x02\u02d7q\x03\x02\x02\x02\u02d8\u02dc\x05\xb8]\x02\u02d9\u02dc\x05j6\x02\u02da\u02dc\x05t;\x02\u02db\u02d8\x03\x02\x02\x02\u02db\u02d9\x03\x02\x02\x02\u02db\u02da\x03\x02\x02\x02\u02dcs\x03\x02\x02\x02\u02dd\u02e6\x07?\x02\x02\u02de\u02e3\x05r:\x02\u02df\u02e0\x07D\x02\x02\u02e0\u02e2\x05r:\x02\u02e1\u02df\x03\x02\x02\x02\u02e2\u02e5\x03\x02\x02\x02\u02e3\u02e1\x03\x02\x02\x02\u02e3\u02e4\x03\x02\x02\x02\u02e4\u02e7\x03\x02\x02\x02\u02e5\u02e3\x03\x02\x02\x02\u02e6\u02de\x03\x02\x02\x02\u02e6\u02e7\x03\x02\x02\x02\u02e7\u02e9\x03\x02\x02\x02\u02e8\u02ea\x07D\x02\x02\u02e9\u02e8\x03\x02\x02\x02\u02e9\u02ea\x03\x02\x02\x02\u02ea\u02eb\x03\x02\x02\x02\u02eb\u02ec\x07@\x02\x02\u02ecu\x03\x02\x02\x02\u02ed\u02ee\x07i\x02\x02\u02ee\u02ef\x07 \x02\x02\u02ef\u02f0\x07h\x02\x02\u02f0\u02f1\x05x=\x02\u02f1w\x03\x02\x02\x02\u02f2\u02f6\x07?\x02\x02\u02f3\u02f5\x05z>\x02\u02f4\u02f3\x03\x02\x02\x02\u02f5\u02f8\x03\x02\x02\x02\u02f6\u02f4\x03\x02\x02\x02\u02f6\u02f7\x03\x02\x02\x02\u02f7\u02f9\x03\x02\x02\x02\u02f8\u02f6\x03\x02\x02\x02\u02f9\u02fa\x07@\x02\x02\u02fay\x03\x02\x02\x02\u02fb\u02fd\x05\n\x06\x02\u02fc\u02fb\x03\x02\x02\x02\u02fd\u0300\x03\x02\x02\x02\u02fe\u02fc\x03\x02\x02\x02\u02fe\u02ff\x03\x02\x02\x02\u02ff\u0301\x03\x02\x02\x02\u0300\u02fe\x03\x02\x02\x02\u0301\u0304\x05|?\x02\u0302\u0304\x07C\x02\x02\u0303\u02fe\x03\x02\x02\x02\u0303\u0302\x03\x02\x02\x02\u0304{\x03\x02\x02\x02\u0305\u0306\x05N(\x02\u0306\u0307\x05~@\x02\u0307\u0308\x07C\x02\x02\u0308\u031a\x03\x02\x02\x02\u0309\u030b\x05\x10\t\x02\u030a\u030c\x07C\x02\x02\u030b\u030a\x03\x02\x02\x02\u030b\u030c\x03\x02\x02\x02\u030c\u031a\x03\x02\x02\x02\u030d\u030f\x05 \x11\x02\u030e\u0310\x07C\x02\x02\u030f\u030e\x03\x02\x02\x02\u030f\u0310\x03\x02\x02\x02\u0310\u031a\x03\x02\x02\x02\u0311\u0313\x05\x18\r\x02\u0312\u0314\x07C\x02\x02\u0313\u0312\x03\x02\x02\x02\u0313\u0314\x03\x02\x02\x02\u0314\u031a\x03\x02\x02\x02\u0315\u0317\x05v<\x02\u0316\u0318\x07C\x02\x02\u0317\u0316\x03\x02\x02\x02\u0317\u0318\x03\x02\x02\x02\u0318\u031a\x03\x02\x02\x02\u0319\u0305\x03\x02\x02\x02\u0319\u0309\x03\x02\x02\x02\u0319\u030d\x03\x02\x02\x02\u0319\u0311\x03\x02\x02\x02\u0319\u0315\x03\x02\x02\x02\u031a}\x03\x02\x02\x02\u031b\u031e\x05\x80A\x02\u031c\u031e\x05\x82B\x02\u031d\u031b\x03\x02\x02\x02\u031d\u031c\x03\x02\x02\x02\u031e\x7f\x03\x02\x02\x02\u031f\u0320\x07h\x02\x02\u0320\u0321\x07=\x02\x02\u0321\u0323\x07>\x02\x02\u0322\u0324\x05\x84C\x02\u0323\u0322\x03\x02\x02\x02\u0323\u0324\x03\x02\x02\x02\u0324\x81\x03\x02\x02\x02\u0325\u0326\x05B"\x02\u0326\x83\x03\x02\x02\x02\u0327\u0328\x07\x10\x02\x02\u0328\u0329\x05r:\x02\u0329\x85\x03\x02\x02\x02\u032a\u032e\x07?\x02\x02\u032b\u032d\x05\x88E\x02\u032c\u032b\x03\x02\x02\x02\u032d\u0330\x03\x02\x02\x02\u032e\u032c\x03\x02\x02\x02\u032e\u032f\x03\x02\x02\x02\u032f\u0331\x03\x02\x02\x02\u0330\u032e\x03\x02\x02\x02\u0331\u0332\x07@\x02\x02\u0332\x87\x03\x02\x02\x02\u0333\u0337\x05\x8aF\x02\u0334\u0337\x05\x8eH\x02\u0335\u0337\x05\x08\x05\x02\u0336\u0333\x03\x02\x02\x02\u0336\u0334\x03\x02\x02\x02\u0336\u0335\x03\x02\x02\x02\u0337\x89\x03\x02\x02\x02\u0338\u0339\x05\x8cG\x02\u0339\u033a\x07C\x02\x02\u033a\x8b\x03\x02\x02\x02\u033b\u033d\x05\x0e\x08\x02\u033c\u033b\x03\x02\x02\x02\u033d\u0340\x03\x02\x02\x02\u033e\u033c\x03\x02\x02\x02\u033e\u033f\x03\x02\x02\x02\u033f\u0341\x03\x02\x02\x02\u0340\u033e\x03\x02\x02\x02\u0341\u0342\x05N(\x02\u0342\u0343\x05B"\x02\u0343\x8d\x03\x02\x02\x02\u0344\u03ad\x05\x86D\x02\u0345\u0346\x07\x06\x02\x02\u0346\u0349\x05\xb8]\x02\u0347\u0348\x07L\x02\x02\u0348\u034a\x05\xb8]\x02\u0349\u0347\x03\x02\x02\x02\u0349\u034a\x03\x02\x02\x02\u034a\u034b\x03\x02\x02\x02\u034b\u034c\x07C\x02\x02\u034c\u03ad\x03\x02\x02\x02\u034d\u034e\x07\x1a\x02\x02\u034e\u034f\x05\xa8U\x02\u034f\u0352\x05\x8eH\x02\u0350\u0351\x07\x13\x02\x02\u0351\u0353\x05\x8eH\x02\u0352\u0350\x03\x02\x02\x02\u0352\u0353\x03\x02\x02\x02\u0353\u03ad\x03\x02\x02\x02\u0354\u0355\x07\x19\x02\x02\u0355\u0356\x07=\x02\x02\u0356\u0357\x05\xa0Q\x02\u0357\u0358\x07>\x02\x02\u0358\u0359\x05\x8eH\x02\u0359\u03ad\x03\x02\x02\x02\u035a\u035b\x076\x02\x02\u035b\u035c\x05\xa8U\x02\u035c\u035d\x05\x8eH\x02\u035d\u03ad\x03\x02\x02\x02\u035e\u035f\x07\x11\x02\x02\u035f\u0360\x05\x8eH\x02\u0360\u0361\x076\x02\x02\u0361\u0362\x05\xa8U\x02\u0362\u0363\x07C\x02\x02\u0363\u03ad\x03\x02\x02\x02\u0364\u0365\x073\x02\x02\u0365\u036f\x05\x86D\x02\u0366\u0368\x05\x90I\x02\u0367\u0366\x03\x02\x02\x02\u0368\u0369\x03\x02\x02\x02\u0369\u0367\x03\x02\x02\x02\u0369\u036a\x03\x02\x02\x02\u036a\u036c\x03\x02\x02\x02\u036b\u036d\x05\x94K\x02\u036c\u036b\x03\x02\x02\x02\u036c\u036d\x03\x02\x02\x02\u036d\u0370\x03\x02\x02\x02\u036e\u0370\x05\x94K\x02\u036f\u0367\x03\x02\x02\x02\u036f\u036e\x03\x02\x02\x02\u0370\u03ad\x03\x02\x02\x02\u0371\u0372\x073\x02\x02\u0372\u0373\x05\x96L\x02\u0373\u0377\x05\x86D\x02\u0374\u0376\x05\x90I\x02\u0375\u0374\x03\x02\x02\x02\u0376\u0379\x03\x02\x02\x02\u0377\u0375\x03\x02\x02\x02\u0377\u0378\x03\x02\x02\x02\u0378\u037b\x03\x02\x02\x02\u0379\u0377\x03\x02\x02\x02\u037a\u037c\x05\x94K\x02\u037b\u037a\x03\x02\x02\x02\u037b\u037c\x03\x02\x02\x02\u037c\u03ad\x03\x02\x02\x02\u037d\u037e\x07-\x02\x02\u037e\u037f\x05\xa8U\x02\u037f\u0383\x07?\x02\x02\u0380\u0382\x05\x9cO\x02\u0381\u0380\x03\x02\x02\x02\u0382\u0385\x03\x02\x02\x02\u0383\u0381\x03\x02\x02\x02\u0383\u0384\x03\x02\x02\x02\u0384\u0389\x03\x02\x02\x02\u0385\u0383\x03\x02\x02\x02\u0386\u0388\x05\x9eP\x02\u0387\u0386\x03\x02\x02\x02\u0388\u038b\x03\x02\x02\x02\u0389\u0387\x03\x02\x02\x02\u0389\u038a\x03\x02\x02\x02\u038a\u038c\x03\x02\x02\x02\u038b\u0389\x03\x02\x02\x02\u038c\u038d\x07@\x02\x02\u038d\u03ad\x03\x02\x02\x02\u038e\u038f\x07.\x02\x02\u038f\u0390\x05\xa8U\x02\u0390\u0391\x05\x86D\x02\u0391\u03ad\x03\x02\x02\x02\u0392\u0394\x07(\x02\x02\u0393\u0395\x05\xb8]\x02\u0394\u0393\x03\x02\x02\x02\u0394\u0395\x03\x02\x02\x02\u0395\u0396\x03\x02\x02\x02\u0396\u03ad\x07C\x02\x02\u0397\u0398\x070\x02\x02\u0398\u0399\x05\xb8]\x02\u0399\u039a\x07C\x02\x02\u039a\u03ad\x03\x02\x02\x02\u039b\u039d\x07\x08\x02\x02\u039c\u039e\x07h\x02\x02\u039d\u039c\x03\x02\x02\x02\u039d\u039e\x03\x02\x02\x02\u039e\u039f\x03\x02\x02\x02\u039f\u03ad\x07C\x02\x02\u03a0\u03a2\x07\x0f\x02\x02\u03a1\u03a3\x07h\x02\x02\u03a2\u03a1\x03\x02\x02\x02\u03a2\u03a3\x03\x02\x02\x02\u03a3\u03a4\x03\x02\x02\x02\u03a4\u03ad\x07C\x02\x02\u03a5\u03ad\x07C\x02\x02\u03a6\u03a7\x05\xacW\x02\u03a7\u03a8\x07C\x02\x02\u03a8\u03ad\x03\x02\x02\x02\u03a9\u03aa\x07h\x02\x02\u03aa\u03ab\x07L\x02\x02\u03ab\u03ad\x05\x8eH\x02\u03ac\u0344\x03\x02\x02\x02\u03ac\u0345\x03\x02\x02\x02\u03ac\u034d\x03\x02\x02\x02\u03ac\u0354\x03\x02\x02\x02\u03ac\u035a\x03\x02\x02\x02\u03ac\u035e\x03\x02\x02\x02\u03ac\u0364\x03\x02\x02\x02\u03ac\u0371\x03\x02\x02\x02\u03ac\u037d\x03\x02\x02\x02\u03ac\u038e\x03\x02\x02\x02\u03ac\u0392\x03\x02\x02\x02\u03ac\u0397\x03\x02\x02\x02\u03ac\u039b\x03\x02\x02\x02\u03ac\u03a0\x03\x02\x02\x02\u03ac\u03a5\x03\x02\x02\x02\u03ac\u03a6\x03\x02\x02\x02\u03ac\u03a9\x03\x02\x02\x02\u03ad\x8f\x03\x02\x02\x02\u03ae\u03af\x07\x0b\x02\x02\u03af\u03b3\x07=\x02\x02\u03b0\u03b2\x05\x0e\x08\x02\u03b1\u03b0\x03\x02\x02\x02\u03b2\u03b5\x03\x02\x02\x02\u03b3\u03b1\x03\x02\x02\x02\u03b3\u03b4\x03\x02\x02\x02\u03b4\u03b6\x03\x02\x02\x02\u03b5\u03b3\x03\x02\x02\x02\u03b6\u03b7\x05\x92J\x02\u03b7\u03b8\x07h\x02\x02\u03b8\u03b9\x07>\x02\x02\u03b9\u03ba\x05\x86D\x02\u03ba\x91\x03\x02\x02\x02\u03bb\u03c0\x05f4\x02\u03bc\u03bd\x07Z\x02\x02\u03bd\u03bf\x05f4\x02\u03be\u03bc\x03\x02\x02\x02\u03bf\u03c2\x03\x02\x02\x02\u03c0\u03be\x03\x02\x02\x02\u03c0\u03c1\x03\x02\x02\x02\u03c1\x93\x03\x02\x02\x02\u03c2\u03c0\x03\x02\x02\x02\u03c3\u03c4\x07\x17\x02\x02\u03c4\u03c5\x05\x86D\x02\u03c5\x95\x03\x02\x02\x02\u03c6\u03c7\x07=\x02\x02\u03c7\u03c9\x05\x98M\x02\u03c8\u03ca\x07C\x02\x02\u03c9\u03c8\x03\x02\x02\x02\u03c9\u03ca\x03\x02\x02\x02\u03ca\u03cb\x03\x02\x02\x02\u03cb\u03cc\x07>\x02\x02\u03cc\x97\x03\x02\x02\x02\u03cd\u03d2\x05\x9aN\x02\u03ce\u03cf\x07C\x02\x02\u03cf\u03d1\x05\x9aN\x02\u03d0\u03ce\x03\x02\x02\x02\u03d1\u03d4\x03\x02\x02\x02\u03d2\u03d0\x03\x02\x02\x02\u03d2\u03d3\x03\x02\x02\x02\u03d3\x99\x03\x02\x02\x02\u03d4\u03d2\x03\x02\x02\x02\u03d5\u03d7\x05\x0e\x08\x02\u03d6\u03d5\x03\x02\x02\x02\u03d7\u03da\x03\x02\x02\x02\u03d8\u03d6\x03\x02\x02\x02\u03d8\u03d9\x03\x02\x02\x02\u03d9\u03db\x03\x02\x02\x02\u03da\u03d8\x03\x02\x02\x02\u03db\u03dc\x05P)\x02\u03dc\u03dd\x05F$\x02\u03dd\u03de\x07F\x02\x02\u03de\u03df\x05\xb8]\x02\u03df\x9b\x03\x02\x02\x02\u03e0\u03e2\x05\x9eP\x02\u03e1\u03e0\x03\x02\x02\x02\u03e2\u03e3\x03\x02\x02\x02\u03e3\u03e1\x03\x02\x02\x02\u03e3\u03e4\x03\x02\x02\x02\u03e4\u03e6\x03\x02\x02\x02\u03e5\u03e7\x05\x88E\x02\u03e6\u03e5\x03\x02\x02\x02\u03e7\u03e8\x03\x02\x02\x02\u03e8\u03e6\x03\x02\x02\x02\u03e8\u03e9\x03\x02\x02\x02\u03e9\x9d\x03\x02\x02\x02\u03ea\u03eb\x07\n\x02\x02\u03eb\u03ec\x05\xaeX\x02\u03ec\u03ed\x07L\x02\x02\u03ed\u03f5\x03\x02\x02\x02\u03ee\u03ef\x07\n\x02\x02\u03ef\u03f0\x05L\'\x02\u03f0\u03f1\x07L\x02\x02\u03f1\u03f5\x03\x02\x02\x02\u03f2\u03f3\x07\x10\x02\x02\u03f3\u03f5\x07L\x02\x02\u03f4\u03ea\x03\x02\x02\x02\u03f4\u03ee\x03\x02\x02\x02\u03f4\u03f2\x03\x02\x02\x02\u03f5\x9f\x03\x02\x02\x02\u03f6\u0403\x05\xa4S\x02\u03f7\u03f9\x05\xa2R\x02\u03f8\u03f7\x03\x02\x02\x02\u03f8\u03f9\x03\x02\x02\x02\u03f9\u03fa\x03\x02\x02\x02\u03fa\u03fc\x07C\x02\x02\u03fb\u03fd\x05\xb8]\x02\u03fc\u03fb\x03\x02\x02\x02\u03fc\u03fd\x03\x02\x02\x02\u03fd\u03fe\x03\x02\x02\x02\u03fe\u0400\x07C\x02\x02\u03ff\u0401\x05\xa6T\x02\u0400\u03ff\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0401\u0403\x03\x02\x02\x02\u0402\u03f6\x03\x02\x02\x02\u0402\u03f8\x03\x02\x02\x02\u0403\xa1\x03\x02\x02\x02\u0404\u0407\x05\x8cG\x02\u0405\u0407\x05\xaaV\x02\u0406\u0404\x03\x02\x02\x02\u0406\u0405\x03\x02\x02\x02\u0407\xa3\x03\x02\x02\x02\u0408\u040a\x05\x0e\x08\x02\u0409\u0408\x03\x02\x02\x02\u040a\u040d\x03\x02\x02\x02\u040b\u0409\x03\x02\x02\x02\u040b\u040c\x03\x02\x02\x02\u040c\u040e\x03\x02\x02\x02\u040d\u040b\x03\x02\x02\x02\u040e\u040f\x05N(\x02\u040f\u0410\x05F$\x02\u0410\u0411\x07L\x02\x02\u0411\u0412\x05\xb8]\x02\u0412\xa5\x03\x02\x02\x02\u0413\u0414\x05\xaaV\x02\u0414\xa7\x03\x02\x02\x02\u0415\u0416\x07=\x02\x02\u0416\u0417\x05\xb8]\x02\u0417\u0418\x07>\x02\x02\u0418\xa9\x03\x02\x02\x02\u0419\u041e\x05\xb8]\x02\u041a\u041b\x07D\x02\x02\u041b\u041d\x05\xb8]\x02\u041c\u041a\x03\x02\x02\x02\u041d\u0420\x03\x02\x02\x02\u041e\u041c\x03\x02\x02\x02\u041e\u041f\x03\x02\x02\x02\u041f\xab\x03\x02\x02\x02\u0420\u041e\x03\x02\x02\x02\u0421\u0422\x05\xb8]\x02\u0422\xad\x03\x02\x02\x02\u0423\u0424\x05\xb8]\x02\u0424\xaf\x03\x02\x02\x02\u0425\u0426\x05\xb2Z\x02\u0426\u0427\x07\x04\x02\x02\u0427\u0428\x05\xb6\\\x02\u0428\xb1\x03\x02\x02\x02\u0429\u0434\x07h\x02\x02\u042a\u042c\x07=\x02\x02\u042b\u042d\x05\\/\x02\u042c\u042b\x03\x02\x02\x02\u042c\u042d\x03\x02\x02\x02\u042d\u042e\x03\x02\x02\x02\u042e\u0434\x07>\x02\x02\u042f\u0430\x07=\x02\x02\u0430\u0431\x05\xb4[\x02\u0431\u0432\x07>\x02\x02\u0432\u0434\x03\x02\x02\x02\u0433\u0429\x03\x02\x02\x02\u0433\u042a\x03\x02\x02\x02\u0433\u042f\x03\x02\x02\x02\u0434\xb3\x03\x02\x02\x02\u0435\u043a\x07h\x02\x02\u0436\u0437\x07D\x02\x02\u0437\u0439\x07h\x02\x02\u0438\u0436\x03\x02\x02\x02\u0439\u043c\x03\x02\x02\x02\u043a\u0438\x03\x02\x02\x02\u043a\u043b\x03\x02\x02\x02\u043b\xb5\x03\x02\x02\x02\u043c\u043a\x03\x02\x02\x02\u043d\u0440\x05\xb8]\x02\u043e\u0440\x05\x86D\x02\u043f\u043d\x03\x02\x02\x02\u043f\u043e\x03\x02\x02\x02\u0440\xb7\x03\x02\x02\x02\u0441\u0442\x08]\x01\x02\u0442\u0443\x07=\x02\x02\u0443\u0444\x05N(\x02\u0444\u0445\x07>\x02\x02\u0445\u0446\x05\xb8]\x16\u0446\u0450\x03\x02\x02\x02\u0447\u0448\t\x08\x02\x02\u0448\u0450\x05\xb8]\x14\u0449\u044a\t\t\x02\x02\u044a\u0450\x05\xb8]\x13\u044b\u0450\x05\xba^\x02\u044c\u044d\x07#\x02\x02\u044d\u0450\x05\xbc_\x02\u044e\u0450\x05\xb0Y\x02\u044f\u0441\x03\x02\x02\x02\u044f\u0447\x03\x02\x02\x02\u044f\u0449\x03\x02\x02\x02\u044f\u044b\x03\x02\x02\x02\u044f\u044c\x03\x02\x02\x02\u044f\u044e\x03\x02\x02\x02\u0450\u04b2\x03\x02\x02\x02\u0451\u0452\x0c\x12\x02\x02\u0452\u0453\t\n\x02\x02\u0453\u04b1\x05\xb8]\x13\u0454\u0455\x0c\x11\x02\x02\u0455\u0456\t\x0b\x02\x02\u0456\u04b1\x05\xb8]\x12\u0457\u045f\x0c\x10\x02\x02\u0458\u0459\x07H\x02\x02\u0459\u0460\x07H\x02\x02\u045a\u045b\x07G\x02\x02\u045b\u045c\x07G\x02\x02\u045c\u0460\x07G\x02\x02\u045d\u045e\x07G\x02\x02\u045e\u0460\x07G\x02\x02\u045f\u0458\x03\x02\x02\x02\u045f\u045a\x03\x02\x02\x02\u045f\u045d\x03\x02\x02\x02\u0460\u0461\x03\x02\x02\x02\u0461\u04b1\x05\xb8]\x11\u0462\u0463\x0c\x0f\x02\x02\u0463\u0464\t\x0c\x02\x02\u0464\u04b1\x05\xb8]\x10\u0465\u0466\x0c\r\x02\x02\u0466\u0467\t\r\x02\x02\u0467\u04b1\x05\xb8]\x0e\u0468\u0469\x0c\x0c\x02\x02\u0469\u046a\x07Y\x02\x02\u046a\u04b1\x05\xb8]\r\u046b\u046c\x0c\x0b\x02\x02\u046c\u046d\x07[\x02\x02\u046d\u04b1\x05\xb8]\x0c\u046e\u046f\x0c\n\x02\x02\u046f\u0470\x07Z\x02\x02\u0470\u04b1\x05\xb8]\x0b\u0471\u0472\x0c\t\x02\x02\u0472\u0473\x07Q\x02\x02\u0473\u04b1\x05\xb8]\n\u0474\u0475\x0c\x08\x02\x02\u0475\u0476\x07R\x02\x02\u0476\u04b1\x05\xb8]\t\u0477\u0478\x0c\x07\x02\x02\u0478\u0479\x07K\x02\x02\u0479\u047a\x05\xb8]\x02\u047a\u047b\x07L\x02\x02\u047b\u047c\x05\xb8]\x08\u047c\u04b1\x03\x02\x02\x02\u047d\u047e\x0c\x03\x02\x02\u047e\u047f\t\x0e\x02\x02\u047f\u04b1\x05\xb8]\x03\u0480\u0481\x0c\x1e\x02\x02\u0481\u0482\x07E\x02\x02\u0482\u04b1\x07h\x02\x02\u0483\u0484\x0c\x1d\x02\x02\u0484\u0485\x07E\x02\x02\u0485\u04b1\x07/\x02\x02\u0486\u0487\x0c\x1c\x02\x02\u0487\u0488\x07E\x02\x02\u0488\u048a\x07#\x02\x02\u0489\u048b\x05\xc8e\x02\u048a\u0489\x03\x02\x02\x02\u048a\u048b\x03\x02\x02\x02\u048b\u048c\x03\x02\x02\x02\u048c\u04b1\x05\xc0a\x02\u048d\u048e\x0c\x1b\x02\x02\u048e\u048f\x07E\x02\x02\u048f\u0490\x07,\x02\x02\u0490\u04b1\x05\xceh\x02\u0491\u0492\x0c\x1a\x02\x02\u0492\u0493\x07E\x02\x02\u0493\u04b1\x05\xc6d\x02\u0494\u0495\x0c\x19\x02\x02\u0495\u0496\x07A\x02\x02\u0496\u0497\x05\xb8]\x02\u0497\u0498\x07B\x02\x02\u0498\u04b1\x03\x02\x02\x02\u0499\u049a\x0c\x18\x02\x02\u049a\u049c\x07=\x02\x02\u049b\u049d\x05\xaaV\x02\u049c\u049b\x03\x02\x02\x02\u049c\u049d\x03\x02\x02\x02\u049d\u049e\x03\x02\x02\x02\u049e\u04b1\x07>\x02\x02\u049f\u04a0\x0c\x15\x02\x02\u04a0\u04b1\t\x0f\x02\x02\u04a1\u04a2\x0c\x0e\x02\x02\u04a2\u04a3\x07\x1e\x02\x02\u04a3\u04b1\x05N(\x02\u04a4\u04a5\x0c\x05\x02\x02\u04a5\u04a7\x07\x03\x02\x02\u04a6\u04a8\x05T+\x02\u04a7\u04a6\x03\x02\x02\x02\u04a7\u04a8\x03\x02\x02\x02\u04a8\u04a9\x03\x02\x02\x02\u04a9\u04b1\x07h\x02\x02\u04aa\u04ab\x0c\x04\x02\x02\u04ab\u04ad\x07\x03\x02\x02\u04ac\u04ae\x05T+\x02\u04ad\u04ac\x03\x02\x02\x02\u04ad\u04ae\x03\x02\x02\x02\u04ae\u04af\x03\x02\x02\x02\u04af\u04b1\x07#\x02\x02\u04b0\u0451\x03\x02\x02\x02\u04b0\u0454\x03\x02\x02\x02\u04b0\u0457\x03\x02\x02\x02\u04b0\u0462\x03\x02\x02\x02\u04b0\u0465\x03\x02\x02\x02\u04b0\u0468\x03\x02\x02\x02\u04b0\u046b\x03\x02\x02\x02\u04b0\u046e\x03\x02\x02\x02\u04b0\u0471\x03\x02\x02\x02\u04b0\u0474\x03\x02\x02\x02\u04b0\u0477\x03\x02\x02\x02\u04b0\u047d\x03\x02\x02\x02\u04b0\u0480\x03\x02\x02\x02\u04b0\u0483\x03\x02\x02\x02\u04b0\u0486\x03\x02\x02\x02\u04b0\u048d\x03\x02\x02\x02\u04b0\u0491\x03\x02\x02\x02\u04b0\u0494\x03\x02\x02\x02\u04b0\u0499\x03\x02\x02\x02\u04b0\u049f\x03\x02\x02\x02\u04b0\u04a1\x03\x02\x02\x02\u04b0\u04a4\x03\x02\x02\x02\u04b0\u04aa\x03\x02\x02\x02\u04b1\u04b4\x03\x02\x02\x02\u04b2\u04b0\x03\x02\x02\x02\u04b2\u04b3\x03\x02\x02\x02\u04b3\xb9\x03\x02\x02\x02\u04b4\u04b2\x03\x02\x02\x02\u04b5\u04b6\x07=\x02\x02\u04b6\u04b7\x05\xb8]\x02\u04b7\u04b8\x07>\x02\x02\u04b8\u04cb\x03\x02\x02\x02\u04b9\u04cb\x07/\x02\x02\u04ba\u04cb\x07,\x02\x02\u04bb\u04cb\x05h5\x02\u04bc\u04cb\x07h\x02\x02\u04bd\u04be\x05N(\x02\u04be\u04bf\x07E\x02\x02\u04bf\u04c0\x07\r\x02\x02\u04c0\u04cb\x03\x02\x02\x02\u04c1\u04c2\x074\x02\x02\u04c2\u04c3\x07E\x02\x02\u04c3\u04cb\x07\r\x02\x02\u04c4\u04c8\x05\xc8e\x02\u04c5\u04c9\x05\xd0i\x02\u04c6\u04c7\x07/\x02\x02\u04c7\u04c9\x05\xd2j\x02\u04c8\u04c5\x03\x02\x02\x02\u04c8\u04c6\x03\x02\x02\x02\u04c9\u04cb\x03\x02\x02\x02\u04ca\u04b5\x03\x02\x02\x02\u04ca\u04b9\x03\x02\x02\x02\u04ca\u04ba\x03\x02\x02\x02\u04ca\u04bb\x03\x02\x02\x02\u04ca\u04bc\x03\x02\x02\x02\u04ca\u04bd\x03\x02\x02\x02\u04ca\u04c1\x03\x02\x02\x02\u04ca\u04c4\x03\x02\x02\x02\u04cb\xbb\x03\x02\x02\x02\u04cc\u04cd\x05\xc8e\x02\u04cd\u04ce\x05\xbe`\x02\u04ce\u04cf\x05\xc4c\x02\u04cf\u04d6\x03\x02\x02\x02\u04d0\u04d3\x05\xbe`\x02\u04d1\u04d4\x05\xc2b\x02\u04d2\u04d4\x05\xc4c\x02\u04d3\u04d1\x03\x02\x02\x02\u04d3\u04d2\x03\x02\x02\x02\u04d4\u04d6\x03\x02\x02\x02\u04d5\u04cc\x03\x02\x02\x02\u04d5\u04d0\x03\x02\x02\x02\u04d6\xbd\x03\x02\x02\x02\u04d7\u04d9\x07h\x02\x02\u04d8\u04da\x05\xcaf\x02\u04d9\u04d8\x03\x02\x02\x02\u04d9\u04da\x03\x02\x02\x02\u04da\u04e2\x03\x02\x02\x02\u04db\u04dc\x07E\x02\x02\u04dc\u04de\x07h\x02\x02\u04dd\u04df\x05\xcaf\x02\u04de\u04dd\x03\x02\x02\x02\u04de\u04df\x03\x02\x02\x02\u04df\u04e1\x03\x02\x02\x02\u04e0\u04db\x03\x02\x02\x02\u04e1\u04e4\x03\x02\x02\x02\u04e2\u04e0\x03\x02\x02\x02\u04e2\u04e3\x03\x02\x02\x02\u04e3\u04e7\x03\x02\x02\x02\u04e4\u04e2\x03\x02\x02\x02\u04e5\u04e7\x05R*\x02\u04e6\u04d7\x03\x02\x02\x02\u04e6\u04e5\x03\x02\x02\x02\u04e7\xbf\x03\x02\x02\x02\u04e8\u04ea\x07h\x02\x02\u04e9\u04eb\x05\xccg\x02\u04ea\u04e9\x03\x02\x02\x02\u04ea\u04eb\x03\x02\x02\x02\u04eb\u04ec\x03\x02\x02\x02\u04ec\u04ed\x05\xc4c\x02\u04ed\xc1\x03\x02\x02\x02\u04ee\u050a\x07A\x02\x02\u04ef\u04f4\x07B\x02\x02\u04f0\u04f1\x07A\x02\x02\u04f1\u04f3\x07B\x02\x02\u04f2\u04f0\x03\x02\x02\x02\u04f3\u04f6\x03\x02\x02\x02\u04f4\u04f2\x03\x02\x02\x02\u04f4\u04f5\x03\x02\x02\x02\u04f5\u04f7\x03\x02\x02\x02\u04f6\u04f4\x03\x02\x02\x02\u04f7\u050b\x05J&\x02\u04f8\u04f9\x05\xb8]\x02\u04f9\u0500\x07B\x02\x02\u04fa\u04fb\x07A\x02\x02\u04fb\u04fc\x05\xb8]\x02\u04fc\u04fd\x07B\x02\x02\u04fd\u04ff\x03\x02\x02\x02\u04fe\u04fa\x03\x02\x02\x02\u04ff\u0502\x03\x02\x02\x02\u0500\u04fe\x03\x02\x02\x02\u0500\u0501\x03\x02\x02\x02\u0501\u0507\x03\x02\x02\x02\u0502\u0500\x03\x02\x02\x02\u0503\u0504\x07A\x02\x02\u0504\u0506\x07B\x02\x02\u0505\u0503\x03\x02\x02\x02\u0506\u0509\x03\x02\x02\x02\u0507\u0505\x03\x02\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508\u050b\x03\x02\x02\x02\u0509\u0507\x03\x02\x02\x02\u050a\u04ef\x03\x02\x02\x02\u050a\u04f8\x03\x02\x02\x02\u050b\xc3\x03\x02\x02\x02\u050c\u050e\x05\xd2j\x02\u050d\u050f\x05$\x13\x02\u050e\u050d\x03\x02\x02\x02\u050e\u050f\x03\x02\x02\x02\u050f\xc5\x03\x02\x02\x02\u0510\u0511\x05\xc8e\x02\u0511\u0512\x05\xd0i\x02\u0512\xc7\x03\x02\x02\x02\u0513\u0514\x07H\x02\x02\u0514\u0515\x05"\x12\x02\u0515\u0516\x07G\x02\x02\u0516\xc9\x03\x02\x02\x02\u0517\u0518\x07H\x02\x02\u0518\u051b\x07G\x02\x02\u0519\u051b\x05T+\x02\u051a\u0517\x03\x02\x02\x02\u051a\u0519\x03\x02\x02\x02\u051b\xcb\x03\x02\x02\x02\u051c\u051d\x07H\x02\x02\u051d\u0520\x07G\x02\x02\u051e\u0520\x05\xc8e\x02\u051f\u051c\x03\x02\x02\x02\u051f\u051e\x03\x02\x02\x02\u0520\xcd\x03\x02\x02\x02\u0521\u0528\x05\xd2j\x02\u0522\u0523\x07E\x02\x02\u0523\u0525\x07h\x02\x02\u0524\u0526\x05\xd2j\x02\u0525\u0524\x03\x02\x02\x02\u0525\u0526\x03\x02\x02\x02\u0526\u0528\x03\x02\x02\x02\u0527\u0521\x03\x02\x02\x02\u0527\u0522\x03\x02\x02\x02\u0528\xcf\x03\x02\x02\x02\u0529\u052a\x07,\x02\x02\u052a\u052e\x05\xceh\x02\u052b\u052c\x07h\x02\x02\u052c\u052e\x05\xd2j\x02\u052d\u0529\x03\x02\x02\x02\u052d\u052b\x03\x02\x02\x02\u052e\xd1\x03\x02\x02\x02\u052f\u0531\x07=\x02\x02\u0530\u0532\x05\xaaV\x02\u0531\u0530\x03\x02\x02\x02\u0531\u0532\x03\x02\x02\x02\u0532\u0533\x03\x02\x02\x02\u0533\u0534\x07>\x02\x02\u0534\xd3\x03\x02\x02\x02\x9e\xd5\xda\xe0\xe8\xf1\xf6\xfd\u0104\u010b\u0112\u0117\u011b\u011f\u0123\u0128\u012c\u0130\u013a\u0142\u0149\u0150\u0154\u0157\u015a\u0163\u0169\u016e\u0171\u0177\u017d\u0181\u018a\u0191\u019a\u01a1\u01a7\u01ab\u01b6\u01ba\u01c2\u01c7\u01cb\u01d4\u01e2\u01e7\u01f0\u01f8\u0202\u020a\u0212\u0217\u021d\u0227\u022d\u0234\u0239\u0241\u0245\u0247\u0252\u025a\u025d\u0261\u0266\u026a\u0275\u027e\u0280\u0287\u028c\u0295\u029a\u029d\u02a2\u02ab\u02bb\u02c5\u02c8\u02d1\u02db\u02e3\u02e6\u02e9\u02f6\u02fe\u0303\u030b\u030f\u0313\u0317\u0319\u031d\u0323\u032e\u0336\u033e\u0349\u0352\u0369\u036c\u036f\u0377\u037b\u0383\u0389\u0394\u039d\u03a2\u03ac\u03b3\u03c0\u03c9\u03d2\u03d8\u03e3\u03e8\u03f4\u03f8\u03fc\u0400\u0402\u0406\u040b\u041e\u042c\u0433\u043a\u043f\u044f\u045f\u048a\u049c\u04a7\u04ad\u04b0\u04b2\u04c8\u04ca\u04d3\u04d5\u04d9\u04de\u04e2\u04e6\u04ea\u04f4\u0500\u0507\u050a\u050e\u051a\u051f\u0525\u0527\u052d\u0531'

    atn = ATNDeserializer().deserialize(atnData())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    EOF = Token.EOF
    T__1 = 1
    T__0 = 2
    ABSTRACT = 3
    ASSERT = 4
    BOOLEAN = 5
    BREAK = 6
    BYTE = 7
    CASE = 8
    CATCH = 9
    CHAR = 10
    CLASS = 11
    CONST = 12
    CONTINUE = 13
    DEFAULT = 14
    DO = 15
    DOUBLE = 16
    ELSE = 17
    ENUM = 18
    EXTENDS = 19
    FINAL = 20
    FINALLY = 21
    FLOAT = 22
    FOR = 23
    IF = 24
    GOTO = 25
    IMPLEMENTS = 26
    IMPORT = 27
    INSTANCEOF = 28
    INT = 29
    INTERFACE = 30
    LONG = 31
    NATIVE = 32
    NEW = 33
    PACKAGE = 34
    PRIVATE = 35
    PROTECTED = 36
    PUBLIC = 37
    RETURN = 38
    SHORT = 39
    STATIC = 40
    STRICTFP = 41
    SUPER = 42
    SWITCH = 43
    SYNCHRONIZED = 44
    THIS = 45
    THROW = 46
    THROWS = 47
    TRANSIENT = 48
    TRY = 49
    VOID = 50
    VOLATILE = 51
    WHILE = 52
    IntegerLiteral = 53
    FloatingPointLiteral = 54
    BooleanLiteral = 55
    CharacterLiteral = 56
    StringLiteral = 57
    NullLiteral = 58
    LPAREN = 59
    RPAREN = 60
    LBRACE = 61
    RBRACE = 62
    LBRACK = 63
    RBRACK = 64
    SEMI = 65
    COMMA = 66
    DOT = 67
    ASSIGN = 68
    GT = 69
    LT = 70
    BANG = 71
    TILDE = 72
    QUESTION = 73
    COLON = 74
    EQUAL = 75
    LE = 76
    GE = 77
    NOTEQUAL = 78
    AND = 79
    OR = 80
    INC = 81
    DEC = 82
    ADD = 83
    SUB = 84
    MUL = 85
    DIV = 86
    BITAND = 87
    BITOR = 88
    CARET = 89
    MOD = 90
    ADD_ASSIGN = 91
    SUB_ASSIGN = 92
    MUL_ASSIGN = 93
    DIV_ASSIGN = 94
    AND_ASSIGN = 95
    OR_ASSIGN = 96
    XOR_ASSIGN = 97
    MOD_ASSIGN = 98
    LSHIFT_ASSIGN = 99
    RSHIFT_ASSIGN = 100
    URSHIFT_ASSIGN = 101
    Identifier = 102
    AT = 103
    ELLIPSIS = 104
    WS = 105
    COMMENT = 106
    LINE_COMMENT = 107

    tokenNames = [u"<INVALID>", u"'::'", u"'->'", u"'abstract'", u"'assert'",
                  u"'boolean'", u"'break'", u"'byte'", u"'case'", u"'catch'",
                  u"'char'", u"'class'", u"'const'", u"'continue'", u"'default'",
                  u"'do'", u"'double'", u"'else'", u"'enum'", u"'extends'",
                  u"'final'", u"'finally'", u"'float'", u"'for'", u"'if'",
                  u"'goto'", u"'implements'", u"'import'", u"'instanceof'",
                  u"'int'", u"'interface'", u"'long'", u"'native'", u"'new'",
                  u"'package'", u"'private'", u"'protected'", u"'public'",
                  u"'return'", u"'short'", u"'static'", u"'strictfp'",
                  u"'super'", u"'switch'", u"'synchronized'", u"'this'",
                  u"'throw'", u"'throws'", u"'transient'", u"'try'", u"'void'",
                  u"'volatile'", u"'while'", u"IntegerLiteral", u"FloatingPointLiteral",
                  u"BooleanLiteral", u"CharacterLiteral", u"StringLiteral",
                  u"'null'", u"'('", u"')'", u"'{'", u"'}'", u"'['", u"']'",
                  u"';'", u"','", u"'.'", u"'='", u"'>'", u"'<'", u"'!'",
                  u"'~'", u"'?'", u"':'", u"'=='", u"'<='", u"'>='", u"'!='",
                  u"'&&'", u"'||'", u"'++'", u"'--'", u"'+'", u"'-'", u"'*'",
                  u"'/'", u"'&'", u"'|'", u"'^'", u"'%'", u"'+='", u"'-='",
                  u"'*='", u"'/='", u"'&='", u"'|='", u"'^='", u"'%='",
                  u"'<<='", u"'>>='", u"'>>>='", u"Identifier", u"'@'",
                  u"'...'", u"WS", u"COMMENT", u"LINE_COMMENT"]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_modifier = 4
    RULE_classOrInterfaceModifier = 5
    RULE_variableModifier = 6
    RULE_classDeclaration = 7
    RULE_typeParameters = 8
    RULE_typeParameter = 9
    RULE_typeBound = 10
    RULE_enumDeclaration = 11
    RULE_enumConstants = 12
    RULE_enumConstant = 13
    RULE_enumBodyDeclarations = 14
    RULE_interfaceDeclaration = 15
    RULE_typeList = 16
    RULE_classBody = 17
    RULE_interfaceBody = 18
    RULE_classBodyDeclaration = 19
    RULE_memberDeclaration = 20
    RULE_methodDeclaration = 21
    RULE_genericMethodDeclaration = 22
    RULE_constructorDeclaration = 23
    RULE_genericConstructorDeclaration = 24
    RULE_fieldDeclaration = 25
    RULE_interfaceBodyDeclaration = 26
    RULE_interfaceMemberDeclaration = 27
    RULE_constDeclaration = 28
    RULE_constantDeclarator = 29
    RULE_interfaceMethodDeclaration = 30
    RULE_genericInterfaceMethodDeclaration = 31
    RULE_variableDeclarators = 32
    RULE_variableDeclarator = 33
    RULE_variableDeclaratorId = 34
    RULE_variableInitializer = 35
    RULE_arrayInitializer = 36
    RULE_enumConstantName = 37
    RULE_jType = 38
    RULE_classOrInterfaceType = 39
    RULE_primitiveType = 40
    RULE_typeArguments = 41
    RULE_typeArgument = 42
    RULE_qualifiedNameList = 43
    RULE_formalParameters = 44
    RULE_formalParameterList = 45
    RULE_formalParameter = 46
    RULE_lastFormalParameter = 47
    RULE_methodBody = 48
    RULE_constructorBody = 49
    RULE_qualifiedName = 50
    RULE_literal = 51
    RULE_annotation = 52
    RULE_annotationName = 53
    RULE_elementValuePairs = 54
    RULE_elementValuePair = 55
    RULE_elementValue = 56
    RULE_elementValueArrayInitializer = 57
    RULE_annotationTypeDeclaration = 58
    RULE_annotationTypeBody = 59
    RULE_annotationTypeElementDeclaration = 60
    RULE_annotationTypeElementRest = 61
    RULE_annotationMethodOrConstantRest = 62
    RULE_annotationMethodRest = 63
    RULE_annotationConstantRest = 64
    RULE_defaultValue = 65
    RULE_block = 66
    RULE_blockStatement = 67
    RULE_localVariableDeclarationStatement = 68
    RULE_localVariableDeclaration = 69
    RULE_statement = 70
    RULE_catchClause = 71
    RULE_catchType = 72
    RULE_finallyBlock = 73
    RULE_resourceSpecification = 74
    RULE_resources = 75
    RULE_resource = 76
    RULE_switchBlockStatementGroup = 77
    RULE_switchLabel = 78
    RULE_forControl = 79
    RULE_forInit = 80
    RULE_enhancedForControl = 81
    RULE_forUpdate = 82
    RULE_parExpression = 83
    RULE_expressionList = 84
    RULE_statementExpression = 85
    RULE_constantExpression = 86
    RULE_lambdaExpression = 87
    RULE_lambdaParameters = 88
    RULE_inferredFormalParameterList = 89
    RULE_lambdaBody = 90
    RULE_expression = 91
    RULE_primary = 92
    RULE_creator = 93
    RULE_createdName = 94
    RULE_innerCreator = 95
    RULE_arrayCreatorRest = 96
    RULE_classCreatorRest = 97
    RULE_explicitGenericInvocation = 98
    RULE_nonWildcardTypeArguments = 99
    RULE_typeArgumentsOrDiamond = 100
    RULE_nonWildcardTypeArgumentsOrDiamond = 101
    RULE_superSuffix = 102
    RULE_explicitGenericInvocationSuffix = 103
    RULE_arguments = 104

    ruleNames = [u"compilationUnit", u"packageDeclaration", u"importDeclaration",
                 u"typeDeclaration", u"modifier", u"classOrInterfaceModifier",
                 u"variableModifier", u"classDeclaration", u"typeParameters",
                 u"typeParameter", u"typeBound", u"enumDeclaration", u"enumConstants",
                 u"enumConstant", u"enumBodyDeclarations", u"interfaceDeclaration",
                 u"typeList", u"classBody", u"interfaceBody", u"classBodyDeclaration",
                 u"memberDeclaration", u"methodDeclaration", u"genericMethodDeclaration",
                 u"constructorDeclaration", u"genericConstructorDeclaration",
                 u"fieldDeclaration", u"interfaceBodyDeclaration", u"interfaceMemberDeclaration",
                 u"constDeclaration", u"constantDeclarator", u"interfaceMethodDeclaration",
                 u"genericInterfaceMethodDeclaration", u"variableDeclarators",
                 u"variableDeclarator", u"variableDeclaratorId", u"variableInitializer",
                 u"arrayInitializer", u"enumConstantName", u"jType", u"classOrInterfaceType",
                 u"primitiveType", u"typeArguments", u"typeArgument",
                 u"qualifiedNameList", u"formalParameters", u"formalParameterList",
                 u"formalParameter", u"lastFormalParameter", u"methodBody",
                 u"constructorBody", u"qualifiedName", u"literal", u"annotation",
                 u"annotationName", u"elementValuePairs", u"elementValuePair",
                 u"elementValue", u"elementValueArrayInitializer", u"annotationTypeDeclaration",
                 u"annotationTypeBody", u"annotationTypeElementDeclaration",
                 u"annotationTypeElementRest", u"annotationMethodOrConstantRest",
                 u"annotationMethodRest", u"annotationConstantRest", u"defaultValue",
                 u"block", u"blockStatement", u"localVariableDeclarationStatement",
                 u"localVariableDeclaration", u"statement", u"catchClause",
                 u"catchType", u"finallyBlock", u"resourceSpecification",
                 u"resources", u"resource", u"switchBlockStatementGroup",
                 u"switchLabel", u"forControl", u"forInit", u"enhancedForControl",
                 u"forUpdate", u"parExpression", u"expressionList", u"statementExpression",
                 u"constantExpression", u"lambdaExpression", u"lambdaParameters",
                 u"inferredFormalParameterList", u"lambdaBody", u"expression",
                 u"primary", u"creator", u"createdName", u"innerCreator",
                 u"arrayCreatorRest", u"classCreatorRest", u"explicitGenericInvocation",
                 u"nonWildcardTypeArguments", u"typeArgumentsOrDiamond",
                 u"nonWildcardTypeArgumentsOrDiamond", u"superSuffix",
                 u"explicitGenericInvocationSuffix", u"arguments"]

    def __init__(self, input):
        super(JavaParser, self).__init__(input)
        self.checkVersion("4.4")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class CompilationUnitContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.CompilationUnitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeDeclaration(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext, i)

        def importDeclaration(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext, i)

        def EOF(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.EOF, 0)

        def packageDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitCompilationUnit(self)

    def compilationUnit(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
            if la_ == 1:
                self.state = 210
                self.packageDeclaration()

            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.IMPORT:
                self.state = 213
                self.importDeclaration()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << self.ABSTRACT) | (1 << self.CLASS) | (1 << self.ENUM) | (
                    1 << self.FINAL) | (1 << self.INTERFACE) | (1 << self.PRIVATE) | (
                            1 << self.PROTECTED) | (1 << self.PUBLIC) | (1 << self.STATIC) | (
                            1 << self.STRICTFP))) != 0) or _la == JavaParser.SEMI or _la == JavaParser.AT:
                self.state = 219
                self.typeDeclaration()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(self.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.PackageDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def annotation(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitPackageDeclaration(self)

    def packageDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.AT:
                self.state = 227
                self.annotation()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(self.PACKAGE)
            self.state = 234
            self.qualifiedName()
            self.state = 235
            self.match(self.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ImportDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitImportDeclaration(self)

    def importDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(self.IMPORT)
            self.state = 239
            _la = self._input.LA(1)
            if _la == JavaParser.STATIC:
                self.state = 238
                self.match(self.STATIC)

            self.state = 241
            self.qualifiedName()
            self.state = 244
            _la = self._input.LA(1)
            if _la == JavaParser.DOT:
                self.state = 242
                self.match(self.DOT)
                self.state = 243
                self.match(self.MUL)

            self.state = 246
            self.match(self.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext, i)

        def enumDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def classDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext, 0)

        def interfaceDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeDeclaration(self)

    def typeDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 277
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << self.ABSTRACT) | (1 << self.FINAL) | (1 << self.PRIVATE) | (
                        1 << self.PROTECTED) | (1 << self.PUBLIC) | (1 << self.STATIC) | (
                                1 << self.STRICTFP))) != 0) or _la == JavaParser.AT:
                    self.state = 248
                    self.classOrInterfaceModifier()
                    self.state = 253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 254
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << self.ABSTRACT) | (1 << self.FINAL) | (1 << self.PRIVATE) | (
                        1 << self.PROTECTED) | (1 << self.PUBLIC) | (1 << self.STATIC) | (
                                1 << self.STRICTFP))) != 0) or _la == JavaParser.AT:
                    self.state = 255
                    self.classOrInterfaceModifier()
                    self.state = 260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 261
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << self.ABSTRACT) | (1 << self.FINAL) | (1 << self.PRIVATE) | (
                        1 << self.PROTECTED) | (1 << self.PUBLIC) | (1 << self.STATIC) | (
                                1 << self.STRICTFP))) != 0) or _la == JavaParser.AT:
                    self.state = 262
                    self.classOrInterfaceModifier()
                    self.state = 267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 268
                self.interfaceDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 269
                        self.classOrInterfaceModifier()
                    self.state = 274
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

                self.state = 275
                self.annotationTypeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 276
                self.match(self.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ModifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_modifier

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterModifier(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitModifier(self)

    def modifier(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modifier)
        self._la = 0  # Token type
        try:
            self.state = 281
            token = self._input.LA(1)
            if token in [self.ABSTRACT, self.FINAL, self.PRIVATE, self.PROTECTED, self.PUBLIC, self.STATIC,
                         self.STRICTFP, self.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.classOrInterfaceModifier()

            elif token in [self.NATIVE, self.SYNCHRONIZED, self.TRANSIENT, self.VOLATILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << self.NATIVE) | (1 << self.SYNCHRONIZED) | (1 << self.TRANSIENT) | (
                        1 << self.VOLATILE))) != 0)):
                    self._errHandler.recoverInline(self)
                self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceModifierContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ClassOrInterfaceModifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitClassOrInterfaceModifier(self)

    def classOrInterfaceModifier(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classOrInterfaceModifier)
        self._la = 0  # Token type
        try:
            self.state = 285
            token = self._input.LA(1)
            if token in [self.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 283
                self.annotation()

            elif token in [self.ABSTRACT, self.FINAL, self.PRIVATE, self.PROTECTED, self.PUBLIC, self.STATIC,
                           self.STRICTFP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 284
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << self.ABSTRACT) | (1 << self.FINAL) | (1 << self.PRIVATE) | (
                        1 << self.PROTECTED) | (1 << self.PUBLIC) | (1 << self.STATIC) | (
                                1 << self.STRICTFP))) != 0)):
                    self._errHandler.recoverInline(self)
                self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableModifierContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.VariableModifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterVariableModifier(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitVariableModifier(self)

    def variableModifier(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variableModifier)
        try:
            self.state = 289
            token = self._input.LA(1)
            if token in [self.FINAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.match(self.FINAL)

            elif token in [self.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                self.annotation()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ClassDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def classBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassBodyContext, 0)

        def typeList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeListContext, 0)

        def typeParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitClassDeclaration(self)

    def classDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(self.CLASS)
            self.state = 292
            self.match(self.Identifier)
            self.state = 294
            _la = self._input.LA(1)
            if _la == JavaParser.LT:
                self.state = 293
                self.typeParameters()

            self.state = 298
            _la = self._input.LA(1)
            if _la == JavaParser.EXTENDS:
                self.state = 296
                self.match(self.EXTENDS)
                self.state = 297
                self.jType()

            self.state = 302
            _la = self._input.LA(1)
            if _la == JavaParser.IMPLEMENTS:
                self.state = 300
                self.match(self.IMPLEMENTS)
                self.state = 301
                self.typeList()

            self.state = 304
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParametersContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeParameters(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeParameters(self)

    def typeParameters(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeParameters)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(self.LT)
            self.state = 307
            self.typeParameter()
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 308
                self.match(self.COMMA)
                self.state = 309
                self.typeParameter()
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 315
            self.match(self.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def typeBound(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeBoundContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeParameter(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeParameter(self)

    def typeParameter(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(self.Identifier)
            self.state = 320
            _la = self._input.LA(1)
            if _la == JavaParser.EXTENDS:
                self.state = 318
                self.match(self.EXTENDS)
                self.state = 319
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeBoundContext, self).__init__(parent, invokingState)
            self.parser = parser

        def jType(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.JTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.JTypeContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeBound

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeBound(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeBound(self)

    def typeBound(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeBound)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.jType()
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.BITAND:
                self.state = 323
                self.match(self.BITAND)
                self.state = 324
                self.jType()
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.EnumDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enumBodyDeclarations(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext, 0)

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def typeList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeListContext, 0)

        def ENUM(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.ENUM, 0)

        def enumConstants(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitEnumDeclaration(self)

    def enumDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(self.ENUM)
            self.state = 331
            self.match(self.Identifier)
            self.state = 334
            _la = self._input.LA(1)
            if _la == JavaParser.IMPLEMENTS:
                self.state = 332
                self.match(self.IMPLEMENTS)
                self.state = 333
                self.typeList()

            self.state = 336
            self.match(self.LBRACE)
            self.state = 338
            _la = self._input.LA(1)
            if _la == JavaParser.Identifier or _la == JavaParser.AT:
                self.state = 337
                self.enumConstants()

            self.state = 341
            _la = self._input.LA(1)
            if _la == JavaParser.COMMA:
                self.state = 340
                self.match(self.COMMA)

            self.state = 344
            _la = self._input.LA(1)
            if _la == JavaParser.SEMI:
                self.state = 343
                self.enumBodyDeclarations()

            self.state = 346
            self.match(self.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantsContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.EnumConstantsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterEnumConstants(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitEnumConstants(self)

    def enumConstants(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.enumConstant()
            self.state = 353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 349
                    self.match(self.COMMA)
                    self.state = 350
                    self.enumConstant()
                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.EnumConstantContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def classBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassBodyContext, 0)

        def annotation(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def arguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterEnumConstant(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitEnumConstant(self)

    def enumConstant(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstant)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.AT:
                self.state = 356
                self.annotation()
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 362
            self.match(self.Identifier)
            self.state = 364
            _la = self._input.LA(1)
            if _la == JavaParser.LPAREN:
                self.state = 363
                self.arguments()

            self.state = 367
            _la = self._input.LA(1)
            if _la == JavaParser.LBRACE:
                self.state = 366
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumBodyDeclarationsContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.EnumBodyDeclarationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitEnumBodyDeclarations(self)

    def enumBodyDeclarations(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumBodyDeclarations)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(self.SEMI)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ABSTRACT) | (1 << self.BOOLEAN) | (
                    1 << self.BYTE) | (1 << self.CHAR) | (1 << self.CLASS) | (1 << self.DOUBLE) | (1 << self.ENUM) | (
                                                                   1 << self.FINAL) | (1 << self.FLOAT) | (
                                                                   1 << self.INT) | (1 << self.INTERFACE) | (
                                                                   1 << self.LONG) | (
                                                                   1 << self.NATIVE) | (1 << self.PRIVATE) | (
                                                                   1 << self.PROTECTED) | (1 << self.PUBLIC) | (
                                                                   1 << self.SHORT) | (1 << self.STATIC) | (
                                                                   1 << self.STRICTFP) | (1 << self.SYNCHRONIZED) | (
                                                                   1 << self.TRANSIENT) | (1 << self.VOID) | (
                                                                   1 << self.VOLATILE) | (1 << self.LBRACE))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (self.SEMI - 65)) | (1 << (self.LT - 65)) | (1 << (self.Identifier - 65)) | (
                    1 << (self.AT - 65)))) != 0):
                self.state = 370
                self.classBodyDeclaration()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.InterfaceDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def interfaceBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext, 0)

        def typeList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeListContext, 0)

        def typeParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitInterfaceDeclaration(self)

    def interfaceDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(self.INTERFACE)
            self.state = 377
            self.match(self.Identifier)
            self.state = 379
            _la = self._input.LA(1)
            if _la == JavaParser.LT:
                self.state = 378
                self.typeParameters()

            self.state = 383
            _la = self._input.LA(1)
            if _la == JavaParser.EXTENDS:
                self.state = 381
                self.match(self.EXTENDS)
                self.state = 382
                self.typeList()

            self.state = 385
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeListContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def jType(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.JTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.JTypeContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeList

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeList(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeList(self)

    def typeList(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.jType()
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 388
                self.match(self.COMMA)
                self.state = 389
                self.jType()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ClassBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_classBody

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterClassBody(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitClassBody(self)

    def classBody(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(self.LBRACE)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ABSTRACT) | (1 << self.BOOLEAN) | (
                    1 << self.BYTE) | (1 << self.CHAR) | (1 << self.CLASS) | (1 << self.DOUBLE) | (1 << self.ENUM) | (
                                                                   1 << self.FINAL) | (1 << self.FLOAT) | (
                                                                   1 << self.INT) | (1 << self.INTERFACE) | (
                                                                   1 << self.LONG) | (
                                                                   1 << self.NATIVE) | (1 << self.PRIVATE) | (
                                                                   1 << self.PROTECTED) | (1 << self.PUBLIC) | (
                                                                   1 << self.SHORT) | (1 << self.STATIC) | (
                                                                   1 << self.STRICTFP) | (1 << self.SYNCHRONIZED) | (
                                                                   1 << self.TRANSIENT) | (1 << self.VOID) | (
                                                                   1 << self.VOLATILE) | (1 << self.LBRACE))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (self.SEMI - 65)) | (1 << (self.LT - 65)) | (1 << (self.Identifier - 65)) | (
                    1 << (self.AT - 65)))) != 0):
                self.state = 396
                self.classBodyDeclaration()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 402
            self.match(self.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.InterfaceBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def interfaceBodyDeclaration(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitInterfaceBody(self)

    def interfaceBody(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_interfaceBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(self.LBRACE)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ABSTRACT) | (1 << self.BOOLEAN) | (
                    1 << self.BYTE) | (1 << self.CHAR) | (1 << self.CLASS) | (1 << self.DEFAULT) | (
                                                                   1 << self.DOUBLE) | (
                                                                   1 << self.ENUM) | (1 << self.FINAL) | (
                                                                   1 << self.FLOAT) | (1 << self.INT) | (
                                                                   1 << self.INTERFACE) | (
                                                                   1 << self.LONG) | (1 << self.NATIVE) | (
                                                                   1 << self.PRIVATE) | (1 << self.PROTECTED) | (
                                                                   1 << self.PUBLIC) | (1 << self.SHORT) | (
                                                                   1 << self.STATIC) | (1 << self.STRICTFP) | (
                                                                   1 << self.SYNCHRONIZED) | (1 << self.TRANSIENT) | (
                                                                   1 << self.VOID) | (1 << self.VOLATILE))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (self.SEMI - 65)) | (1 << (self.LT - 65)) | (1 << (self.Identifier - 65)) | (
                    1 << (self.AT - 65)))) != 0):
                self.state = 405
                self.interfaceBodyDeclaration()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self.match(self.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ClassBodyDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def memberDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext, 0)

        def modifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def block(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitClassBodyDeclaration(self)

    def classBodyDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classBodyDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 425
            la_ = self._interp.adaptivePredict(self._input, 36, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.match(self.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                _la = self._input.LA(1)
                if _la == JavaParser.STATIC:
                    self.state = 414
                    self.match(self.STATIC)

                self.state = 417
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 35, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 418
                        self.modifier()
                    self.state = 423
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 35, self._ctx)

                self.state = 424
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.MemberDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def genericMethodDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext, 0)

        def methodDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext, 0)

        def enumDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def classDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext, 0)

        def genericConstructorDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext, 0)

        def interfaceDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def constructorDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext, 0)

        def fieldDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitMemberDeclaration(self)

    def memberDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_memberDeclaration)
        try:
            self.state = 436
            la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.genericMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.fieldDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                self.constructorDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 431
                self.genericConstructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                self.interfaceDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 433
                self.annotationTypeDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 434
                self.classDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 435
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.MethodDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def methodBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.MethodBodyContext, 0)

        def qualifiedNameList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext, 0)

        def formalParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.FormalParametersContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitMethodDeclaration(self)

    def methodDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            token = self._input.LA(1)
            if token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.SHORT,
                         self.Identifier]:
                self.state = 438
                self.jType()

            elif token in [self.VOID]:
                self.state = 439
                self.match(self.VOID)

            else:
                raise NoViableAltException(self)

            self.state = 442
            self.match(self.Identifier)
            self.state = 443
            self.formalParameters()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.LBRACK:
                self.state = 444
                self.match(self.LBRACK)
                self.state = 445
                self.match(self.RBRACK)
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 453
            _la = self._input.LA(1)
            if _la == JavaParser.THROWS:
                self.state = 451
                self.match(self.THROWS)
                self.state = 452
                self.qualifiedNameList()

            self.state = 457
            token = self._input.LA(1)
            if token in [self.LBRACE]:
                self.state = 455
                self.methodBody()

            elif token in [self.SEMI]:
                self.state = 456
                self.match(self.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericMethodDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.GenericMethodDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext, 0)

        def typeParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_genericMethodDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitGenericMethodDeclaration(self)

    def genericMethodDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.typeParameters()
            self.state = 460
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ConstructorDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def constructorBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ConstructorBodyContext, 0)

        def qualifiedNameList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext, 0)

        def formalParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.FormalParametersContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitConstructorDeclaration(self)

    def constructorDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constructorDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(self.Identifier)
            self.state = 463
            self.formalParameters()
            self.state = 466
            _la = self._input.LA(1)
            if _la == JavaParser.THROWS:
                self.state = 464
                self.match(self.THROWS)
                self.state = 465
                self.qualifiedNameList()

            self.state = 468
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericConstructorDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.GenericConstructorDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def constructorDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitGenericConstructorDeclaration(self)

    def genericConstructorDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.typeParameters()
            self.state = 471
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.FieldDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitFieldDeclaration(self)

    def fieldDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.jType()
            self.state = 474
            self.variableDeclarators()
            self.state = 475
            self.match(self.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.InterfaceBodyDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def modifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def interfaceMemberDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitInterfaceBodyDeclaration(self)

    def interfaceBodyDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 485
            token = self._input.LA(1)
            if token in [self.ABSTRACT, self.BOOLEAN, self.BYTE, self.CHAR, self.CLASS, self.DEFAULT, self.DOUBLE,
                         self.ENUM, self.FINAL, self.FLOAT, self.INT, self.INTERFACE, self.LONG, self.NATIVE,
                         self.PRIVATE, self.PROTECTED, self.PUBLIC, self.SHORT, self.STATIC, self.STRICTFP,
                         self.SYNCHRONIZED, self.TRANSIENT, self.VOID, self.VOLATILE, self.LT, self.Identifier,
                         self.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 43, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 477
                        self.modifier()
                    self.state = 482
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 43, self._ctx)

                self.state = 483
                self.interfaceMemberDeclaration()

            elif token in [self.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.match(self.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMemberDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.InterfaceMemberDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enumDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def classDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def genericInterfaceMethodDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext, 0)

        def interfaceDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def constDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext, 0)

        def interfaceMethodDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitInterfaceMemberDeclaration(self)

    def interfaceMemberDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 494
            la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.constDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 490
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 491
                self.annotationTypeDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 492
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 493
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ConstDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constantDeclarator(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext, i)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitConstDeclaration(self)

    def constDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_constDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.jType()
            self.state = 497
            self.constantDeclarator()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 498
                self.match(self.COMMA)
                self.state = 499
                self.constantDeclarator()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 505
            self.match(self.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclaratorContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ConstantDeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def variableInitializer(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_constantDeclarator

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitConstantDeclarator(self)

    def constantDeclarator(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_constantDeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(self.Identifier)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.LBRACK:
                self.state = 508
                self.match(self.LBRACK)
                self.state = 509
                self.match(self.RBRACK)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 515
            self.match(self.ASSIGN)
            self.state = 516
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.InterfaceMethodDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def methodDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext, 0)

        def qualifiedNameList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext, 0)

        def formalParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.FormalParametersContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitInterfaceMethodDeclaration(self)

    def interfaceMethodDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_interfaceMethodDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 539
            token = self._input.LA(1)
            if token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.SHORT,
                         self.VOID, self.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                token = self._input.LA(1)
                if token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG,
                             self.SHORT, self.Identifier]:
                    self.state = 518
                    self.jType()

                elif token in [self.VOID]:
                    self.state = 519
                    self.match(self.VOID)

                else:
                    raise NoViableAltException(self)

                self.state = 522
                self.match(self.Identifier)
                self.state = 523
                self.formalParameters()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == JavaParser.LBRACK:
                    self.state = 524
                    self.match(self.LBRACK)
                    self.state = 525
                    self.match(self.RBRACK)
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 533
                _la = self._input.LA(1)
                if _la == JavaParser.THROWS:
                    self.state = 531
                    self.match(self.THROWS)
                    self.state = 532
                    self.qualifiedNameList()

                self.state = 535
                self.match(self.SEMI)

            elif token in [self.DEFAULT, self.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                _la = self._input.LA(1)
                if not (_la == JavaParser.DEFAULT or _la == JavaParser.STATIC):
                    self._errHandler.recoverInline(self)
                self.consume()
                self.state = 538
                self.methodDeclaration()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.GenericInterfaceMethodDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def interfaceMethodDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitGenericInterfaceMethodDeclaration(self)

    def genericInterfaceMethodDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_genericInterfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.typeParameters()
            self.state = 542
            self.interfaceMethodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorsContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.VariableDeclaratorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitVariableDeclarators(self)

    def variableDeclarators(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_variableDeclarators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.variableDeclarator()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 545
                self.match(self.COMMA)
                self.state = 546
                self.variableDeclarator()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.VariableDeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext, 0)

        def variableDeclaratorId(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitVariableDeclarator(self)

    def variableDeclarator(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.variableDeclaratorId()
            self.state = 555
            _la = self._input.LA(1)
            if _la == JavaParser.ASSIGN:
                self.state = 553
                self.match(self.ASSIGN)
                self.state = 554
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorIdContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.VariableDeclaratorIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitVariableDeclaratorId(self)

    def variableDeclaratorId(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variableDeclaratorId)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(self.Identifier)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.LBRACK:
                self.state = 558
                self.match(self.LBRACK)
                self.state = 559
                self.match(self.RBRACK)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.VariableInitializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext, 0)

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitVariableInitializer(self)

    def variableInitializer(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableInitializer)
        try:
            self.state = 567
            token = self._input.LA(1)
            if token in [self.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.arrayInitializer()

            elif token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.NEW,
                           self.SHORT, self.SUPER, self.THIS, self.VOID, self.IntegerLiteral, self.FloatingPointLiteral,
                           self.BooleanLiteral, self.CharacterLiteral, self.StringLiteral, self.NullLiteral,
                           self.LPAREN, self.LT, self.BANG, self.TILDE, self.INC, self.DEC, self.ADD, self.SUB,
                           self.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.expression(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayInitializerContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ArrayInitializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitArrayInitializer(self)

    def arrayInitializer(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_arrayInitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(self.LBRACE)
            self.state = 581
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (1 << self.CHAR) | (
                    1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (1 << self.LONG) | (1 << self.NEW) | (
                                                                1 << self.SHORT) | (1 << self.SUPER) | (
                                                                1 << self.THIS) | (1 << self.VOID) | (
                                                                1 << self.IntegerLiteral) | (
                                                                1 << self.FloatingPointLiteral) | (
                                                                1 << self.BooleanLiteral) | (
                                                                1 << self.CharacterLiteral) | (
                                                                1 << self.StringLiteral) | (1 << self.NullLiteral) | (
                                                                1 << self.LPAREN) | (1 << self.LBRACE))) != 0) or (
                    (((_la - 70)) & ~0x3f) == 0 and (
                    (1 << (_la - 70)) & ((1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (1 << (self.TILDE - 70)) | (
                    1 << (self.INC - 70)) | (1 << (self.DEC - 70)) | (1 << (self.ADD - 70)) | (1 << (self.SUB - 70)) | (
                                                 1 << (self.Identifier - 70)))) != 0):
                self.state = 570
                self.variableInitializer()
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 56, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 571
                        self.match(self.COMMA)
                        self.state = 572
                        self.variableInitializer()
                    self.state = 577
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 56, self._ctx)

                self.state = 579
                _la = self._input.LA(1)
                if _la == JavaParser.COMMA:
                    self.state = 578
                    self.match(self.COMMA)

            self.state = 583
            self.match(self.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantNameContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.EnumConstantNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_enumConstantName

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterEnumConstantName(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitEnumConstantName(self)

    def enumConstantName(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.EnumConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_enumConstantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(self.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JTypeContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.JTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext, 0)

        def classOrInterfaceType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_jType

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterJType(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitJType(self)

    def jType(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.JTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_jType)
        try:
            self.state = 603
            token = self._input.LA(1)
            if token in [self.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.classOrInterfaceType()
                self.state = 592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 588
                        self.match(self.LBRACK)
                        self.state = 589
                        self.match(self.RBRACK)
                    self.state = 594
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)


            elif token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG,
                           self.SHORT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.primitiveType()
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 596
                        self.match(self.LBRACK)
                        self.state = 597
                        self.match(self.RBRACK)
                    self.state = 602
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceTypeContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ClassOrInterfaceTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def typeArguments(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitClassOrInterfaceType(self)

    def classOrInterfaceType(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(self.Identifier)
            self.state = 607
            la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
            if la_ == 1:
                self.state = 606
                self.typeArguments()

            self.state = 616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 609
                    self.match(self.DOT)
                    self.state = 610
                    self.match(self.Identifier)
                    self.state = 612
                    la_ = self._interp.adaptivePredict(self._input, 63, self._ctx)
                    if la_ == 1:
                        self.state = 611
                        self.typeArguments()

                self.state = 618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.PrimitiveTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitPrimitiveType(self)

    def primitiveType(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_primitiveType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << self.BOOLEAN) | (1 << self.BYTE) | (1 << self.CHAR) | (
                    1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (1 << self.LONG) | (
                            1 << self.SHORT))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeArgumentsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeArgument(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeArguments(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeArguments(self)

    def typeArguments(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeArguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(self.LT)
            self.state = 622
            self.typeArgument()
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 623
                self.match(self.COMMA)
                self.state = 624
                self.typeArgument()
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 630
            self.match(self.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeArgumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeArgument(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeArgument(self)

    def typeArgument(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_typeArgument)
        self._la = 0  # Token type
        try:
            self.state = 638
            token = self._input.LA(1)
            if token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.SHORT,
                         self.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.jType()

            elif token in [self.QUESTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.match(self.QUESTION)
                self.state = 636
                _la = self._input.LA(1)
                if _la == JavaParser.EXTENDS or _la == JavaParser.SUPER:
                    self.state = 634
                    _la = self._input.LA(1)
                    if not (_la == JavaParser.EXTENDS or _la == JavaParser.SUPER):
                        self._errHandler.recoverInline(self)
                    self.consume()
                    self.state = 635
                    self.jType()



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameListContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.QualifiedNameListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitQualifiedNameList(self)

    def qualifiedNameList(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_qualifiedNameList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.qualifiedName()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 641
                self.match(self.COMMA)
                self.state = 642
                self.qualifiedName()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParametersContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.FormalParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def formalParameterList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterFormalParameters(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitFormalParameters(self)

    def formalParameters(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_formalParameters)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(self.LPAREN)
            self.state = 650
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (1 << self.CHAR) | (
                    1 << self.DOUBLE) | (1 << self.FINAL) | (1 << self.FLOAT) | (1 << self.INT) | (1 << self.LONG) | (
                                                                1 << self.SHORT))) != 0) or _la == JavaParser.Identifier or _la == JavaParser.AT:
                self.state = 649
                self.formalParameterList()

            self.state = 652
            self.match(self.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.FormalParameterListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lastFormalParameter(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext, 0)

        def formalParameter(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitFormalParameterList(self)

    def formalParameterList(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_formalParameterList)
        self._la = 0  # Token type
        try:
            self.state = 667
            la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.formalParameter()
                self.state = 659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 70, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 655
                        self.match(self.COMMA)
                        self.state = 656
                        self.formalParameter()
                    self.state = 661
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 70, self._ctx)

                self.state = 664
                _la = self._input.LA(1)
                if _la == JavaParser.COMMA:
                    self.state = 662
                    self.match(self.COMMA)
                    self.state = 663
                    self.lastFormalParameter()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.FormalParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableModifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def variableDeclaratorId(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterFormalParameter(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitFormalParameter(self)

    def formalParameter(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_formalParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.FINAL or _la == JavaParser.AT:
                self.state = 669
                self.variableModifier()
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 675
            self.jType()
            self.state = 676
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LastFormalParameterContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.LastFormalParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableModifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def variableDeclaratorId(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitLastFormalParameter(self)

    def lastFormalParameter(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lastFormalParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.FINAL or _la == JavaParser.AT:
                self.state = 678
                self.variableModifier()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 684
            self.jType()
            self.state = 685
            self.match(self.ELLIPSIS)
            self.state = 686
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.MethodBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_methodBody

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterMethodBody(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitMethodBody(self)

    def methodBody(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_methodBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorBodyContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ConstructorBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_constructorBody

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterConstructorBody(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitConstructorBody(self)

    def constructorBody(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ConstructorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_constructorBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.QualifiedNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterQualifiedName(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitQualifiedName(self)

    def qualifiedName(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(self.Identifier)
            self.state = 697
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 693
                    self.match(self.DOT)
                    self.state = 694
                    self.match(self.Identifier)
                self.state = 699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.LiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.StringLiteral, 0)

        def IntegerLiteral(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.IntegerLiteral, 0)

        def FloatingPointLiteral(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.FloatingPointLiteral, 0)

        def BooleanLiteral(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.BooleanLiteral, 0)

        def CharacterLiteral(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.CharacterLiteral, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_literal

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterLiteral(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitLiteral(self)

    def literal(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_literal)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << self.IntegerLiteral) | (1 << self.FloatingPointLiteral) | (
                    1 << self.BooleanLiteral) | (1 << self.CharacterLiteral) | (1 << self.StringLiteral) | (
                            1 << self.NullLiteral))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementValuePairs(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext, 0)

        def annotationName(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationNameContext, 0)

        def elementValue(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ElementValueContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotation

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotation(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotation(self)

    def annotation(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_annotation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(self.AT)
            self.state = 703
            self.annotationName()
            self.state = 710
            _la = self._input.LA(1)
            if _la == JavaParser.LPAREN:
                self.state = 704
                self.match(self.LPAREN)
                self.state = 707
                la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                if la_ == 1:
                    self.state = 705
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 706
                    self.elementValue()

                self.state = 709
                self.match(self.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationNameContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationName

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationName(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationName(self)

    def annotationName(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_annotationName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairsContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ElementValuePairsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitElementValuePairs(self)

    def elementValuePairs(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_elementValuePairs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.elementValuePair()
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 715
                self.match(self.COMMA)
                self.state = 716
                self.elementValuePair()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ElementValuePairContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def elementValue(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ElementValueContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterElementValuePair(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitElementValuePair(self)

    def elementValuePair(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(self.Identifier)
            self.state = 723
            self.match(self.ASSIGN)
            self.state = 724
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ElementValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementValueArrayInitializer(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext, 0)

        def annotation(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationContext, 0)

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_elementValue

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterElementValue(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitElementValue(self)

    def elementValue(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_elementValue)
        try:
            self.state = 729
            token = self._input.LA(1)
            if token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.NEW,
                         self.SHORT, self.SUPER, self.THIS, self.VOID, self.IntegerLiteral, self.FloatingPointLiteral,
                         self.BooleanLiteral, self.CharacterLiteral, self.StringLiteral, self.NullLiteral, self.LPAREN,
                         self.LT, self.BANG, self.TILDE, self.INC, self.DEC, self.ADD, self.SUB, self.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.expression(0)

            elif token in [self.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.annotation()

            elif token in [self.LBRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 728
                self.elementValueArrayInitializer()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueArrayInitializerContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ElementValueArrayInitializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementValue(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitElementValueArrayInitializer(self)

    def elementValueArrayInitializer(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_elementValueArrayInitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(self.LBRACE)
            self.state = 740
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (1 << self.CHAR) | (
                    1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (1 << self.LONG) | (1 << self.NEW) | (
                                                                1 << self.SHORT) | (1 << self.SUPER) | (
                                                                1 << self.THIS) | (1 << self.VOID) | (
                                                                1 << self.IntegerLiteral) | (
                                                                1 << self.FloatingPointLiteral) | (
                                                                1 << self.BooleanLiteral) | (
                                                                1 << self.CharacterLiteral) | (
                                                                1 << self.StringLiteral) | (1 << self.NullLiteral) | (
                                                                1 << self.LPAREN) | (1 << self.LBRACE))) != 0) or (
                    (((_la - 70)) & ~0x3f) == 0 and (
                    (1 << (_la - 70)) & ((1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (1 << (self.TILDE - 70)) | (
                    1 << (self.INC - 70)) | (1 << (self.DEC - 70)) | (1 << (self.ADD - 70)) | (1 << (self.SUB - 70)) | (
                                                 1 << (self.Identifier - 70)) | (1 << (self.AT - 70)))) != 0):
                self.state = 732
                self.elementValue()
                self.state = 737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 733
                        self.match(self.COMMA)
                        self.state = 734
                        self.elementValue()
                    self.state = 739
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)

            self.state = 743
            _la = self._input.LA(1)
            if _la == JavaParser.COMMA:
                self.state = 742
                self.match(self.COMMA)

            self.state = 745
            self.match(self.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationTypeDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def annotationTypeBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationTypeDeclaration(self)

    def annotationTypeDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(self.AT)
            self.state = 748
            self.match(self.INTERFACE)
            self.state = 749
            self.match(self.Identifier)
            self.state = 750
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeBodyContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationTypeBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementDeclaration(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationTypeBody(self)

    def annotationTypeBody(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_annotationTypeBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(self.LBRACE)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ABSTRACT) | (1 << self.BOOLEAN) | (
                    1 << self.BYTE) | (1 << self.CHAR) | (1 << self.CLASS) | (1 << self.DOUBLE) | (1 << self.ENUM) | (
                                                                   1 << self.FINAL) | (1 << self.FLOAT) | (
                                                                   1 << self.INT) | (1 << self.INTERFACE) | (
                                                                   1 << self.LONG) | (
                                                                   1 << self.NATIVE) | (1 << self.PRIVATE) | (
                                                                   1 << self.PROTECTED) | (1 << self.PUBLIC) | (
                                                                   1 << self.SHORT) | (1 << self.STATIC) | (
                                                                   1 << self.STRICTFP) | (1 << self.SYNCHRONIZED) | (
                                                                   1 << self.TRANSIENT) | (
                                                                   1 << self.VOLATILE))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and (
                    (1 << (_la - 65)) & (
                    (1 << (self.SEMI - 65)) | (1 << (self.Identifier - 65)) | (1 << (self.AT - 65)))) != 0):
                self.state = 753
                self.annotationTypeElementDeclaration()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 759
            self.match(self.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationTypeElementDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext, 0)

        def modifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationTypeElementDeclaration(self)

    def annotationTypeElementDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 769
            token = self._input.LA(1)
            if token in [self.ABSTRACT, self.BOOLEAN, self.BYTE, self.CHAR, self.CLASS, self.DOUBLE, self.ENUM,
                         self.FINAL, self.FLOAT, self.INT, self.INTERFACE, self.LONG, self.NATIVE, self.PRIVATE,
                         self.PROTECTED, self.PUBLIC, self.SHORT, self.STATIC, self.STRICTFP, self.SYNCHRONIZED,
                         self.TRANSIENT, self.VOLATILE, self.Identifier, self.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 761
                        self.modifier()
                    self.state = 766
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)

                self.state = 767
                self.annotationTypeElementRest()

            elif token in [self.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.match(self.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementRestContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationTypeElementRestContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enumDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def classDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def annotationMethodOrConstantRest(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext, 0)

        def annotationTypeDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext, 0)

        def interfaceDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationTypeElementRest(self)

    def annotationTypeElementRest(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_annotationTypeElementRest)
        try:
            self.state = 791
            token = self._input.LA(1)
            if token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.SHORT,
                         self.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.jType()
                self.state = 772
                self.annotationMethodOrConstantRest()
                self.state = 773
                self.match(self.SEMI)

            elif token in [self.CLASS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.classDeclaration()
                self.state = 777
                la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
                if la_ == 1:
                    self.state = 776
                    self.match(self.SEMI)



            elif token in [self.INTERFACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 779
                self.interfaceDeclaration()
                self.state = 781
                la_ = self._interp.adaptivePredict(self._input, 87, self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.match(self.SEMI)



            elif token in [self.ENUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.enumDeclaration()
                self.state = 785
                la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
                if la_ == 1:
                    self.state = 784
                    self.match(self.SEMI)



            elif token in [self.AT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 787
                self.annotationTypeDeclaration()
                self.state = 789
                la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
                if la_ == 1:
                    self.state = 788
                    self.match(self.SEMI)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationMethodOrConstantRestContext, self).__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext, 0)

        def annotationConstantRest(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationMethodOrConstantRest(self)

    def annotationMethodOrConstantRest(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 795
            la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodRestContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationMethodRestContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def defaultValue(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.DefaultValueContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationMethodRest

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationMethodRest(self)

    def annotationMethodRest(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationMethodRest)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(self.Identifier)
            self.state = 798
            self.match(self.LPAREN)
            self.state = 799
            self.match(self.RPAREN)
            self.state = 801
            _la = self._input.LA(1)
            if _la == JavaParser.DEFAULT:
                self.state = 800
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationConstantRestContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.AnnotationConstantRestContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_annotationConstantRest

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitAnnotationConstantRest(self)

    def annotationConstantRest(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.DefaultValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementValue(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ElementValueContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterDefaultValue(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitDefaultValue(self)

    def defaultValue(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(self.DEFAULT)
            self.state = 806
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.BlockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_block

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterBlock(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitBlock(self)

    def block(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(self.LBRACE)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ABSTRACT) | (1 << self.ASSERT) | (
                    1 << self.BOOLEAN) | (1 << self.BREAK) | (1 << self.BYTE) | (1 << self.CHAR) | (1 << self.CLASS) | (
                                                                   1 << self.CONTINUE) | (1 << self.DO) | (
                                                                   1 << self.DOUBLE) | (1 << self.ENUM) | (
                                                                   1 << self.FINAL) | (
                                                                   1 << self.FLOAT) | (1 << self.FOR) | (
                                                                   1 << self.IF) | (1 << self.INT) | (
                                                                   1 << self.INTERFACE) | (
                                                                   1 << self.LONG) | (1 << self.NEW) | (
                                                                   1 << self.PRIVATE) | (1 << self.PROTECTED) | (
                                                                   1 << self.PUBLIC) | (
                                                                   1 << self.RETURN) | (1 << self.SHORT) | (
                                                                   1 << self.STATIC) | (1 << self.STRICTFP) | (
                                                                   1 << self.SUPER) | (1 << self.SWITCH) | (
                                                                   1 << self.SYNCHRONIZED) | (1 << self.THIS) | (
                                                                   1 << self.THROW) | (1 << self.TRY) | (
                                                                   1 << self.VOID) | (1 << self.WHILE) | (
                                                                   1 << self.IntegerLiteral) | (
                                                                   1 << self.FloatingPointLiteral) | (
                                                                   1 << self.BooleanLiteral) | (
                                                                   1 << self.CharacterLiteral) | (
                                                                   1 << self.StringLiteral) | (
                                                                   1 << self.NullLiteral) | (
                                                                   1 << self.LPAREN) | (1 << self.LBRACE))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and (
                    (1 << (_la - 65)) & ((1 << (self.SEMI - 65)) | (1 << (self.LT - 65)) | (1 << (self.BANG - 65)) | (
                    1 << (self.TILDE - 65)) | (1 << (self.INC - 65)) | (1 << (self.DEC - 65)) | (
                                                 1 << (self.ADD - 65)) | (
                                                 1 << (self.SUB - 65)) | (1 << (self.Identifier - 65)) | (
                                                 1 << (self.AT - 65)))) != 0):
                self.state = 809
                self.blockStatement()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 815
            self.match(self.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.BlockStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeDeclarationContext, 0)

        def statement(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.StatementContext, 0)

        def localVariableDeclarationStatement(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationStatementContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterBlockStatement(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitBlockStatement(self)

    def blockStatement(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_blockStatement)
        try:
            self.state = 820
            la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 817
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 818
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 819
                self.typeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationStatementContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.LocalVariableDeclarationStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitLocalVariableDeclarationStatement(self)

    def localVariableDeclarationStatement(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.localVariableDeclaration()
            self.state = 823
            self.match(self.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.LocalVariableDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableModifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def variableDeclarators(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitLocalVariableDeclaration(self)

    def localVariableDeclaration(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_localVariableDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.FINAL or _la == JavaParser.AT:
                self.state = 825
                self.variableModifier()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 831
            self.jType()
            self.state = 832
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.StatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext, i)

        def statementExpression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.StatementExpressionContext, 0)

        def statement(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext, i)

        def parExpression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ParExpressionContext, 0)

        def catchClause(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext, i)

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def finallyBlock(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext, 0)

        def switchBlockStatementGroup(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext, i)

        def forControl(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ForControlContext, 0)

        def ASSERT(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.ASSERT, 0)

        def resourceSpecification(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext, 0)

        def block(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def switchLabel(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_statement

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterStatement(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitStatement(self)

    def statement(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 938
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.match(self.ASSERT)
                self.state = 836
                self.expression(0)
                self.state = 839
                _la = self._input.LA(1)
                if _la == JavaParser.COLON:
                    self.state = 837
                    self.match(self.COLON)
                    self.state = 838
                    self.expression(0)

                self.state = 841
                self.match(self.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 843
                self.match(self.IF)
                self.state = 844
                self.parExpression()
                self.state = 845
                self.statement()
                self.state = 848
                la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
                if la_ == 1:
                    self.state = 846
                    self.match(self.ELSE)
                    self.state = 847
                    self.statement()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 850
                self.match(self.FOR)
                self.state = 851
                self.match(self.LPAREN)
                self.state = 852
                self.forControl()
                self.state = 853
                self.match(self.RPAREN)
                self.state = 854
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 856
                self.match(self.WHILE)
                self.state = 857
                self.parExpression()
                self.state = 858
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 860
                self.match(self.DO)
                self.state = 861
                self.statement()
                self.state = 862
                self.match(self.WHILE)
                self.state = 863
                self.parExpression()
                self.state = 864
                self.match(self.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 866
                self.match(self.TRY)
                self.state = 867
                self.block()
                self.state = 877
                token = self._input.LA(1)
                if token in [self.CATCH]:
                    self.state = 869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 868
                        self.catchClause()
                        self.state = 871
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == JavaParser.CATCH):
                            break

                    self.state = 874
                    _la = self._input.LA(1)
                    if _la == JavaParser.FINALLY:
                        self.state = 873
                        self.finallyBlock()



                elif token in [self.FINALLY]:
                    self.state = 876
                    self.finallyBlock()

                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 879
                self.match(self.TRY)
                self.state = 880
                self.resourceSpecification()
                self.state = 881
                self.block()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == JavaParser.CATCH:
                    self.state = 882
                    self.catchClause()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 889
                _la = self._input.LA(1)
                if _la == JavaParser.FINALLY:
                    self.state = 888
                    self.finallyBlock()

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 891
                self.match(self.SWITCH)
                self.state = 892
                self.parExpression()
                self.state = 893
                self.match(self.LBRACE)
                self.state = 897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 894
                        self.switchBlockStatementGroup()
                    self.state = 899
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)

                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == JavaParser.CASE or _la == JavaParser.DEFAULT:
                    self.state = 900
                    self.switchLabel()
                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 906
                self.match(self.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 908
                self.match(self.SYNCHRONIZED)
                self.state = 909
                self.parExpression()
                self.state = 910
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 912
                self.match(self.RETURN)
                self.state = 914
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (
                        1 << self.CHAR) | (1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (
                                                                    1 << self.LONG) | (
                                                                    1 << self.NEW) | (1 << self.SHORT) | (
                                                                    1 << self.SUPER) | (1 << self.THIS) | (
                                                                    1 << self.VOID) | (
                                                                    1 << self.IntegerLiteral) | (
                                                                    1 << self.FloatingPointLiteral) | (
                                                                    1 << self.BooleanLiteral) | (
                                                                    1 << self.CharacterLiteral) | (
                                                                    1 << self.StringLiteral) | (
                                                                    1 << self.NullLiteral) | (
                                                                    1 << self.LPAREN))) != 0) or (
                        (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & (
                        (1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (
                        1 << (self.TILDE - 70)) | (1 << (self.INC - 70)) | (1 << (self.DEC - 70)) | (
                                1 << (self.ADD - 70)) | (1 << (self.SUB - 70)) | (1 << (self.Identifier - 70)))) != 0):
                    self.state = 913
                    self.expression(0)

                self.state = 916
                self.match(self.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 917
                self.match(self.THROW)
                self.state = 918
                self.expression(0)
                self.state = 919
                self.match(self.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 921
                self.match(self.BREAK)
                self.state = 923
                _la = self._input.LA(1)
                if _la == JavaParser.Identifier:
                    self.state = 922
                    self.match(self.Identifier)

                self.state = 925
                self.match(self.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 926
                self.match(self.CONTINUE)
                self.state = 928
                _la = self._input.LA(1)
                if _la == JavaParser.Identifier:
                    self.state = 927
                    self.match(self.Identifier)

                self.state = 930
                self.match(self.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 931
                self.match(self.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 932
                self.statementExpression()
                self.state = 933
                self.match(self.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 935
                self.match(self.Identifier)
                self.state = 936
                self.match(self.COLON)
                self.state = 937
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.CatchClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def catchType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.CatchTypeContext, 0)

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def variableModifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def block(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_catchClause

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterCatchClause(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitCatchClause(self)

    def catchClause(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_catchClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(self.CATCH)
            self.state = 941
            self.match(self.LPAREN)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.FINAL or _la == JavaParser.AT:
                self.state = 942
                self.variableModifier()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self.catchType()
            self.state = 949
            self.match(self.Identifier)
            self.state = 950
            self.match(self.RPAREN)
            self.state = 951
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchTypeContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.CatchTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_catchType

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterCatchType(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitCatchType(self)

    def catchType(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_catchType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.qualifiedName()
            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.BITOR:
                self.state = 954
                self.match(self.BITOR)
                self.state = 955
                self.qualifiedName()
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyBlockContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.FinallyBlockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitFinallyBlock(self)

    def finallyBlock(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(self.FINALLY)
            self.state = 962
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceSpecificationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ResourceSpecificationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def resources(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ResourcesContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitResourceSpecification(self)

    def resourceSpecification(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_resourceSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(self.LPAREN)
            self.state = 965
            self.resources()
            self.state = 967
            _la = self._input.LA(1)
            if _la == JavaParser.SEMI:
                self.state = 966
                self.match(self.SEMI)

            self.state = 969
            self.match(self.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourcesContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ResourcesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_resources

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterResources(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitResources(self)

    def resources(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.resource()
            self.state = 976
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 112, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 972
                    self.match(self.SEMI)
                    self.state = 973
                    self.resource()
                self.state = 978
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 112, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ResourceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableModifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def classOrInterfaceType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext, 0)

        def variableDeclaratorId(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_resource

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterResource(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitResource(self)

    def resource(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_resource)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.FINAL or _la == JavaParser.AT:
                self.state = 979
                self.variableModifier()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 985
            self.classOrInterfaceType()
            self.state = 986
            self.variableDeclaratorId()
            self.state = 987
            self.match(self.ASSIGN)
            self.state = 988
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockStatementGroupContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.SwitchBlockStatementGroupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext, i)

        def switchLabel(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitSwitchBlockStatementGroup(self)

    def switchBlockStatementGroup(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_switchBlockStatementGroup)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 990
                self.switchLabel()
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == JavaParser.CASE or _la == JavaParser.DEFAULT):
                    break

            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 995
                self.blockStatement()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ABSTRACT) | (1 << self.ASSERT) | (
                        1 << self.BOOLEAN) | (1 << self.BREAK) | (1 << self.BYTE) | (1 << self.CHAR) | (
                                                                         1 << self.CLASS) | (
                                                                         1 << self.CONTINUE) | (1 << self.DO) | (
                                                                         1 << self.DOUBLE) | (1 << self.ENUM) | (
                                                                         1 << self.FINAL) | (
                                                                         1 << self.FLOAT) | (1 << self.FOR) | (
                                                                         1 << self.IF) | (1 << self.INT) | (
                                                                         1 << self.INTERFACE) | (
                                                                         1 << self.LONG) | (1 << self.NEW) | (
                                                                         1 << self.PRIVATE) | (1 << self.PROTECTED) | (
                                                                         1 << self.PUBLIC) | (1 << self.RETURN) | (
                                                                         1 << self.SHORT) | (1 << self.STATIC) | (
                                                                         1 << self.STRICTFP) | (1 << self.SUPER) | (
                                                                         1 << self.SWITCH) | (
                                                                         1 << self.SYNCHRONIZED) | (
                                                                         1 << self.THIS) | (1 << self.THROW) | (
                                                                         1 << self.TRY) | (1 << self.VOID) | (
                                                                         1 << self.WHILE) | (
                                                                         1 << self.IntegerLiteral) | (
                                                                         1 << self.FloatingPointLiteral) | (
                                                                         1 << self.BooleanLiteral) | (
                                                                         1 << self.CharacterLiteral) | (
                                                                         1 << self.StringLiteral) | (
                                                                         1 << self.NullLiteral) | (
                                                                         1 << self.LPAREN) | (
                                                                         1 << self.LBRACE))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and (
                                (1 << (_la - 65)) & (
                                (1 << (self.SEMI - 65)) | (1 << (self.LT - 65)) | (1 << (self.BANG - 65)) | (
                                1 << (self.TILDE - 65)) | (1 << (self.INC - 65)) | (1 << (self.DEC - 65)) | (
                                        1 << (self.ADD - 65)) | (1 << (self.SUB - 65)) | (
                                        1 << (self.Identifier - 65)) | (
                                        1 << (self.AT - 65)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabelContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.SwitchLabelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ConstantExpressionContext, 0)

        def enumConstantName(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnumConstantNameContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitSwitchLabel(self)

    def switchLabel(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_switchLabel)
        try:
            self.state = 1010
            la_ = self._interp.adaptivePredict(self._input, 116, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.match(self.CASE)
                self.state = 1001
                self.constantExpression()
                self.state = 1002
                self.match(self.COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.match(self.CASE)
                self.state = 1005
                self.enumConstantName()
                self.state = 1006
                self.match(self.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1008
                self.match(self.DEFAULT)
                self.state = 1009
                self.match(self.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForControlContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ForControlContext, self).__init__(parent, invokingState)
            self.parser = parser

        def forUpdate(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ForUpdateContext, 0)

        def forInit(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ForInitContext, 0)

        def enhancedForControl(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext, 0)

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_forControl

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterForControl(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitForControl(self)

    def forControl(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forControl)
        self._la = 0  # Token type
        try:
            self.state = 1024
            la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1012
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (
                        1 << self.CHAR) | (1 << self.DOUBLE) | (1 << self.FINAL) | (1 << self.FLOAT) | (
                                                                    1 << self.INT) | (
                                                                    1 << self.LONG) | (1 << self.NEW) | (
                                                                    1 << self.SHORT) | (1 << self.SUPER) | (
                                                                    1 << self.THIS) | (
                                                                    1 << self.VOID) | (1 << self.IntegerLiteral) | (
                                                                    1 << self.FloatingPointLiteral) | (
                                                                    1 << self.BooleanLiteral) | (
                                                                    1 << self.CharacterLiteral) | (
                                                                    1 << self.StringLiteral) | (
                                                                    1 << self.NullLiteral) | (
                                                                    1 << self.LPAREN))) != 0) or (
                        (((_la - 70)) & ~0x3f) == 0 and (
                        (1 << (_la - 70)) & (
                        (1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (1 << (self.TILDE - 70)) | (
                        1 << (self.INC - 70)) | (1 << (self.DEC - 70)) | (1 << (self.ADD - 70)) | (
                                1 << (self.SUB - 70)) | (
                                1 << (self.Identifier - 70)) | (1 << (self.AT - 70)))) != 0):
                    self.state = 1013
                    self.forInit()

                self.state = 1016
                self.match(self.SEMI)
                self.state = 1018
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (
                        1 << self.CHAR) | (1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (
                                                                    1 << self.LONG) | (
                                                                    1 << self.NEW) | (1 << self.SHORT) | (
                                                                    1 << self.SUPER) | (1 << self.THIS) | (
                                                                    1 << self.VOID) | (
                                                                    1 << self.IntegerLiteral) | (
                                                                    1 << self.FloatingPointLiteral) | (
                                                                    1 << self.BooleanLiteral) | (
                                                                    1 << self.CharacterLiteral) | (
                                                                    1 << self.StringLiteral) | (
                                                                    1 << self.NullLiteral) | (
                                                                    1 << self.LPAREN))) != 0) or (
                        (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & (
                        (1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (
                        1 << (self.TILDE - 70)) | (1 << (self.INC - 70)) | (1 << (self.DEC - 70)) | (
                                1 << (self.ADD - 70)) | (1 << (self.SUB - 70)) | (1 << (self.Identifier - 70)))) != 0):
                    self.state = 1017
                    self.expression(0)

                self.state = 1020
                self.match(self.SEMI)
                self.state = 1022
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (
                        1 << self.CHAR) | (1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (
                                                                    1 << self.LONG) | (
                                                                    1 << self.NEW) | (1 << self.SHORT) | (
                                                                    1 << self.SUPER) | (1 << self.THIS) | (
                                                                    1 << self.VOID) | (
                                                                    1 << self.IntegerLiteral) | (
                                                                    1 << self.FloatingPointLiteral) | (
                                                                    1 << self.BooleanLiteral) | (
                                                                    1 << self.CharacterLiteral) | (
                                                                    1 << self.StringLiteral) | (
                                                                    1 << self.NullLiteral) | (
                                                                    1 << self.LPAREN))) != 0) or (
                        (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & (
                        (1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (
                        1 << (self.TILDE - 70)) | (1 << (self.INC - 70)) | (1 << (self.DEC - 70)) | (
                                1 << (self.ADD - 70)) | (1 << (self.SUB - 70)) | (1 << (self.Identifier - 70)))) != 0):
                    self.state = 1021
                    self.forUpdate()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ForInitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext, 0)

        def expressionList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_forInit

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterForInit(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitForInit(self)

    def forInit(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_forInit)
        try:
            self.state = 1028
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1026
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnhancedForControlContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.EnhancedForControlContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variableModifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def variableDeclaratorId(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_enhancedForControl

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitEnhancedForControl(self)

    def enhancedForControl(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_enhancedForControl)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.FINAL or _la == JavaParser.AT:
                self.state = 1030
                self.variableModifier()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1036
            self.jType()
            self.state = 1037
            self.variableDeclaratorId()
            self.state = 1038
            self.match(self.COLON)
            self.state = 1039
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForUpdateContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ForUpdateContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_forUpdate

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterForUpdate(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitForUpdate(self)

    def forUpdate(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParExpressionContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ParExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_parExpression

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterParExpression(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitParExpression(self)

    def parExpression(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(self.LPAREN)
            self.state = 1044
            self.expression(0)
            self.state = 1045
            self.match(self.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ExpressionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_expressionList

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterExpressionList(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitExpressionList(self)

    def expressionList(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_expressionList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.expression(0)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 1048
                self.match(self.COMMA)
                self.state = 1049
                self.expression(0)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementExpressionContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.StatementExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_statementExpression

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterStatementExpression(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitStatementExpression(self)

    def statementExpression(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_statementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantExpressionContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ConstantExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_constantExpression

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterConstantExpression(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitConstantExpression(self)

    def constantExpression(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaExpressionContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.LambdaExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lambdaBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext, 0)

        def lambdaParameters(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitLambdaExpression(self)

    def lambdaExpression(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.lambdaParameters()
            self.state = 1060
            self.match(self.T__0)
            self.state = 1061
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaParametersContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.LambdaParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def formalParameterList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext, 0)

        def inferredFormalParameterList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InferredFormalParameterListContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitLambdaParameters(self)

    def lambdaParameters(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lambdaParameters)
        self._la = 0  # Token type
        try:
            self.state = 1073
            la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.match(self.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.match(self.LPAREN)
                self.state = 1066
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << self.BOOLEAN) | (1 << self.BYTE) | (1 << self.CHAR) | (
                        1 << self.DOUBLE) | (1 << self.FINAL) | (1 << self.FLOAT) | (1 << self.INT) | (
                                1 << self.LONG) | (
                                1 << self.SHORT))) != 0) or _la == JavaParser.Identifier or _la == JavaParser.AT:
                    self.state = 1065
                    self.formalParameterList()

                self.state = 1068
                self.match(self.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.match(self.LPAREN)
                self.state = 1070
                self.inferredFormalParameterList()
                self.state = 1071
                self.match(self.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InferredFormalParameterListContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.InferredFormalParameterListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_inferredFormalParameterList

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterInferredFormalParameterList(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitInferredFormalParameterList(self)

    def inferredFormalParameterList(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.InferredFormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_inferredFormalParameterList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(self.Identifier)
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaParser.COMMA:
                self.state = 1076
                self.match(self.COMMA)
                self.state = 1077
                self.match(self.Identifier)
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaBodyContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.LambdaBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def block(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterLambdaBody(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitLambdaBody(self)

    def lambdaBody(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_lambdaBody)
        try:
            self.state = 1085
            token = self._input.LA(1)
            if token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.NEW,
                         self.SHORT, self.SUPER, self.THIS, self.VOID, self.IntegerLiteral, self.FloatingPointLiteral,
                         self.BooleanLiteral, self.CharacterLiteral, self.StringLiteral, self.NullLiteral, self.LPAREN,
                         self.LT, self.BANG, self.TILDE, self.INC, self.DEC, self.ADD, self.SUB, self.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.expression(0)

            elif token in [self.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                self.block()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, 0)

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def nonWildcardTypeArguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext, 0)

        def explicitGenericInvocation(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext, 0)

        def expressionList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def innerCreator(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext, 0)

        def superSuffix(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext, 0)

        def expression(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext, i)

        def primary(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.PrimaryContext, 0)

        def creator(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.CreatorContext, 0)

        def lambdaExpression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_expression

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterExpression(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitExpression(self)

    def expression(self, _p=0):
        """

        :param _p:
        :type _p:
        :return:
        :rtype:
        """
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 182
        self.enterRecursionRule(localctx, 182, self.RULE_expression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            la_ = self._interp.adaptivePredict(self._input, 128, self._ctx)
            if la_ == 1:
                self.state = 1088
                self.match(self.LPAREN)
                self.state = 1089
                self.jType()
                self.state = 1090
                self.match(self.RPAREN)
                self.state = 1091
                self.expression(20)
                pass

            elif la_ == 2:
                self.state = 1093
                _la = self._input.LA(1)
                if not (((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & (
                        (1 << (self.INC - 81)) | (1 << (self.DEC - 81)) | (1 << (self.ADD - 81)) | (
                        1 << (self.SUB - 81)))) != 0)):
                    self._errHandler.recoverInline(self)
                self.consume()
                self.state = 1094
                self.expression(18)
                pass

            elif la_ == 3:
                self.state = 1095
                _la = self._input.LA(1)
                if not (_la == JavaParser.BANG or _la == JavaParser.TILDE):
                    self._errHandler.recoverInline(self)
                self.consume()
                self.state = 1096
                self.expression(17)
                pass

            elif la_ == 4:
                self.state = 1097
                self.primary()
                pass

            elif la_ == 5:
                self.state = 1098
                self.match(self.NEW)
                self.state = 1099
                self.creator()
                pass

            elif la_ == 6:
                self.state = 1100
                self.lambdaExpression()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 135, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1198
                    la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1103
                        if not self.precpred(self._ctx, 16):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1104
                        _la = self._input.LA(1)
                        if not (((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & (
                                (1 << (self.MUL - 85)) | (1 << (self.DIV - 85)) | (1 << (self.MOD - 85)))) != 0)):
                            self._errHandler.recoverInline(self)
                        self.consume()
                        self.state = 1105
                        self.expression(17)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1106
                        if not self.precpred(self._ctx, 15):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1107
                        _la = self._input.LA(1)
                        if not (_la == JavaParser.ADD or _la == JavaParser.SUB):
                            self._errHandler.recoverInline(self)
                        self.consume()
                        self.state = 1108
                        self.expression(16)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1109
                        if not self.precpred(self._ctx, 14):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1117
                        la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
                        if la_ == 1:
                            self.state = 1110
                            self.match(self.LT)
                            self.state = 1111
                            self.match(self.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1112
                            self.match(self.GT)
                            self.state = 1113
                            self.match(self.GT)
                            self.state = 1114
                            self.match(self.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1115
                            self.match(self.GT)
                            self.state = 1116
                            self.match(self.GT)
                            pass

                        self.state = 1119
                        self.expression(15)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1120
                        if not self.precpred(self._ctx, 13):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1121
                        _la = self._input.LA(1)
                        if not (((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & (
                                (1 << (self.GT - 69)) | (1 << (self.LT - 69)) | (1 << (self.LE - 69)) | (
                                1 << (self.GE - 69)))) != 0)):
                            self._errHandler.recoverInline(self)
                        self.consume()
                        self.state = 1122
                        self.expression(14)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1123
                        if not self.precpred(self._ctx, 11):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1124
                        _la = self._input.LA(1)
                        if not (_la == JavaParser.EQUAL or _la == JavaParser.NOTEQUAL):
                            self._errHandler.recoverInline(self)
                        self.consume()
                        self.state = 1125
                        self.expression(12)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1126
                        if not self.precpred(self._ctx, 10):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1127
                        self.match(self.BITAND)
                        self.state = 1128
                        self.expression(11)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1129
                        if not self.precpred(self._ctx, 9):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1130
                        self.match(self.CARET)
                        self.state = 1131
                        self.expression(10)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1132
                        if not self.precpred(self._ctx, 8):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1133
                        self.match(self.BITOR)
                        self.state = 1134
                        self.expression(9)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1135
                        if not self.precpred(self._ctx, 7):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1136
                        self.match(self.AND)
                        self.state = 1137
                        self.expression(8)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1138
                        if not self.precpred(self._ctx, 6):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1139
                        self.match(self.OR)
                        self.state = 1140
                        self.expression(7)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1141
                        if not self.precpred(self._ctx, 5):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1142
                        self.match(self.QUESTION)
                        self.state = 1143
                        self.expression(0)
                        self.state = 1144
                        self.match(self.COLON)
                        self.state = 1145
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1147
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1148
                        _la = self._input.LA(1)
                        if not (((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (self.ASSIGN - 68)) | (
                                1 << (self.ADD_ASSIGN - 68)) | (1 << (self.SUB_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.MUL_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.DIV_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.AND_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.OR_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.XOR_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.MOD_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.LSHIFT_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.RSHIFT_ASSIGN - 68)) | (
                                                                                               1 << (
                                                                                               self.URSHIFT_ASSIGN - 68)))) != 0)):
                            self._errHandler.recoverInline(self)
                        self.consume()
                        self.state = 1149
                        self.expression(1)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1150
                        if not self.precpred(self._ctx, 28):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1151
                        self.match(self.DOT)
                        self.state = 1152
                        self.match(self.Identifier)
                        pass

                    elif la_ == 14:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1153
                        if not self.precpred(self._ctx, 27):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1154
                        self.match(self.DOT)
                        self.state = 1155
                        self.match(self.THIS)
                        pass

                    elif la_ == 15:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1156
                        if not self.precpred(self._ctx, 26):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1157
                        self.match(self.DOT)
                        self.state = 1158
                        self.match(self.NEW)
                        self.state = 1160
                        _la = self._input.LA(1)
                        if _la == JavaParser.LT:
                            self.state = 1159
                            self.nonWildcardTypeArguments()

                        self.state = 1162
                        self.innerCreator()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1163
                        if not self.precpred(self._ctx, 25):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1164
                        self.match(self.DOT)
                        self.state = 1165
                        self.match(self.SUPER)
                        self.state = 1166
                        self.superSuffix()
                        pass

                    elif la_ == 17:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1167
                        if not self.precpred(self._ctx, 24):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1168
                        self.match(self.DOT)
                        self.state = 1169
                        self.explicitGenericInvocation()
                        pass

                    elif la_ == 18:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1170
                        if not self.precpred(self._ctx, 23):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1171
                        self.match(self.LBRACK)
                        self.state = 1172
                        self.expression(0)
                        self.state = 1173
                        self.match(self.RBRACK)
                        pass

                    elif la_ == 19:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1175
                        if not self.precpred(self._ctx, 22):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1176
                        self.match(self.LPAREN)
                        self.state = 1178
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (
                                1 << self.CHAR) | (1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (
                                                                            1 << self.LONG) | (1 << self.NEW) | (
                                                                            1 << self.SHORT) | (1 << self.SUPER) | (
                                                                            1 << self.THIS) | (1 << self.VOID) | (
                                                                            1 << self.IntegerLiteral) | (
                                                                            1 << self.FloatingPointLiteral) | (
                                                                            1 << self.BooleanLiteral) | (
                                                                            1 << self.CharacterLiteral) | (
                                                                            1 << self.StringLiteral) | (
                                                                            1 << self.NullLiteral) | (
                                                                            1 << self.LPAREN))) != 0) or (
                                (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & (
                                (1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (
                                1 << (self.TILDE - 70)) | (1 << (self.INC - 70)) | (
                                        1 << (self.DEC - 70)) | (1 << (self.ADD - 70)) | (1 << (self.SUB - 70)) | (
                                        1 << (self.Identifier - 70)))) != 0):
                            self.state = 1177
                            self.expressionList()

                        self.state = 1180
                        self.match(self.RPAREN)
                        pass

                    elif la_ == 20:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1181
                        if not self.precpred(self._ctx, 19):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1182
                        _la = self._input.LA(1)
                        if not (_la == JavaParser.INC or _la == JavaParser.DEC):
                            self._errHandler.recoverInline(self)
                        self.consume()
                        pass

                    elif la_ == 21:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1183
                        if not self.precpred(self._ctx, 12):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1184
                        self.match(self.INSTANCEOF)
                        self.state = 1185
                        self.jType()
                        pass

                    elif la_ == 22:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1186
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1187
                        self.match(self.T__1)
                        self.state = 1189
                        _la = self._input.LA(1)
                        if _la == JavaParser.LT:
                            self.state = 1188
                            self.typeArguments()

                        self.state = 1191
                        self.match(self.Identifier)
                        pass

                    elif la_ == 23:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1192
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1193
                        self.match(self.T__1)
                        self.state = 1195
                        _la = self._input.LA(1)
                        if _la == JavaParser.LT:
                            self.state = 1194
                            self.typeArguments()

                        self.state = 1197
                        self.match(self.NEW)
                        pass

                self.state = 1202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 135, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.PrimaryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def nonWildcardTypeArguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext, 0)

        def explicitGenericInvocationSuffix(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext, 0)

        def literal(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.LiteralContext, 0)

        def arguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def expression(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def jType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.JTypeContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_primary

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterPrimary(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitPrimary(self)

    def primary(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_primary)
        try:
            self.state = 1224
            la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.match(self.LPAREN)
                self.state = 1204
                self.expression(0)
                self.state = 1205
                self.match(self.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.match(self.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1208
                self.match(self.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1209
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1210
                self.match(self.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1211
                self.jType()
                self.state = 1212
                self.match(self.DOT)
                self.state = 1213
                self.match(self.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1215
                self.match(self.VOID)
                self.state = 1216
                self.match(self.DOT)
                self.state = 1217
                self.match(self.CLASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1218
                self.nonWildcardTypeArguments()
                self.state = 1222
                token = self._input.LA(1)
                if token in [self.SUPER, self.Identifier]:
                    self.state = 1219
                    self.explicitGenericInvocationSuffix()

                elif token in [self.THIS]:
                    self.state = 1220
                    self.match(self.THIS)
                    self.state = 1221
                    self.arguments()

                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatorContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.CreatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arrayCreatorRest(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext, 0)

        def nonWildcardTypeArguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext, 0)

        def classCreatorRest(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext, 0)

        def createdName(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.CreatedNameContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_creator

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterCreator(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitCreator(self)

    def creator(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_creator)
        try:
            self.state = 1235
            token = self._input.LA(1)
            if token in [self.LT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                self.nonWildcardTypeArguments()
                self.state = 1227
                self.createdName()
                self.state = 1228
                self.classCreatorRest()

            elif token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.SHORT,
                           self.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1230
                self.createdName()
                self.state = 1233
                token = self._input.LA(1)
                if token in [self.LBRACK]:
                    self.state = 1231
                    self.arrayCreatorRest()

                elif token in [self.LPAREN]:
                    self.state = 1232
                    self.classCreatorRest()

                else:
                    raise NoViableAltException(self)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatedNameContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.CreatedNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def primitiveType(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext, 0)

        def typeArgumentsOrDiamond(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_createdName

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterCreatedName(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitCreatedName(self)

    def createdName(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_createdName)
        self._la = 0  # Token type
        try:
            self.state = 1252
            token = self._input.LA(1)
            if token in [self.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.match(self.Identifier)
                self.state = 1239
                _la = self._input.LA(1)
                if _la == JavaParser.LT:
                    self.state = 1238
                    self.typeArgumentsOrDiamond()

                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == JavaParser.DOT:
                    self.state = 1241
                    self.match(self.DOT)
                    self.state = 1242
                    self.match(self.Identifier)
                    self.state = 1244
                    _la = self._input.LA(1)
                    if _la == JavaParser.LT:
                        self.state = 1243
                        self.typeArgumentsOrDiamond()

                    self.state = 1250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG,
                           self.SHORT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1251
                self.primitiveType()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerCreatorContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.InnerCreatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def classCreatorRest(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext, 0)

        def nonWildcardTypeArgumentsOrDiamond(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterInnerCreator(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitInnerCreator(self)

    def innerCreator(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_innerCreator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(self.Identifier)
            self.state = 1256
            _la = self._input.LA(1)
            if _la == JavaParser.LT:
                self.state = 1255
                self.nonWildcardTypeArgumentsOrDiamond()

            self.state = 1258
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayCreatorRestContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ArrayCreatorRestContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext, 0)

        def expression(self, i=None):
            """

            :param i:
            :type i:
            :return:
            :rtype:
            """
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext, i)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitArrayCreatorRest(self)

    def arrayCreatorRest(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_arrayCreatorRest)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(self.LBRACK)
            self.state = 1288
            token = self._input.LA(1)
            if token in [self.RBRACK]:
                self.state = 1261
                self.match(self.RBRACK)
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == JavaParser.LBRACK:
                    self.state = 1262
                    self.match(self.LBRACK)
                    self.state = 1263
                    self.match(self.RBRACK)
                    self.state = 1268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1269
                self.arrayInitializer()

            elif token in [self.BOOLEAN, self.BYTE, self.CHAR, self.DOUBLE, self.FLOAT, self.INT, self.LONG, self.NEW,
                           self.SHORT, self.SUPER, self.THIS, self.VOID, self.IntegerLiteral, self.FloatingPointLiteral,
                           self.BooleanLiteral, self.CharacterLiteral, self.StringLiteral, self.NullLiteral,
                           self.LPAREN, self.LT, self.BANG, self.TILDE, self.INC, self.DEC, self.ADD, self.SUB,
                           self.Identifier]:
                self.state = 1270
                self.expression(0)
                self.state = 1271
                self.match(self.RBRACK)
                self.state = 1278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 146, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1272
                        self.match(self.LBRACK)
                        self.state = 1273
                        self.expression(0)
                        self.state = 1274
                        self.match(self.RBRACK)
                    self.state = 1280
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 146, self._ctx)

                self.state = 1285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 147, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1281
                        self.match(self.LBRACK)
                        self.state = 1282
                        self.match(self.RBRACK)
                    self.state = 1287
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 147, self._ctx)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassCreatorRestContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ClassCreatorRestContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classBody(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ClassBodyContext, 0)

        def arguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_classCreatorRest

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitClassCreatorRest(self)

    def classCreatorRest(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.arguments()
            self.state = 1292
            la_ = self._interp.adaptivePredict(self._input, 149, self._ctx)
            if la_ == 1:
                self.state = 1291
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ExplicitGenericInvocationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext, 0)

        def explicitGenericInvocationSuffix(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitExplicitGenericInvocation(self)

    def explicitGenericInvocation(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.nonWildcardTypeArguments()
            self.state = 1295
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.NonWildcardTypeArgumentsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeListContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitNonWildcardTypeArguments(self)

    def nonWildcardTypeArguments(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(self.LT)
            self.state = 1298
            self.typeList()
            self.state = 1299
            self.match(self.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.TypeArgumentsOrDiamondContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitTypeArgumentsOrDiamond(self)

    def typeArgumentsOrDiamond(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1304
            la_ = self._interp.adaptivePredict(self._input, 150, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.match(self.LT)
                self.state = 1302
                self.match(self.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1303
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.NonWildcardTypeArgumentsOrDiamondContext, self).__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)

    def nonWildcardTypeArgumentsOrDiamond(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1309
            la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1306
                self.match(self.LT)
                self.state = 1307
                self.match(self.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1308
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperSuffixContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.SuperSuffixContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def arguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitSuperSuffix(self)

    def superSuffix(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_superSuffix)
        try:
            self.state = 1317
            token = self._input.LA(1)
            if token in [self.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.arguments()

            elif token in [self.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.match(self.DOT)
                self.state = 1313
                self.match(self.Identifier)
                self.state = 1315
                la_ = self._interp.adaptivePredict(self._input, 152, self._ctx)
                if la_ == 1:
                    self.state = 1314
                    self.arguments()



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ExplicitGenericInvocationSuffixContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            """

            :return:
            :rtype:
            """
            return self.getToken(JavaParser.Identifier, 0)

        def superSuffix(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext, 0)

        def arguments(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitExplicitGenericInvocationSuffix(self)

    def explicitGenericInvocationSuffix(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1323
            token = self._input.LA(1)
            if token in [self.SUPER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1319
                self.match(self.SUPER)
                self.state = 1320
                self.superSuffix()

            elif token in [self.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.match(self.Identifier)
                self.state = 1322
                self.arguments()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):
        """

        """
        def __init__(self, parser, parent=None, invokingState=-1):
            super(JavaParser.ArgumentsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            """

            :return:
            :rtype:
            """
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            """

            :return:
            :rtype:
            """
            return JavaParser.RULE_arguments

        def enterRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.enterArguments(self)

        def exitRule(self, listener):
            """

            :param listener:
            :type listener:
            """
            if isinstance(listener, JavaListener):
                listener.exitArguments(self)

    def arguments(self):
        """

        :return:
        :rtype:
        """
        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(self.LPAREN)
            self.state = 1327
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.BOOLEAN) | (1 << self.BYTE) | (1 << self.CHAR) | (
                    1 << self.DOUBLE) | (1 << self.FLOAT) | (1 << self.INT) | (1 << self.LONG) | (1 << self.NEW) | (
                                                                1 << self.SHORT) | (1 << self.SUPER) | (
                                                                1 << self.THIS) | (1 << self.VOID) | (
                                                                1 << self.IntegerLiteral) | (
                                                                1 << self.FloatingPointLiteral) | (
                                                                1 << self.BooleanLiteral) | (
                                                                1 << self.CharacterLiteral) | (
                                                                1 << self.StringLiteral) | (1 << self.NullLiteral) | (
                                                                1 << self.LPAREN))) != 0) or (
                    (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & (
                    (1 << (self.LT - 70)) | (1 << (self.BANG - 70)) | (1 << (self.TILDE - 70)) | (
                    1 << (self.INC - 70)) | (1 << (self.DEC - 70)) | (1 << (self.ADD - 70)) | (
                            1 << (self.SUB - 70)) | (1 << (self.Identifier - 70)))) != 0):
                self.state = 1326
                self.expressionList()

            self.state = 1329
            self.match(self.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx, ruleIndex, predIndex):
        """

        :param localctx:
        :type localctx:
        :param ruleIndex:
        :type ruleIndex:
        :param predIndex:
        :type predIndex:
        :return:
        :rtype:
        """
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[91] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx, predIndex):
        """

        :param localctx:
        :type localctx:
        :param predIndex:
        :type predIndex:
        :return:
        :rtype:
        """
        if predIndex == 0:
            return self.precpred(self._ctx, 16)

        if predIndex == 1:
            return self.precpred(self._ctx, 15)

        if predIndex == 2:
            return self.precpred(self._ctx, 14)

        if predIndex == 3:
            return self.precpred(self._ctx, 13)

        if predIndex == 4:
            return self.precpred(self._ctx, 11)

        if predIndex == 5:
            return self.precpred(self._ctx, 10)

        if predIndex == 6:
            return self.precpred(self._ctx, 9)

        if predIndex == 7:
            return self.precpred(self._ctx, 8)

        if predIndex == 8:
            return self.precpred(self._ctx, 7)

        if predIndex == 9:
            return self.precpred(self._ctx, 6)

        if predIndex == 10:
            return self.precpred(self._ctx, 5)

        if predIndex == 11:
            return self.precpred(self._ctx, 1)

        if predIndex == 12:
            return self.precpred(self._ctx, 28)

        if predIndex == 13:
            return self.precpred(self._ctx, 27)

        if predIndex == 14:
            return self.precpred(self._ctx, 26)

        if predIndex == 15:
            return self.precpred(self._ctx, 25)

        if predIndex == 16:
            return self.precpred(self._ctx, 24)

        if predIndex == 17:
            return self.precpred(self._ctx, 23)

        if predIndex == 18:
            return self.precpred(self._ctx, 22)

        if predIndex == 19:
            return self.precpred(self._ctx, 19)

        if predIndex == 20:
            return self.precpred(self._ctx, 12)

        if predIndex == 21:
            return self.precpred(self._ctx, 3)

        if predIndex == 22:
            return self.precpred(self._ctx, 2)
