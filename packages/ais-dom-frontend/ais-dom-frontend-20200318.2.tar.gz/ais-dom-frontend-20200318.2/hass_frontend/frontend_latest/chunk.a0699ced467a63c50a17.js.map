{"version":3,"sources":["webpack:///./src/common/entity/compute_state_name.ts","webpack:///./src/common/const.ts","webpack:///./src/common/entity/domain_icon.ts","webpack:///./src/common/entity/compute_state_domain.ts","webpack:///./src/components/entity/state-badge.ts","webpack:///./src/common/entity/compute_object_id.ts","webpack:///./src/common/entity/cover_icon.ts","webpack:///./src/common/entity/sensor_icon.ts","webpack:///./src/common/entity/state_icon.ts","webpack:///./src/common/entity/binary_sensor_icon.ts","webpack:///./src/common/entity/input_dateteime_icon.ts","webpack:///./src/common/entity/compute_active_state.ts","webpack:///./src/common/style/icon_color_css.ts","webpack:///./src/components/entity/state-info.js","webpack:///./src/components/ha-relative-time.js","webpack:///./src/common/datetime/relative_time.ts"],"names":["__webpack_require__","d","__webpack_exports__","computeStateName","_compute_object_id__WEBPACK_IMPORTED_MODULE_0__","stateObj","undefined","attributes","friendly_name","computeObjectId","entity_id","replace","DEFAULT_DOMAIN_ICON","DOMAINS_WITH_CARD","DOMAINS_WITH_MORE_INFO","DOMAINS_HIDE_MORE_INFO","DOMAINS_MORE_INFO_NO_HISTORY","STATES_OFF","DOMAINS_TOGGLE","UNIT_C","UNIT_F","DEFAULT_VIEW_ENTITY_ID","Set","domainIcon","_const__WEBPACK_IMPORTED_MODULE_0__","fixedIcons","alert","alexa","automation","calendar","camera","climate","configurator","conversation","counter","device_tracker","fan","google_assistant","group","history_graph","homeassistant","homekit","image_processing","input_boolean","input_datetime","input_number","input_select","input_text","light","mailbox","notify","persistent_notification","person","plant","proximity","remote","scene","script","sensor","simple_alarm","sun","switch","timer","updater","vacuum","water_heater","weather","weblink","zone","domain","state","console","warn","computeStateDomain","_compute_domain__WEBPACK_IMPORTED_MODULE_0__","computeDomain","StateBadge","_decorate","_initialize","_LitElement","F","[object Object]","args","super","this","kind","key","value","decorators","property","type","Boolean","query","html","ifDefined","stateColor","computeActiveState","overrideIcon","stateIcon","changedProps","has","iconStyle","color","filter","hostStyle","backgroundImage","entity_picture","overrideImage","imageUrl","hass","hassUrl","display","hs_color","hue","sat","brightness","errorMessage","Object","assign","_icon","style","static","css","iconColorCSS","LitElement","customElements","define","entityId","substr","indexOf","fixedDeviceClassIcons","humidity","illuminance","temperature","pressure","power","signal_strength","domainIcons","binary_sensor","activated","device_class","cover","open","dclass","battery","Number","isNaN","batteryRound","Math","round","unit","unit_of_measurement","has_date","has_time","icon","split","hvac_action","_polymer_polymer_lib_utils_html_tag__WEBPACK_IMPORTED_MODULE_0__","_polymer_polymer_polymer_element__WEBPACK_IMPORTED_MODULE_1__","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_4__","_common_util_compute_rtl__WEBPACK_IMPORTED_MODULE_5__","PolymerElement","template","styleTemplate","stateBadgeTemplate","infoTemplate","properties","inDialog","rtl","reflectToAttribute","computed","computeRTL","_polymer_polymer_lib_legacy_polymer_dom__WEBPACK_IMPORTED_MODULE_0__","_common_datetime_relative_time__WEBPACK_IMPORTED_MODULE_2__","_mixins_localize_mixin__WEBPACK_IMPORTED_MODULE_3__","LocalizeMixin","datetime","String","observer","datetimeObj","parsedDateTime","constructor","updateRelative","bind","connectedCallback","updateInterval","setInterval","disconnectedCallback","clearInterval","datetimeChanged","newVal","Date","datetimeObjChanged","root","dom","innerHTML","relativeTime","localize","tests","langKey","dateObj","options","delta","compareTime","getTime","tense","timeDesc","abs","i","length","floor","includeTense"],"mappings":"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","file":"chunk.a0699ced467a63c50a17.js","sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeObjectId } from \"./compute_object_id\";\n\nexport const computeStateName = (stateObj: HassEntity): string => {\n  return stateObj.attributes.friendly_name === undefined\n    ? computeObjectId(stateObj.entity_id).replace(/_/g, \" \")\n    : stateObj.attributes.friendly_name || \"\";\n};\n","/** Constants to be used in the frontend. */\n\n// Constants should be alphabetically sorted by name.\n// Arrays with values should be alphabetically sorted if order doesn't matter.\n// Each constant should have a description what it is supposed to be used for.\n\n/** Icon to use when no icon specified for domain. */\nexport const DEFAULT_DOMAIN_ICON = \"hass:bookmark\";\n\n/** Domains that have a state card. */\nexport const DOMAINS_WITH_CARD = [\n  \"climate\",\n  \"cover\",\n  \"configurator\",\n  \"input_select\",\n  \"input_number\",\n  \"input_text\",\n  \"lock\",\n  \"media_player\",\n  \"scene\",\n  \"script\",\n  \"timer\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weblink\",\n];\n\n/** Domains with separate more info dialog. */\nexport const DOMAINS_WITH_MORE_INFO = [\n  \"alarm_control_panel\",\n  \"automation\",\n  \"camera\",\n  \"climate\",\n  \"configurator\",\n  \"counter\",\n  \"cover\",\n  \"fan\",\n  \"group\",\n  \"history_graph\",\n  \"input_datetime\",\n  \"light\",\n  \"lock\",\n  \"media_player\",\n  \"person\",\n  \"script\",\n  \"sun\",\n  \"timer\",\n  \"updater\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weather\",\n];\n\n/** Domains that show no more info dialog. */\nexport const DOMAINS_HIDE_MORE_INFO = [\n  \"input_number\",\n  \"input_select\",\n  \"input_text\",\n  \"scene\",\n  \"weblink\",\n];\n\n/** Domains that should have the history hidden in the more info dialog. */\nexport const DOMAINS_MORE_INFO_NO_HISTORY = [\n  \"camera\",\n  \"configurator\",\n  \"history_graph\",\n  \"scene\",\n];\n\n/** States that we consider \"off\". */\nexport const STATES_OFF = [\"closed\", \"locked\", \"off\"];\n\n/** Domains where we allow toggle in Lovelace. */\nexport const DOMAINS_TOGGLE = new Set([\n  \"fan\",\n  \"input_boolean\",\n  \"light\",\n  \"switch\",\n  \"group\",\n  \"automation\",\n]);\n\n/** Temperature units. */\nexport const UNIT_C = \"°C\";\nexport const UNIT_F = \"°F\";\n\n/** Entity ID of the default view. */\nexport const DEFAULT_VIEW_ENTITY_ID = \"group.default_view\";\n","/**\n * Return the icon to be used for a domain.\n *\n * Optionally pass in a state to influence the domain icon.\n */\nimport { DEFAULT_DOMAIN_ICON } from \"../const\";\n\nconst fixedIcons = {\n  alert: \"hass:alert\",\n  alexa: \"hass:amazon-alexa\",\n  automation: \"hass:robot\",\n  calendar: \"hass:calendar\",\n  camera: \"hass:video\",\n  climate: \"hass:thermostat\",\n  configurator: \"hass:settings\",\n  conversation: \"hass:text-to-speech\",\n  counter: \"hass:counter\",\n  device_tracker: \"hass:account\",\n  fan: \"hass:fan\",\n  google_assistant: \"hass:google-assistant\",\n  group: \"hass:google-circles-communities\",\n  history_graph: \"hass:chart-line\",\n  homeassistant: \"hass:home-assistant\",\n  homekit: \"hass:home-automation\",\n  image_processing: \"hass:image-filter-frames\",\n  input_boolean: \"hass:toggle-switch-outline\",\n  input_datetime: \"hass:calendar-clock\",\n  input_number: \"hass:ray-vertex\",\n  input_select: \"hass:format-list-bulleted\",\n  input_text: \"hass:textbox\",\n  light: \"hass:lightbulb\",\n  mailbox: \"hass:mailbox\",\n  notify: \"hass:comment-alert\",\n  persistent_notification: \"hass:bell\",\n  person: \"hass:account\",\n  plant: \"hass:flower\",\n  proximity: \"hass:apple-safari\",\n  remote: \"hass:remote\",\n  scene: \"hass:palette\",\n  script: \"hass:script-text\",\n  sensor: \"hass:eye\",\n  simple_alarm: \"hass:bell\",\n  sun: \"hass:white-balance-sunny\",\n  switch: \"hass:flash\",\n  timer: \"hass:timer\",\n  updater: \"hass:cloud-upload\",\n  vacuum: \"hass:robot-vacuum\",\n  water_heater: \"hass:thermometer\",\n  weather: \"hass:weather-cloudy\",\n  weblink: \"hass:open-in-new\",\n  zone: \"hass:map-marker-radius\",\n};\n\nexport const domainIcon = (domain: string, state?: string): string => {\n  if (domain in fixedIcons) {\n    return fixedIcons[domain];\n  }\n\n  switch (domain) {\n    case \"alarm_control_panel\":\n      switch (state) {\n        case \"armed_home\":\n          return \"hass:bell-plus\";\n        case \"armed_night\":\n          return \"hass:bell-sleep\";\n        case \"disarmed\":\n          return \"hass:bell-outline\";\n        case \"triggered\":\n          return \"hass:bell-ring\";\n        default:\n          return \"hass:bell\";\n      }\n\n    case \"binary_sensor\":\n      return state && state === \"off\"\n        ? \"hass:radiobox-blank\"\n        : \"hass:checkbox-marked-circle\";\n\n    case \"cover\":\n      return state === \"closed\" ? \"hass:window-closed\" : \"hass:window-open\";\n\n    case \"lock\":\n      return state && state === \"unlocked\" ? \"hass:lock-open\" : \"hass:lock\";\n\n    case \"media_player\":\n      return state && state === \"playing\" ? \"hass:cast-connected\" : \"hass:cast\";\n\n    case \"zwave\":\n      switch (state) {\n        case \"dead\":\n          return \"hass:emoticon-dead\";\n        case \"sleeping\":\n          return \"hass:sleep\";\n        case \"initializing\":\n          return \"hass:timer-sand\";\n        default:\n          return \"hass:z-wave\";\n      }\n\n    default:\n      // tslint:disable-next-line\n      console.warn(\n        \"Unable to find icon for domain \" + domain + \" (\" + state + \")\"\n      );\n      return DEFAULT_DOMAIN_ICON;\n  }\n};\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeDomain } from \"./compute_domain\";\n\nexport const computeStateDomain = (stateObj: HassEntity) => {\n  return computeDomain(stateObj.entity_id);\n};\n","import {\n  LitElement,\n  TemplateResult,\n  css,\n  CSSResult,\n  html,\n  property,\n  PropertyValues,\n  query,\n} from \"lit-element\";\nimport \"../ha-icon\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { stateIcon } from \"../../common/entity/state_icon\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n// Not duplicate, this is for typing.\n// tslint:disable-next-line\nimport { HaIcon } from \"../ha-icon\";\nimport { HomeAssistant } from \"../../types\";\nimport { computeActiveState } from \"../../common/entity/compute_active_state\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n  @property() public stateObj?: HassEntity;\n  @property() public overrideIcon?: string;\n  @property() public overrideImage?: string;\n  @property({ type: Boolean }) public stateColor?: boolean;\n  @query(\"ha-icon\") private _icon!: HaIcon;\n\n  protected render(): TemplateResult {\n    const stateObj = this.stateObj;\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    const domain = computeStateDomain(stateObj);\n\n    return html`\n      <ha-icon\n        id=\"icon\"\n        data-domain=${ifDefined(\n          this.stateColor || (domain === \"light\" && this.stateColor !== false)\n            ? domain\n            : undefined\n        )}\n        data-state=${computeActiveState(stateObj)}\n        .icon=${this.overrideIcon || stateIcon(stateObj)}\n      ></ha-icon>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!changedProps.has(\"stateObj\") || !this.stateObj) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: Partial<CSSStyleDeclaration> = {\n      color: \"\",\n      filter: \"\",\n    };\n    const hostStyle: Partial<CSSStyleDeclaration> = {\n      backgroundImage: \"\",\n    };\n    if (stateObj) {\n      // hide icon if we have entity picture\n      if (\n        (stateObj.attributes.entity_picture && !this.overrideIcon) ||\n        this.overrideImage\n      ) {\n        let imageUrl = this.overrideImage || stateObj.attributes.entity_picture;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        hostStyle.backgroundImage = `url(${imageUrl})`;\n        iconStyle.display = \"none\";\n      } else {\n        if (stateObj.attributes.hs_color && this.stateColor !== false) {\n          const hue = stateObj.attributes.hs_color[0];\n          const sat = stateObj.attributes.hs_color[1];\n          if (sat > 10) {\n            iconStyle.color = `hsl(${hue}, 100%, ${100 - sat / 2}%)`;\n          }\n        }\n        if (stateObj.attributes.brightness && this.stateColor !== false) {\n          const brightness = stateObj.attributes.brightness;\n          if (typeof brightness !== \"number\") {\n            const errorMessage = `Type error: state-badge expected number, but type of ${\n              stateObj.entity_id\n            }.attributes.brightness is ${typeof brightness} (${brightness})`;\n            // tslint:disable-next-line\n            console.warn(errorMessage);\n          }\n          // lowest brighntess will be around 50% (that's pretty dark)\n          iconStyle.filter = `brightness(${(brightness + 245) / 5}%)`;\n        }\n      }\n    }\n    Object.assign(this._icon.style, iconStyle);\n    Object.assign(this.style, hostStyle);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        position: relative;\n        display: inline-block;\n        width: 40px;\n        color: var(--paper-item-icon-color, #44739e);\n        border-radius: 50%;\n        height: 40px;\n        text-align: center;\n        background-size: cover;\n        line-height: 40px;\n        vertical-align: middle;\n      }\n\n      ha-icon {\n        transition: color 0.3s ease-in-out, filter 0.3s ease-in-out;\n      }\n\n      ${iconColorCSS}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n","/** Compute the object ID of a state. */\nexport const computeObjectId = (entityId: string): string => {\n  return entityId.substr(entityId.indexOf(\".\") + 1);\n};\n","/** Return an icon representing a cover state. */\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { domainIcon } from \"./domain_icon\";\n\nexport const coverIcon = (state: HassEntity): string => {\n  const open = state.state !== \"closed\";\n  switch (state.attributes.device_class) {\n    case \"garage\":\n      return open ? \"hass:garage-open\" : \"hass:garage\";\n    case \"door\":\n      return open ? \"hass:door-open\" : \"hass:door-closed\";\n    case \"shutter\":\n      return open ? \"hass:window-shutter-open\" : \"hass:window-shutter\";\n    case \"blind\":\n      return open ? \"hass:blinds-open\" : \"hass:blinds\";\n    case \"window\":\n      return open ? \"hass:window-open\" : \"hass:window-closed\";\n    default:\n      return domainIcon(\"cover\", state.state);\n  }\n};\n","/** Return an icon representing a sensor state. */\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { UNIT_C, UNIT_F } from \"../const\";\nimport { domainIcon } from \"./domain_icon\";\n\nconst fixedDeviceClassIcons = {\n  humidity: \"hass:water-percent\",\n  illuminance: \"hass:brightness-5\",\n  temperature: \"hass:thermometer\",\n  pressure: \"hass:gauge\",\n  power: \"hass:flash\",\n  signal_strength: \"hass:wifi\",\n};\n\nexport const sensorIcon = (state: HassEntity) => {\n  const dclass = state.attributes.device_class;\n\n  if (dclass && dclass in fixedDeviceClassIcons) {\n    return fixedDeviceClassIcons[dclass];\n  }\n  if (dclass === \"battery\") {\n    const battery = Number(state.state);\n    if (isNaN(battery)) {\n      return \"hass:battery-unknown\";\n    }\n    const batteryRound = Math.round(battery / 10) * 10;\n    if (batteryRound >= 100) {\n      return \"hass:battery\";\n    }\n    if (batteryRound <= 0) {\n      return \"hass:battery-alert\";\n    }\n    // Will return one of the following icons: (listed so extractor picks up)\n    // hass:battery-10\n    // hass:battery-20\n    // hass:battery-30\n    // hass:battery-40\n    // hass:battery-50\n    // hass:battery-60\n    // hass:battery-70\n    // hass:battery-80\n    // hass:battery-90\n    // We obscure 'hass' in iconname so this name does not get picked up\n    return `${\"hass\"}:battery-${batteryRound}`;\n  }\n\n  const unit = state.attributes.unit_of_measurement;\n  if (unit === UNIT_C || unit === UNIT_F) {\n    return \"hass:thermometer\";\n  }\n  return domainIcon(\"sensor\");\n};\n","/** Return an icon representing a state. */\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { DEFAULT_DOMAIN_ICON } from \"../const\";\nimport { binarySensorIcon } from \"./binary_sensor_icon\";\n\nimport { computeDomain } from \"./compute_domain\";\nimport { domainIcon } from \"./domain_icon\";\nimport { coverIcon } from \"./cover_icon\";\nimport { sensorIcon } from \"./sensor_icon\";\nimport { inputDateTimeIcon } from \"./input_dateteime_icon\";\n\nconst domainIcons = {\n  binary_sensor: binarySensorIcon,\n  cover: coverIcon,\n  sensor: sensorIcon,\n  input_datetime: inputDateTimeIcon,\n};\n\nexport const stateIcon = (state: HassEntity) => {\n  if (!state) {\n    return DEFAULT_DOMAIN_ICON;\n  }\n  if (state.attributes.icon) {\n    return state.attributes.icon;\n  }\n\n  const domain = computeDomain(state.entity_id);\n\n  if (domain in domainIcons) {\n    return domainIcons[domain](state);\n  }\n  return domainIcon(domain, state.state);\n};\n","import { HassEntity } from \"home-assistant-js-websocket\";\n\n/** Return an icon representing a binary sensor state. */\n\nexport const binarySensorIcon = (state: HassEntity) => {\n  const activated = state.state && state.state === \"off\";\n  switch (state.attributes.device_class) {\n    case \"battery\":\n      return activated ? \"hass:battery\" : \"hass:battery-outline\";\n    case \"cold\":\n      return activated ? \"hass:thermometer\" : \"hass:snowflake\";\n    case \"connectivity\":\n      return activated ? \"hass:server-network-off\" : \"hass:server-network\";\n    case \"door\":\n      return activated ? \"hass:door-closed\" : \"hass:door-open\";\n    case \"garage_door\":\n      return activated ? \"hass:garage\" : \"hass:garage-open\";\n    case \"gas\":\n    case \"power\":\n    case \"problem\":\n    case \"safety\":\n    case \"smoke\":\n      return activated ? \"hass:shield-check\" : \"hass:alert\";\n    case \"heat\":\n      return activated ? \"hass:thermometer\" : \"hass:fire\";\n    case \"light\":\n      return activated ? \"hass:brightness-5\" : \"hass:brightness-7\";\n    case \"lock\":\n      return activated ? \"hass:lock\" : \"hass:lock-open\";\n    case \"moisture\":\n      return activated ? \"hass:water-off\" : \"hass:water\";\n    case \"motion\":\n      return activated ? \"hass:walk\" : \"hass:run\";\n    case \"occupancy\":\n      return activated ? \"hass:home-outline\" : \"hass:home\";\n    case \"opening\":\n      return activated ? \"hass:square\" : \"hass:square-outline\";\n    case \"plug\":\n      return activated ? \"hass:power-plug-off\" : \"hass:power-plug\";\n    case \"presence\":\n      return activated ? \"hass:home-outline\" : \"hass:home\";\n    case \"sound\":\n      return activated ? \"hass:music-note-off\" : \"hass:music-note\";\n    case \"vibration\":\n      return activated ? \"hass:crop-portrait\" : \"hass:vibrate\";\n    case \"window\":\n      return activated ? \"hass:window-closed\" : \"hass:window-open\";\n    default:\n      return activated ? \"hass:radiobox-blank\" : \"hass:checkbox-marked-circle\";\n  }\n};\n","/** Return an icon representing an input datetime state. */\nimport { domainIcon } from \"./domain_icon\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const inputDateTimeIcon = (state: HassEntity): string => {\n  if (!state.attributes.has_date) {\n    return \"hass:clock\";\n  }\n  if (!state.attributes.has_time) {\n    return \"hass:calendar\";\n  }\n  return domainIcon(\"input_datetime\");\n};\n","import { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const computeActiveState = (stateObj: HassEntity): string => {\n  const domain = stateObj.entity_id.split(\".\")[0];\n  let state = stateObj.state;\n\n  if (domain === \"climate\") {\n    state = stateObj.attributes.hvac_action;\n  }\n\n  return state;\n};\n","import { css } from \"lit-element\";\n\nexport const iconColorCSS = css`\n  ha-icon[data-domain=\"alert\"][data-state=\"on\"],\n  ha-icon[data-domain=\"automation\"][data-state=\"on\"],\n  ha-icon[data-domain=\"binary_sensor\"][data-state=\"on\"],\n  ha-icon[data-domain=\"calendar\"][data-state=\"on\"],\n  ha-icon[data-domain=\"camera\"][data-state=\"streaming\"],\n  ha-icon[data-domain=\"cover\"][data-state=\"open\"],\n  ha-icon[data-domain=\"fan\"][data-state=\"on\"],\n  ha-icon[data-domain=\"light\"][data-state=\"on\"],\n  ha-icon[data-domain=\"input_boolean\"][data-state=\"on\"],\n  ha-icon[data-domain=\"lock\"][data-state=\"unlocked\"],\n  ha-icon[data-domain=\"media_player\"][data-state=\"on\"],\n  ha-icon[data-domain=\"media_player\"][data-state=\"paused\"],\n  ha-icon[data-domain=\"media_player\"][data-state=\"playing\"],\n  ha-icon[data-domain=\"script\"][data-state=\"running\"],\n  ha-icon[data-domain=\"sun\"][data-state=\"above_horizon\"],\n  ha-icon[data-domain=\"switch\"][data-state=\"on\"],\n  ha-icon[data-domain=\"timer\"][data-state=\"active\"],\n  ha-icon[data-domain=\"vacuum\"][data-state=\"cleaning\"] {\n    color: var(--paper-item-icon-active-color, #fdd835);\n  }\n\n  ha-icon[data-domain=\"climate\"][data-state=\"cooling\"] {\n    color: var(--cool-color, #2b9af9);\n  }\n\n  ha-icon[data-domain=\"climate\"][data-state=\"heating\"] {\n    color: var(--heat-color, #ff8100);\n  }\n\n  ha-icon[data-domain=\"climate\"][data-state=\"drying\"] {\n    color: var(--dry-color, #efbd07);\n  }\n\n  ha-icon[data-domain=\"alarm_control_panel\"] {\n    color: var(--alarm-color-armed, var(--label-badge-red));\n  }\n\n  ha-icon[data-domain=\"alarm_control_panel\"][data-state=\"disarmed\"] {\n    color: var(--alarm-color-disarmed, var(--label-badge-green));\n  }\n\n  ha-icon[data-domain=\"alarm_control_panel\"][data-state=\"pending\"],\n  ha-icon[data-domain=\"alarm_control_panel\"][data-state=\"arming\"] {\n    color: var(--alarm-color-pending, var(--label-badge-yellow));\n    animation: pulse 1s infinite;\n  }\n\n  ha-icon[data-domain=\"alarm_control_panel\"][data-state=\"triggered\"] {\n    color: var(--alarm-color-triggered, var(--label-badge-red));\n    animation: pulse 1s infinite;\n  }\n\n  @keyframes pulse {\n    0% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n\n  ha-icon[data-domain=\"plant\"][data-state=\"problem\"],\n  ha-icon[data-domain=\"zwave\"][data-state=\"dead\"] {\n    color: var(--error-state-color, #db4437);\n  }\n\n  /* Color the icon if unavailable */\n  ha-icon[data-state=\"unavailable\"] {\n    color: var(--state-icon-unavailable-color);\n  }\n`;\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../ha-relative-time\";\nimport \"./state-badge\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\n\nclass StateInfo extends PolymerElement {\n  static get template() {\n    return html`\n      ${this.styleTemplate} ${this.stateBadgeTemplate} ${this.infoTemplate}\n    `;\n  }\n\n  static get styleTemplate() {\n    return html`\n      <style>\n        :host {\n          @apply --paper-font-body1;\n          min-width: 120px;\n          white-space: nowrap;\n        }\n\n        state-badge {\n          float: left;\n        }\n\n        :host([rtl]) state-badge {\n          float: right;\n        }\n\n        .info {\n          margin-left: 56px;\n        }\n\n        :host([rtl]) .info {\n          margin-right: 56px;\n          margin-left: 0;\n          text-align: right;\n        }\n\n        .name {\n          @apply --paper-font-common-nowrap;\n          color: var(--primary-text-color);\n          line-height: 40px;\n        }\n\n        .name[in-dialog],\n        :host([secondary-line]) .name {\n          line-height: 20px;\n        }\n\n        .time-ago,\n        .extra-info,\n        .extra-info > * {\n          @apply --paper-font-common-nowrap;\n          color: var(--secondary-text-color);\n        }\n      </style>\n    `;\n  }\n\n  static get stateBadgeTemplate() {\n    return html`\n      <state-badge state-obj=\"[[stateObj]]\"></state-badge>\n    `;\n  }\n\n  static get infoTemplate() {\n    return html`\n      <div class=\"info\">\n        <div class=\"name\" in-dialog$=\"[[inDialog]]\">\n          [[computeStateName(stateObj)]]\n        </div>\n\n        <template is=\"dom-if\" if=\"[[inDialog]]\">\n          <div class=\"time-ago\">\n            <ha-relative-time\n              hass=\"[[hass]]\"\n              datetime=\"[[stateObj.last_changed]]\"\n            ></ha-relative-time>\n          </div>\n        </template>\n        <template is=\"dom-if\" if=\"[[!inDialog]]\">\n          <div class=\"extra-info\"><slot> </slot></div>\n        </template>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: () => false,\n      },\n      rtl: {\n        type: Boolean,\n        reflectToAttribute: true,\n        computed: \"computeRTL(hass)\",\n      },\n    };\n  }\n\n  computeStateName(stateObj) {\n    return computeStateName(stateObj);\n  }\n\n  computeRTL(hass) {\n    return computeRTL(hass);\n  }\n}\n\ncustomElements.define(\"state-info\", StateInfo);\n","import { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport relativeTime from \"../common/datetime/relative_time\";\n\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaRelativeTime extends LocalizeMixin(PolymerElement) {\n  static get properties() {\n    return {\n      hass: Object,\n      datetime: {\n        type: String,\n        observer: \"datetimeChanged\",\n      },\n\n      datetimeObj: {\n        type: Object,\n        observer: \"datetimeObjChanged\",\n      },\n\n      parsedDateTime: Object,\n    };\n  }\n\n  constructor() {\n    super();\n    this.updateRelative = this.updateRelative.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // update every 60 seconds\n    this.updateInterval = setInterval(this.updateRelative, 60000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.updateInterval);\n  }\n\n  datetimeChanged(newVal) {\n    this.parsedDateTime = newVal ? new Date(newVal) : null;\n\n    this.updateRelative();\n  }\n\n  datetimeObjChanged(newVal) {\n    this.parsedDateTime = newVal;\n\n    this.updateRelative();\n  }\n\n  updateRelative() {\n    const root = dom(this);\n    if (!this.parsedDateTime) {\n      root.innerHTML = this.localize(\"ui.components.relative_time.never\");\n    } else {\n      root.innerHTML = relativeTime(this.parsedDateTime, this.localize);\n    }\n  }\n}\n\ncustomElements.define(\"ha-relative-time\", HaRelativeTime);\n","import { LocalizeFunc } from \"../translations/localize\";\n\n/**\n * Calculate a string representing a date object as relative time from now.\n *\n * Example output: 5 minutes ago, in 3 days.\n */\nconst tests = [60, 60, 24, 7];\nconst langKey = [\"second\", \"minute\", \"hour\", \"day\"];\n\nexport default function relativeTime(\n  dateObj: Date,\n  localize: LocalizeFunc,\n  options: {\n    compareTime?: Date;\n    includeTense?: boolean;\n  } = {}\n): string {\n  const compareTime = options.compareTime || new Date();\n  let delta = (compareTime.getTime() - dateObj.getTime()) / 1000;\n  const tense = delta >= 0 ? \"past\" : \"future\";\n  delta = Math.abs(delta);\n\n  let timeDesc;\n\n  for (let i = 0; i < tests.length; i++) {\n    if (delta < tests[i]) {\n      delta = Math.floor(delta);\n      timeDesc = localize(\n        `ui.components.relative_time.duration.${langKey[i]}`,\n        \"count\",\n        delta\n      );\n      break;\n    }\n\n    delta /= tests[i];\n  }\n\n  if (timeDesc === undefined) {\n    delta = Math.floor(delta);\n    timeDesc = localize(\n      \"ui.components.relative_time.duration.week\",\n      \"count\",\n      delta\n    );\n  }\n\n  return options.includeTense === false\n    ? timeDesc\n    : localize(`ui.components.relative_time.${tense}`, \"time\", timeDesc);\n}\n"],"sourceRoot":""}