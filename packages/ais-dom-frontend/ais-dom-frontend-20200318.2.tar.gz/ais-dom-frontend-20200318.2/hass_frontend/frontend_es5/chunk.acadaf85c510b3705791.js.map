{"version":3,"sources":["webpack:///./src/common/string/compare.ts","webpack:///./src/common/entity/entity_filter.ts","webpack:///./src/dialogs/domain-toggler/show-dialog-domain-toggler.ts","webpack:///./src/panels/config/cloud/alexa/cloud-alexa.ts"],"names":["__webpack_require__","d","__webpack_exports__","compare","caseInsensitiveCompare","a","b","toLowerCase","isEmptyFilter","generateFilter","_compute_domain__WEBPACK_IMPORTED_MODULE_0__","filter","include_domains","length","include_entities","exclude_domains","exclude_entities","includeDomains","includeEntities","excludeDomains","excludeEntities","includeDomainsSet","Set","includeEntitiesSet","excludeDomainsSet","excludeEntitiesSet","haveInclude","size","haveExclude","entityId","has","computeDomain","showDomainTogglerDialog","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_0__","loadDomainTogglerDialog","Promise","all","e","then","bind","element","dialogParams","fireEvent","dialogTag","dialogImport","IGNORE_INTERFACES","configIsExposed","config","undefined","should_expose","customElement","CloudAlexa","property","type","Boolean","memoizeOne","_this2","this","_entities","html","_templateObject","emptyFilter","cloudStatus","alexa_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","push","_templateObject2","_showMoreInfo","interfaces","ifc","includes","map","replace","join","_exposeChanged","localize","_templateObject3","narrow","_templateObject4","_templateObject5","_openDomainToggler","_templateObject6","_templateObject7","_templateObject8","changedProps","_get","_getPrototypeOf","prototype","call","_fetchData","prefs","alexa_entity_configs","_callee","entities","_this3","regeneratorRuntime","wrap","_context","prev","next","fetchCloudAlexaEntities","sent","sort","stateA","stateB","computeStateName","stop","ev","currentTarget","_callee2","newExposed","_context2","target","checked","_updateExposed","_callee3","curExposed","_context3","abrupt","_updateConfig","_ensureEntitySync","_callee4","values","updatedConfig","_context4","updateCloudAlexaEntityConfig","Object","assign","_ensureStatusReload","_this4","domains","value","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","css","_templateObject9","LitElement"],"mappings":"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","file":"chunk.acadaf85c510b3705791.js","sourcesContent":["export const compare = (a: string, b: string) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const caseInsensitiveCompare = (a: string, b: string) =>\n  compare(a.toLowerCase(), b.toLowerCase());\n","import { computeDomain } from \"./compute_domain\";\n\nexport type FilterFunc = (entityId: string) => boolean;\n\nexport interface EntityFilter {\n  include_domains: string[];\n  include_entities: string[];\n  exclude_domains: string[];\n  exclude_entities: string[];\n}\n\nexport const isEmptyFilter = (filter: EntityFilter) =>\n  filter.include_domains.length +\n    filter.include_entities.length +\n    filter.exclude_domains.length +\n    filter.exclude_entities.length ===\n  0;\n\nexport const generateFilter = (\n  includeDomains?: string[],\n  includeEntities?: string[],\n  excludeDomains?: string[],\n  excludeEntities?: string[]\n): FilterFunc => {\n  const includeDomainsSet = new Set(includeDomains);\n  const includeEntitiesSet = new Set(includeEntities);\n  const excludeDomainsSet = new Set(excludeDomains);\n  const excludeEntitiesSet = new Set(excludeEntities);\n\n  const haveInclude = includeDomainsSet.size > 0 || includeEntitiesSet.size > 0;\n  const haveExclude = excludeDomainsSet.size > 0 || excludeEntitiesSet.size > 0;\n\n  // Case 1 - no includes or excludes - pass all entities\n  if (!haveInclude && !haveExclude) {\n    return () => true;\n  }\n\n  // Case 2 - includes, no excludes - only include specified entities\n  if (haveInclude && !haveExclude) {\n    return (entityId) =>\n      includeEntitiesSet.has(entityId) ||\n      includeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 3 - excludes, no includes - only exclude specified entities\n  if (!haveInclude && haveExclude) {\n    return (entityId) =>\n      !excludeEntitiesSet.has(entityId) &&\n      !excludeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 4 - both includes and excludes specified\n  // Case 4a - include domain specified\n  //  - if domain is included, pass if entity not excluded\n  //  - if domain is not included, pass if entity is included\n  // note: if both include and exclude domains specified,\n  //   the exclude domains are ignored\n  if (includeDomainsSet.size) {\n    return (entityId) =>\n      includeDomainsSet.has(computeDomain(entityId))\n        ? !excludeEntitiesSet.has(entityId)\n        : includeEntitiesSet.has(entityId);\n  }\n\n  // Case 4b - exclude domain specified\n  //  - if domain is excluded, pass if entity is included\n  //  - if domain is not excluded, pass if entity not excluded\n  if (excludeDomainsSet.size) {\n    return (entityId) =>\n      excludeDomainsSet.has(computeDomain(entityId))\n        ? includeEntitiesSet.has(entityId)\n        : !excludeEntitiesSet.has(entityId);\n  }\n\n  // Case 4c - neither include or exclude domain specified\n  //  - Only pass if entity is included.  Ignore entity excludes.\n  return (entityId) => includeEntitiesSet.has(entityId);\n};\n","import { fireEvent } from \"../../common/dom/fire_event\";\n\nexport interface HaDomainTogglerDialogParams {\n  domains: string[];\n  toggleDomain: (domain: string, turnOn: boolean) => void;\n}\n\nexport const loadDomainTogglerDialog = () =>\n  import(/* webpackChunkName: \"dialog-domain-toggler\" */ \"./dialog-domain-toggler\");\n\nexport const showDomainTogglerDialog = (\n  element: HTMLElement,\n  dialogParams: HaDomainTogglerDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-domain-toggler\",\n    dialogImport: loadDomainTogglerDialog,\n    dialogParams,\n  });\n};\n","import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-icon-button\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/entity/state-info\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudAlexaEntityConfig,\n  AlexaEntityConfig,\n} from \"../../../../data/cloud\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport { AlexaEntity, fetchCloudAlexaEntities } from \"../../../../data/alexa\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../../components/ha-switch\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\nconst IGNORE_INTERFACES = [\"Alexa.EndpointHealth\"];\n\nconst configIsExposed = (config: AlexaEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-alexa\")\nclass CloudAlexa extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property()\n  public cloudStatus!: CloudStatusLoggedIn;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() private _entities?: AlexaEntity[];\n\n  @property()\n  private _entityConfigs: CloudPreferences[\"alexa_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.alexa_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.alexa_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.interfaces\n                .filter((ifc) => !IGNORE_INTERFACES.includes(ifc))\n                .map((ifc) =>\n                  ifc.replace(\"Alexa.\", \"\").replace(\"Controller\", \"\")\n                )\n                .join(\", \")}\n            </state-info>\n            <ha-switch\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @change=${this._exposeChanged}\n            >\n              ${this.hass!.localize(\"ui.panel.config.cloud.alexa.expose\")}\n            </ha-switch>\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"${this.hass!.localize(\n        \"ui.panel.config.cloud.alexa.title\"\n      )}\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  ${this.hass!.localize(\"ui.panel.config.cloud.alexa.banner\")}\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.alexa.exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.alexa.not_exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.alexa_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudAlexaEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = (ev.target as HaSwitch).checked;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _updateConfig(entityId: string, values: AlexaEntityConfig) {\n    const updatedConfig = await updateCloudAlexaEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    // const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        // We don't have anything yet.\n        // showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        // cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n        grid-gap: 8px 8px;\n        padding: 8px;\n      }\n      ha-switch {\n        clear: both;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      ha-switch {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-alexa\": CloudAlexa;\n  }\n}\n"],"sourceRoot":""}