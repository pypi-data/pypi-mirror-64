{"version":3,"sources":["/home/travis/build/holoviz/geoviews/geoviews/dist/lib/index.js","/home/travis/build/holoviz/geoviews/geoviews/dist/lib/models/index.js","/home/travis/build/holoviz/geoviews/geoviews/dist/lib/models/checkpoint_tool.js","/home/travis/build/holoviz/geoviews/geoviews/dist/lib/models/clear_tool.js","/home/travis/build/holoviz/geoviews/geoviews/dist/lib/models/poly_draw.js","/home/travis/build/holoviz/geoviews/geoviews/dist/lib/models/poly_edit.js","/home/travis/build/holoviz/geoviews/geoviews/dist/lib/models/restore_tool.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACntQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/* index.js */ function _(require, module, exports) {\n    var GeoViews = require(\"b9b392174d\") /* ./models */;\n    exports.GeoViews = GeoViews;\n    var base_1 = require(\"@bokehjs/base\");\n    base_1.register_models(GeoViews);\n}\n","/* models/index.js */ function _(require, module, exports) {\n    var checkpoint_tool_1 = require(\"27f5421c63\") /* ./checkpoint_tool */;\n    exports.CheckpointTool = checkpoint_tool_1.CheckpointTool;\n    var clear_tool_1 = require(\"65e2b641a2\") /* ./clear_tool */;\n    exports.ClearTool = clear_tool_1.ClearTool;\n    var poly_draw_1 = require(\"bf8d72a956\") /* ./poly_draw */;\n    exports.PolyVertexDrawTool = poly_draw_1.PolyVertexDrawTool;\n    var poly_edit_1 = require(\"548fd712fd\") /* ./poly_edit */;\n    exports.PolyVertexEditTool = poly_edit_1.PolyVertexEditTool;\n    var restore_tool_1 = require(\"f3e27c114e\") /* ./restore_tool */;\n    exports.RestoreTool = restore_tool_1.RestoreTool;\n}\n","/* models/checkpoint_tool.js */ function _(require, module, exports) {\n    var __extends = (this && this.__extends) || (function () {\n        var extendStatics = function (d, b) {\n            extendStatics = Object.setPrototypeOf ||\n                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                function (d, b) { for (var p in b)\n                    if (b.hasOwnProperty(p))\n                        d[p] = b[p]; };\n            return extendStatics(d, b);\n        };\n        return function (d, b) {\n            extendStatics(d, b);\n            function __() { this.constructor = d; }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n    })();\n    var p = require(\"@bokehjs/core/properties\");\n    var array_1 = require(\"@bokehjs/core/util/array\");\n    var action_tool_1 = require(\"@bokehjs/models/tools/actions/action_tool\");\n    var CheckpointToolView = /** @class */ (function (_super) {\n        __extends(CheckpointToolView, _super);\n        function CheckpointToolView() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        CheckpointToolView.prototype.doit = function () {\n            var sources = this.model.sources;\n            for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {\n                var source = sources_1[_i];\n                if (!source.buffer) {\n                    source.buffer = [];\n                }\n                var data_copy = {};\n                for (var key in source.data) {\n                    var column = source.data[key];\n                    var new_column = [];\n                    for (var _a = 0, column_1 = column; _a < column_1.length; _a++) {\n                        var arr = column_1[_a];\n                        if (Array.isArray(arr) || (ArrayBuffer.isView(arr))) {\n                            new_column.push(array_1.copy(arr));\n                        }\n                        else {\n                            new_column.push(arr);\n                        }\n                    }\n                    data_copy[key] = new_column;\n                }\n                source.buffer.push(data_copy);\n            }\n        };\n        CheckpointToolView.__name__ = \"CheckpointToolView\";\n        return CheckpointToolView;\n    }(action_tool_1.ActionToolView));\n    exports.CheckpointToolView = CheckpointToolView;\n    var CheckpointTool = /** @class */ (function (_super) {\n        __extends(CheckpointTool, _super);\n        function CheckpointTool(attrs) {\n            var _this = _super.call(this, attrs) || this;\n            _this.tool_name = \"Checkpoint\";\n            _this.icon = \"bk-tool-icon-save\";\n            return _this;\n        }\n        CheckpointTool.init_CheckpointTool = function () {\n            this.prototype.default_view = CheckpointToolView;\n            this.define({\n                sources: [p.Array, []],\n            });\n        };\n        CheckpointTool.__name__ = \"CheckpointTool\";\n        CheckpointTool.__module__ = \"geoviews.models.custom_tools\";\n        return CheckpointTool;\n    }(action_tool_1.ActionTool));\n    exports.CheckpointTool = CheckpointTool;\n    CheckpointTool.init_CheckpointTool();\n}\n","/* models/clear_tool.js */ function _(require, module, exports) {\n    var __extends = (this && this.__extends) || (function () {\n        var extendStatics = function (d, b) {\n            extendStatics = Object.setPrototypeOf ||\n                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                function (d, b) { for (var p in b)\n                    if (b.hasOwnProperty(p))\n                        d[p] = b[p]; };\n            return extendStatics(d, b);\n        };\n        return function (d, b) {\n            extendStatics(d, b);\n            function __() { this.constructor = d; }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n    })();\n    var p = require(\"@bokehjs/core/properties\");\n    var action_tool_1 = require(\"@bokehjs/models/tools/actions/action_tool\");\n    var ClearToolView = /** @class */ (function (_super) {\n        __extends(ClearToolView, _super);\n        function ClearToolView() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ClearToolView.prototype.doit = function () {\n            for (var _i = 0, _a = this.model.sources; _i < _a.length; _i++) {\n                var source = _a[_i];\n                for (var column in source.data) {\n                    source.data[column] = [];\n                }\n                source.change.emit();\n                source.properties.data.change.emit();\n            }\n        };\n        ClearToolView.__name__ = \"ClearToolView\";\n        return ClearToolView;\n    }(action_tool_1.ActionToolView));\n    exports.ClearToolView = ClearToolView;\n    var ClearTool = /** @class */ (function (_super) {\n        __extends(ClearTool, _super);\n        function ClearTool(attrs) {\n            var _this = _super.call(this, attrs) || this;\n            _this.tool_name = \"Clear data\";\n            _this.icon = \"bk-tool-icon-reset\";\n            return _this;\n        }\n        ClearTool.init_ClearTool = function () {\n            this.prototype.type = \"ClearTool\";\n            this.prototype.default_view = ClearToolView;\n            this.define({\n                sources: [p.Array, []],\n            });\n        };\n        ClearTool.__name__ = \"ClearTool\";\n        ClearTool.__module__ = \"geoviews.models.custom_tools\";\n        return ClearTool;\n    }(action_tool_1.ActionTool));\n    exports.ClearTool = ClearTool;\n    ClearTool.init_ClearTool();\n}\n","/* models/poly_draw.js */ function _(require, module, exports) {\n    var __extends = (this && this.__extends) || (function () {\n        var extendStatics = function (d, b) {\n            extendStatics = Object.setPrototypeOf ||\n                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                function (d, b) { for (var p in b)\n                    if (b.hasOwnProperty(p))\n                        d[p] = b[p]; };\n            return extendStatics(d, b);\n        };\n        return function (d, b) {\n            extendStatics(d, b);\n            function __() { this.constructor = d; }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n    })();\n    var p = require(\"@bokehjs/core/properties\");\n    var object_1 = require(\"@bokehjs/core/util/object\");\n    var types_1 = require(\"@bokehjs/core/util/types\");\n    var poly_draw_tool_1 = require(\"@bokehjs/models/tools/edit/poly_draw_tool\");\n    var PolyVertexDrawToolView = /** @class */ (function (_super) {\n        __extends(PolyVertexDrawToolView, _super);\n        function PolyVertexDrawToolView() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PolyVertexDrawToolView.prototype._split_path = function (x, y) {\n            for (var r = 0; r < this.model.renderers.length; r++) {\n                var renderer = this.model.renderers[r];\n                var glyph = renderer.glyph;\n                var cds = renderer.data_source;\n                var _a = [glyph.xs.field, glyph.ys.field], xkey = _a[0], ykey = _a[1];\n                var xpaths = cds.data[xkey];\n                var ypaths = cds.data[ykey];\n                for (var index = 0; index < xpaths.length; index++) {\n                    var xs = xpaths[index];\n                    if (!types_1.isArray(xs)) {\n                        xs = Array.from(xs);\n                        cds.data[xkey][index] = xs;\n                    }\n                    var ys = ypaths[index];\n                    if (!types_1.isArray(ys)) {\n                        ys = Array.from(ys);\n                        cds.data[ykey][index] = ys;\n                    }\n                    for (var i = 0; i < xs.length; i++) {\n                        if ((xs[i] == x) && (ys[i] == y) && (i != 0) && (i != (xs.length - 1))) {\n                            xpaths.splice(index + 1, 0, xs.slice(i));\n                            ypaths.splice(index + 1, 0, ys.slice(i));\n                            xs.splice(i + 1);\n                            ys.splice(i + 1);\n                            for (var _i = 0, _b = cds.columns(); _i < _b.length; _i++) {\n                                var column = _b[_i];\n                                if ((column !== xkey) && (column != ykey))\n                                    cds.data[column].splice(index + 1, 0, cds.data[column][index]);\n                            }\n                            return;\n                        }\n                    }\n                }\n            }\n        };\n        PolyVertexDrawToolView.prototype._snap_to_vertex = function (ev, x, y) {\n            if (this.model.vertex_renderer) {\n                // If an existing vertex is hit snap to it\n                var vertex_selected = this._select_event(ev, false, [this.model.vertex_renderer]);\n                var point_ds = this.model.vertex_renderer.data_source;\n                // Type once dataspecs are typed\n                var point_glyph = this.model.vertex_renderer.glyph;\n                var _a = [point_glyph.x.field, point_glyph.y.field], pxkey = _a[0], pykey = _a[1];\n                if (vertex_selected.length) {\n                    // If existing vertex is hit split path at that location\n                    // converting to feature vertex\n                    var index = point_ds.selected.indices[0];\n                    if (pxkey)\n                        x = point_ds.data[pxkey][index];\n                    if (pykey)\n                        y = point_ds.data[pykey][index];\n                    if (ev.type != 'mousemove')\n                        this._split_path(x, y);\n                    point_ds.selection_manager.clear();\n                }\n            }\n            return [x, y];\n        };\n        PolyVertexDrawToolView.prototype._set_vertices = function (xs, ys, styles) {\n            var point_glyph = this.model.vertex_renderer.glyph;\n            var point_cds = this.model.vertex_renderer.data_source;\n            var _a = [point_glyph.x.field, point_glyph.y.field], pxkey = _a[0], pykey = _a[1];\n            if (pxkey) {\n                if (types_1.isArray(xs))\n                    point_cds.data[pxkey] = xs;\n                else\n                    point_glyph.x = { value: xs };\n            }\n            if (pykey) {\n                if (types_1.isArray(ys))\n                    point_cds.data[pykey] = ys;\n                else\n                    point_glyph.y = { value: ys };\n            }\n            if (styles != null) {\n                for (var _i = 0, _b = object_1.keys(styles); _i < _b.length; _i++) {\n                    var key = _b[_i];\n                    point_cds.data[key] = styles[key];\n                    point_glyph[key] = { field: key };\n                }\n            }\n            else {\n                for (var _c = 0, _d = point_cds.columns(); _c < _d.length; _c++) {\n                    var col = _d[_c];\n                    point_cds.data[col] = [];\n                }\n            }\n            this._emit_cds_changes(point_cds, true, true, false);\n        };\n        PolyVertexDrawToolView.prototype._show_vertices = function () {\n            if (!this.model.active) {\n                return;\n            }\n            var xs = [];\n            var ys = [];\n            var styles = {};\n            for (var _i = 0, _a = object_1.keys(this.model.end_style); _i < _a.length; _i++) {\n                var key = _a[_i];\n                styles[key] = [];\n            }\n            for (var i = 0; i < this.model.renderers.length; i++) {\n                var renderer = this.model.renderers[i];\n                var cds = renderer.data_source;\n                var glyph = renderer.glyph;\n                var _b = [glyph.xs.field, glyph.ys.field], xkey = _b[0], ykey = _b[1];\n                for (var _c = 0, _d = cds.get_array(xkey); _c < _d.length; _c++) {\n                    var array = _d[_c];\n                    Array.prototype.push.apply(xs, array);\n                    for (var _e = 0, _f = object_1.keys(this.model.end_style); _e < _f.length; _e++) {\n                        var key = _f[_e];\n                        styles[key].push(this.model.end_style[key]);\n                    }\n                    for (var _g = 0, _h = object_1.keys(this.model.node_style); _g < _h.length; _g++) {\n                        var key = _h[_g];\n                        for (var index = 0; index < (array.length - 2); index++) {\n                            styles[key].push(this.model.node_style[key]);\n                        }\n                    }\n                    for (var _j = 0, _k = object_1.keys(this.model.end_style); _j < _k.length; _j++) {\n                        var key = _k[_j];\n                        styles[key].push(this.model.end_style[key]);\n                    }\n                }\n                for (var _l = 0, _m = cds.get_array(ykey); _l < _m.length; _l++) {\n                    var array = _m[_l];\n                    Array.prototype.push.apply(ys, array);\n                }\n                if (this._drawing && (i == (this.model.renderers.length - 1))) {\n                    // Skip currently drawn vertex\n                    xs.splice(xs.length - 1, 1);\n                    ys.splice(ys.length - 1, 1);\n                    for (var _o = 0, _p = object_1.keys(styles); _o < _p.length; _o++) {\n                        var key = _p[_o];\n                        styles[key].splice(styles[key].length - 1, 1);\n                    }\n                }\n            }\n            this._set_vertices(xs, ys, styles);\n        };\n        PolyVertexDrawToolView.prototype._remove = function () {\n            var renderer = this.model.renderers[0];\n            var cds = renderer.data_source;\n            var glyph = renderer.glyph;\n            var _a = [glyph.xs.field, glyph.ys.field], xkey = _a[0], ykey = _a[1];\n            if (xkey) {\n                var xidx = cds.data[xkey].length - 1;\n                var xs = cds.get_array(xkey)[xidx];\n                xs.splice(xs.length - 1, 1);\n                if (xs.length == 1)\n                    cds.data[xkey].splice(xidx, 1);\n            }\n            if (ykey) {\n                var yidx = cds.data[ykey].length - 1;\n                var ys = cds.get_array(ykey)[yidx];\n                ys.splice(ys.length - 1, 1);\n                if (ys.length == 1)\n                    cds.data[ykey].splice(yidx, 1);\n            }\n            this._emit_cds_changes(cds);\n            this._drawing = false;\n            this._show_vertices();\n        };\n        PolyVertexDrawToolView.__name__ = \"PolyVertexDrawToolView\";\n        return PolyVertexDrawToolView;\n    }(poly_draw_tool_1.PolyDrawToolView));\n    exports.PolyVertexDrawToolView = PolyVertexDrawToolView;\n    var PolyVertexDrawTool = /** @class */ (function (_super) {\n        __extends(PolyVertexDrawTool, _super);\n        function PolyVertexDrawTool(attrs) {\n            return _super.call(this, attrs) || this;\n        }\n        PolyVertexDrawTool.init_PolyVertexDrawTool = function () {\n            this.prototype.default_view = PolyVertexDrawToolView;\n            this.define({\n                end_style: [p.Any, {}],\n                node_style: [p.Any, {}],\n            });\n        };\n        PolyVertexDrawTool.__name__ = \"PolyVertexDrawTool\";\n        PolyVertexDrawTool.__module__ = \"geoviews.models.custom_tools\";\n        return PolyVertexDrawTool;\n    }(poly_draw_tool_1.PolyDrawTool));\n    exports.PolyVertexDrawTool = PolyVertexDrawTool;\n    PolyVertexDrawTool.init_PolyVertexDrawTool();\n}\n","/* models/poly_edit.js */ function _(require, module, exports) {\n    var __extends = (this && this.__extends) || (function () {\n        var extendStatics = function (d, b) {\n            extendStatics = Object.setPrototypeOf ||\n                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                function (d, b) { for (var p in b)\n                    if (b.hasOwnProperty(p))\n                        d[p] = b[p]; };\n            return extendStatics(d, b);\n        };\n        return function (d, b) {\n            extendStatics(d, b);\n            function __() { this.constructor = d; }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n    })();\n    var p = require(\"@bokehjs/core/properties\");\n    var object_1 = require(\"@bokehjs/core/util/object\");\n    var types_1 = require(\"@bokehjs/core/util/types\");\n    var poly_edit_tool_1 = require(\"@bokehjs/models/tools/edit/poly_edit_tool\");\n    var PolyVertexEditToolView = /** @class */ (function (_super) {\n        __extends(PolyVertexEditToolView, _super);\n        function PolyVertexEditToolView() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PolyVertexEditToolView.prototype.deactivate = function () {\n            this._hide_vertices();\n            if (!this._selected_renderer) {\n                return;\n            }\n            else if (this._drawing) {\n                this._remove_vertex();\n                this._drawing = false;\n            }\n            this._emit_cds_changes(this._selected_renderer.data_source, false, true, false);\n        };\n        PolyVertexEditToolView.prototype._pan = function (ev) {\n            if (this._basepoint == null)\n                return;\n            var points = this._drag_points(ev, [this.model.vertex_renderer]);\n            if (!ev.shiftKey) {\n                this._move_linked(points);\n            }\n            if (this._selected_renderer)\n                this._selected_renderer.data_source.change.emit();\n        };\n        PolyVertexEditToolView.prototype._pan_end = function (ev) {\n            if (this._basepoint == null)\n                return;\n            var points = this._drag_points(ev, [this.model.vertex_renderer]);\n            if (!ev.shiftKey) {\n                this._move_linked(points);\n            }\n            this._emit_cds_changes(this.model.vertex_renderer.data_source, false, true, true);\n            if (this._selected_renderer) {\n                this._emit_cds_changes(this._selected_renderer.data_source);\n            }\n            this._basepoint = null;\n        };\n        PolyVertexEditToolView.prototype._drag_points = function (ev, renderers) {\n            if (this._basepoint == null)\n                return [];\n            var _a = this._basepoint, bx = _a[0], by = _a[1];\n            var points = [];\n            for (var _i = 0, renderers_1 = renderers; _i < renderers_1.length; _i++) {\n                var renderer = renderers_1[_i];\n                var basepoint = this._map_drag(bx, by, renderer);\n                var point = this._map_drag(ev.sx, ev.sy, renderer);\n                if (point == null || basepoint == null) {\n                    continue;\n                }\n                var x = point[0], y = point[1];\n                var px = basepoint[0], py = basepoint[1];\n                var _b = [x - px, y - py], dx = _b[0], dy = _b[1];\n                // Type once dataspecs are typed\n                var glyph = renderer.glyph;\n                var cds = renderer.data_source;\n                var _c = [glyph.x.field, glyph.y.field], xkey = _c[0], ykey = _c[1];\n                for (var _d = 0, _e = cds.selected.indices; _d < _e.length; _d++) {\n                    var index = _e[_d];\n                    var point_1 = [];\n                    if (xkey) {\n                        point_1.push(cds.data[xkey][index]);\n                        cds.data[xkey][index] += dx;\n                    }\n                    if (ykey) {\n                        point_1.push(cds.data[ykey][index]);\n                        cds.data[ykey][index] += dy;\n                    }\n                    point_1.push(dx);\n                    point_1.push(dy);\n                    points.push(point_1);\n                }\n                cds.change.emit();\n            }\n            this._basepoint = [ev.sx, ev.sy];\n            return points;\n        };\n        PolyVertexEditToolView.prototype._set_vertices = function (xs, ys, styles) {\n            var point_glyph = this.model.vertex_renderer.glyph;\n            var point_cds = this.model.vertex_renderer.data_source;\n            var _a = [point_glyph.x.field, point_glyph.y.field], pxkey = _a[0], pykey = _a[1];\n            if (pxkey) {\n                if (types_1.isArray(xs))\n                    point_cds.data[pxkey] = xs;\n                else\n                    point_glyph.x = { value: xs };\n            }\n            if (pykey) {\n                if (types_1.isArray(ys))\n                    point_cds.data[pykey] = ys;\n                else\n                    point_glyph.y = { value: ys };\n            }\n            if (styles != null) {\n                for (var _i = 0, _b = object_1.keys(styles); _i < _b.length; _i++) {\n                    var key = _b[_i];\n                    point_cds.data[key] = styles[key];\n                    point_glyph[key] = { field: key };\n                }\n            }\n            else {\n                for (var _c = 0, _d = point_cds.columns(); _c < _d.length; _c++) {\n                    var col = _d[_c];\n                    point_cds.data[col] = [];\n                }\n            }\n            this._emit_cds_changes(point_cds, true, true, false);\n        };\n        PolyVertexEditToolView.prototype._move_linked = function (points) {\n            if (!this._selected_renderer)\n                return;\n            var renderer = this._selected_renderer;\n            var glyph = renderer.glyph;\n            var cds = renderer.data_source;\n            var _a = [glyph.xs.field, glyph.ys.field], xkey = _a[0], ykey = _a[1];\n            var xpaths = cds.data[xkey];\n            var ypaths = cds.data[ykey];\n            for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                var point = points_1[_i];\n                var x = point[0], y = point[1], dx = point[2], dy = point[3];\n                for (var index = 0; index < xpaths.length; index++) {\n                    var xs = xpaths[index];\n                    var ys = ypaths[index];\n                    for (var i = 0; i < xs.length; i++) {\n                        if ((xs[i] == x) && (ys[i] == y)) {\n                            xs[i] += dx;\n                            ys[i] += dy;\n                        }\n                    }\n                }\n            }\n        };\n        PolyVertexEditToolView.prototype._tap = function (ev) {\n            var _a;\n            var renderer = this.model.vertex_renderer;\n            var point = this._map_drag(ev.sx, ev.sy, renderer);\n            if (point == null)\n                return;\n            else if (this._drawing && this._selected_renderer) {\n                var x = point[0], y = point[1];\n                var cds = renderer.data_source;\n                // Type once dataspecs are typed\n                var glyph = renderer.glyph;\n                var _b = [glyph.x.field, glyph.y.field], xkey = _b[0], ykey = _b[1];\n                var indices = cds.selected.indices;\n                _a = this._snap_to_vertex(ev, x, y), x = _a[0], y = _a[1];\n                var index = indices[0];\n                cds.selected.indices = [index + 1];\n                if (xkey) {\n                    var xs = cds.get_array(xkey);\n                    var nx = xs[index];\n                    xs[index] = x;\n                    xs.splice(index + 1, 0, nx);\n                }\n                if (ykey) {\n                    var ys = cds.get_array(ykey);\n                    var ny = ys[index];\n                    ys[index] = y;\n                    ys.splice(index + 1, 0, ny);\n                }\n                cds.change.emit();\n                this._emit_cds_changes(this._selected_renderer.data_source, true, false, true);\n                return;\n            }\n            var append = ev.shiftKey;\n            this._select_event(ev, append, [renderer]);\n        };\n        PolyVertexEditToolView.prototype._show_vertices = function (ev) {\n            if (!this.model.active)\n                return;\n            var renderers = this._select_event(ev, false, this.model.renderers);\n            if (!renderers.length) {\n                this._hide_vertices();\n                this._selected_renderer = null;\n                this._drawing = false;\n                return;\n            }\n            var renderer = renderers[0];\n            var glyph = renderer.glyph;\n            var cds = renderer.data_source;\n            var index = cds.selected.indices[0];\n            var _a = [glyph.xs.field, glyph.ys.field], xkey = _a[0], ykey = _a[1];\n            var xs;\n            var ys;\n            if (xkey) {\n                xs = cds.data[xkey][index];\n                if (!types_1.isArray(xs))\n                    cds.data[xkey][index] = xs = Array.from(xs);\n            }\n            else {\n                xs = glyph.xs.value;\n            }\n            if (ykey) {\n                ys = cds.data[ykey][index];\n                if (!types_1.isArray(ys))\n                    cds.data[ykey][index] = ys = Array.from(ys);\n            }\n            else {\n                ys = glyph.ys.value;\n            }\n            var styles = {};\n            for (var _i = 0, _b = object_1.keys(this.model.end_style); _i < _b.length; _i++) {\n                var key = _b[_i];\n                styles[key] = [this.model.end_style[key]];\n            }\n            for (var _c = 0, _d = object_1.keys(this.model.node_style); _c < _d.length; _c++) {\n                var key = _d[_c];\n                for (var index_1 = 0; index_1 < (xs.length - 2); index_1++) {\n                    styles[key].push(this.model.node_style[key]);\n                }\n            }\n            for (var _e = 0, _f = object_1.keys(this.model.end_style); _e < _f.length; _e++) {\n                var key = _f[_e];\n                styles[key].push(this.model.end_style[key]);\n            }\n            this._selected_renderer = renderer;\n            this._set_vertices(xs, ys, styles);\n        };\n        PolyVertexEditToolView.__name__ = \"PolyVertexEditToolView\";\n        return PolyVertexEditToolView;\n    }(poly_edit_tool_1.PolyEditToolView));\n    exports.PolyVertexEditToolView = PolyVertexEditToolView;\n    var PolyVertexEditTool = /** @class */ (function (_super) {\n        __extends(PolyVertexEditTool, _super);\n        function PolyVertexEditTool(attrs) {\n            return _super.call(this, attrs) || this;\n        }\n        PolyVertexEditTool.init_PolyVertexEditTool = function () {\n            this.prototype.default_view = PolyVertexEditToolView;\n            this.define({\n                node_style: [p.Any, {}],\n                end_style: [p.Any, {}],\n            });\n        };\n        PolyVertexEditTool.__name__ = \"PolyVertexEditTool\";\n        PolyVertexEditTool.__module__ = \"geoviews.models.custom_tools\";\n        return PolyVertexEditTool;\n    }(poly_edit_tool_1.PolyEditTool));\n    exports.PolyVertexEditTool = PolyVertexEditTool;\n    PolyVertexEditTool.init_PolyVertexEditTool();\n}\n","/* models/restore_tool.js */ function _(require, module, exports) {\n    var __extends = (this && this.__extends) || (function () {\n        var extendStatics = function (d, b) {\n            extendStatics = Object.setPrototypeOf ||\n                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                function (d, b) { for (var p in b)\n                    if (b.hasOwnProperty(p))\n                        d[p] = b[p]; };\n            return extendStatics(d, b);\n        };\n        return function (d, b) {\n            extendStatics(d, b);\n            function __() { this.constructor = d; }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n    })();\n    var p = require(\"@bokehjs/core/properties\");\n    var action_tool_1 = require(\"@bokehjs/models/tools/actions/action_tool\");\n    var RestoreToolView = /** @class */ (function (_super) {\n        __extends(RestoreToolView, _super);\n        function RestoreToolView() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        RestoreToolView.prototype.doit = function () {\n            var sources = this.model.sources;\n            for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {\n                var source = sources_1[_i];\n                if (!source.buffer || (source.buffer.length == 0)) {\n                    continue;\n                }\n                source.data = source.buffer.pop();\n                source.change.emit();\n                source.properties.data.change.emit();\n            }\n        };\n        RestoreToolView.__name__ = \"RestoreToolView\";\n        return RestoreToolView;\n    }(action_tool_1.ActionToolView));\n    exports.RestoreToolView = RestoreToolView;\n    var RestoreTool = /** @class */ (function (_super) {\n        __extends(RestoreTool, _super);\n        function RestoreTool(attrs) {\n            var _this = _super.call(this, attrs) || this;\n            _this.tool_name = \"Restore\";\n            _this.icon = \"bk-tool-icon-undo\";\n            return _this;\n        }\n        RestoreTool.init_RestoreTool = function () {\n            this.prototype.default_view = RestoreToolView;\n            this.define({\n                sources: [p.Array, []]\n            });\n        };\n        RestoreTool.__name__ = \"RestoreTool\";\n        RestoreTool.__module__ = \"geoviews.models.custom_tools\";\n        return RestoreTool;\n    }(action_tool_1.ActionTool));\n    exports.RestoreTool = RestoreTool;\n    RestoreTool.init_RestoreTool();\n}\n"]}