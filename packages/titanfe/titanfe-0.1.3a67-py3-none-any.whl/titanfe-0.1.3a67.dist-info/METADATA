Metadata-Version: 2.1
Name: titanfe
Version: 0.1.3a67
Summary: titan Data Flow Engine for Python
Home-page: http://www.industrial-devops.org/
Author: wobe-systems GmbH
Author-email: info@industrial-devops.org
License: Apache License, Version 2.0
Project-URL: Bug Tracker, https://tracker.industrial-devops.org
Project-URL: Documentation, https://readthedocs.org/projects/titanfe
Project-URL: Source Code, https://git.industrial-devops.org/titan/DataFlowEngine/flowengine-py
Platform: Windows
Platform: Linux
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.7
Description-Content-Type: text/markdown
Requires-Dist: ujotypes (>=0.1.2)
Requires-Dist: ruamel.yaml
Requires-Dist: janus
Requires-Dist: aiokafka (==0.5.2)
Requires-Dist: kafka-python (==1.4.6)
Requires-Dist: elasticsearch
Requires-Dist: fastapi
Requires-Dist: uvicorn (==0.9.*)
Requires-Dist: aiohttp-requests
Requires-Dist: uvloop (==0.13.*); platform_system == "Linux"

# Titan Flow Engine

The Titan Flow Engine provides the backend services for running data flows
on a node.

The core flow engine is composed of two services:

- **Control Peer**: One peer per node that takes care of managing Brick Runners on that
  node.
- **Brick Runner**: Virtual Machine for executing the Bricks that the Control
  Peer has started on it's node. The Brick Runner is generic and can process all types of Bricks.
  Each runner will only execute one type of Brick at a time.

Additionally Version 0.1.3 and onward require the Flow Director to run.

If you want to run a local self contained version please use the
[Version 0.1.2x](https://pypi.org/project/titanfe/#history) of the flow engine.

## Choose How to Install

Titan Flow Engine **requires Python 3.7** to be installed.

Depending on whether you want to contribute to the Titan Flow Engine source code you want to choose one of the following options to install:

### Installing via PyPi

The flow engine is available on the Python Package Index (PyPi). It is available
for Linux and Windows x64 systems. To install it without having to build it yourself
open a command line and run:

```sh
pip install titanfe
```

### Building the Titan Flow Engine (Advanced Install)

Required packages for building or developing the project can be installed
via the `requirements.txt` in the project's root folder:

```sh
pip install -r requirements.txt
```

To build and install open a command line and run:

```sh
python setup.py build
pip install .
```

## Running the flow engine

The flow engine is being started by starting the Control Peer. The Control Peer takes care of starting Brick Runners as needed.

Parameters for starting the Control Peer on the command line are:

| Parameter                       | Opt | Description                                               |
| ------------------------------- | --- | --------------------------------------------------------- |
| brick_config                    |     | Path to Brick configuration file                          |
| kafka \<hostname:port\>         | x   | Network address of Kafka instance for metrics and logging |
|                                 |     | (default: localhost:9092)                                 |
| flow_director \<hostname:port\> | x   | Network address of the FlowDirector                       |
|                                 |     | (default: localhost:8080)                                 |

To try out the flow engine first download and start the [Flow Director](https://git.industrial-devops.org/titan/DataFlowEngine/flowengine-go/tree/master). The Flow Director and further services are needed for the flow engine to receive flows to process.

Afterwards download an example Brick configuration file [(demo_flow.yml)](https://git.industrial-devops.org/titan/DataFlowEngine/flowengine-py/tree/master/examples)
and store it in an arbitrary folder.
Then, open a command line and run the demo flow from within that folder:

```sh
python -m titanfe.apps.control_peer -kafka localhost:9092 -flow_director localhost:8080 -brick_config demo_flow.yml
```

Or run it from the root directory of the flow engine by providing the path to the example:

```sh
python -m titanfe.apps.control_peer -kafka localhost:9092 -flow_director localhost:8080 -brick_config path_to_example/demo_flow.yml
```

## Code Quality

Code quality within the project is checked using pylint and flake8.

### pylint

Linting is performed with [pylint](https://www.pylint.org). To define the
intended checks `.pylintrc` is used to configure linting for this project.

Running pylint for the python code in this project the following commands are
used:

```sh
pylint --rcfile=.pylintrc titanfe
```

Linting the tests is done running the command:

```sh
pylint --rcfile=.pylintrc --disable=duplicate-code ./test
```

### flake8

To make sure the PEP8 standard is applied to the code flake8 can be added to
the static tests.

For this project we exclude various errors, warnings and notifications because
they do not make sense at this time. This may change while refactoring is
considered.

You can run flake 8 with:

```sh
flake8
```

It finds all the python files in this project.
The configuration for this project is read from `.flake8` in the project's
root directory.


