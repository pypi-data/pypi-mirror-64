# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['copier', 'copier.config']

package_data = \
{'': ['*']}

install_requires = \
['colorama>=0.4.0,<1.0.0',
 'jinja2>=2.10.0,<3.0.0',
 'packaging>=20.1,<21.0',
 'pathspec>=0.7.0,<0.8.0',
 'plumbum>=1.6.0,<2.0.0',
 'pydantic>=1.0b1',
 'pytest-xdist>=1.31.0,<2.0.0',
 'pyyaml-include>=1.2,<2.0',
 'pyyaml>=5.3,<6.0',
 'regex>=2020.2.20,<2021.0.0']

entry_points = \
{'console_scripts': ['copier = copier.cli:CopierApp.run']}

setup_kwargs = {
    'name': 'copier',
    'version': '3.0.2',
    'description': 'A library for rendering project templates.',
    'long_description': '## Think this library is awesome? Vote with a 👍 to include it in the awesome-python list: https://github.com/vinta/awesome-python/pull/1350\n\n![Copier](https://github.com/pykong/copier/raw/master/img/copier-logotype.png)\n\n[![codecov](https://codecov.io/gh/pykong/copier/branch/master/graph/badge.svg)](https://codecov.io/gh/pykong/copier)\n![](https://github.com/pykong/copier/workflows/CI/badge.svg)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n![](https://img.shields.io/pypi/pyversions/copier)\n![](https://img.shields.io/pypi/v/copier)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nA library for rendering project templates.\n\n- Works with **local** paths and **git URLs**.\n- Your project can include any file and `Copier` can dynamically replace values in any kind of text file.\n- It generates a beautiful output and takes care of not overwrite existing files unless instructed to do so.\n\n![Sample output](https://github.com/pykong/copier/raw/master/img/copier-output.png)\n\n## How to use\n\n- Use it in your Python code:\n\n```python\nfrom copier import copy\n\n# Create a project from a local path\ncopy("path/to/project/template", "path/to/destination")\n\n# Or from a git URL.\ncopy("https://github.com/pykong/copier.git", "path/to/destination")\n\n# You can also use "gh:" as a shortcut of "https://github.com/"\ncopy("gh:pykong/copier.git", "path/to/destination")\n\n# Or "gl:" as a shortcut of "https://gitlab.com/"\ncopy("gl:pykong/copier.git", "path/to/destination")\n```\n\n- Or as a command-line tool:\n\n```bash\ncopier path/to/project/template path/to/destination\n```\n\n## How it works\n\nThe content of the files inside the project template is copied to the destination\nwithout changes, **unless they end with `.tmpl`** (or your chosen `templates_suffix`).\nIn that case, the templating engine will be used to render them.\n\nA slightly customized Jinja2 templating is used. The main difference is\nthose variables are referenced with `[[ name ]]` instead of\n`{{ name }}` and blocks are `[% if name %]` instead of\n`{% if name %}`. To read more about templating see the [Jinja2\ndocumentation](https://jinja.palletsprojects.com/).\n\nIf a **YAML** file named `copier.yml` is found in the root of the\nproject (alternatively, a YAML file named `copier.yaml`), the user will be\nprompted to fill in or confirm the default values.\n\nUse the `data` argument to pass whatever extra context you want to be available\nin the templates. The arguments can be any valid Python value, even a\nfunction.\n\nSince version 3.0, only Python 3.6 or later are supported. Please use the\n2.5.1 version if your project runs on a previous Python version.\n\n## The `copier.yml` file\n\nIf a `copier.yml`, or `copier.yaml` is found in the root of the template,\nit will be read and used for two purposes:\n\n### Prompt the user for information\n\nFor each key found, Copier will prompt the user to fill or confirm the values before\nthey become available to the project template. So content like this:\n\n```yaml\nname_of_the_project: My awesome project\nnumber_of_eels: 1234\nyour_email: ""\n```\n\nwill result in this series of questions:\n\n<pre>\n  <b>name_of_the_project</b>? Format: yaml\n🎤 [My awesome project]:\n\n  <b>number_of_eels</b>? Format: yaml\n🎤 [1234]:\n\n  <b>your_email</b>? Format: yaml\n🎤 []:\n</pre>\n\n#### Advanced prompt formatting\n\nApart from the simplified format, as seen above, Copier supports a more advanced\nformat to ask users for data. To use it, the value must be a dict.\n\nSupported keys:\n\n- **type**: User input must match this type.\n  Options are: bool, float, int, json, str, yaml.\n- **help**: Additional text to help the user know what\'s this question for.\n- **default**: Leave empty to force the user to answer. Provide a default to\n  save him from typing it if it\'s quite common. When using **choices**, the\n  default must be the choice _value_, not its _key_. If values are quite long,\n  you can use\n  [YAML anchors](https://confluence.atlassian.com/bitbucket/yaml-anchors-960154027.html).\n\n```yaml\nlove_copier:\n  type: bool # This makes Copier ask for y/n\n  help: Do you love Copier?\n  default: yes # Without a default, you force the user to answer\n\nproject_name:\n  type: str # Any value will be treated raw as a string\n  help: An awesome project needs an awesome name. Tell me yours.\n  default: paradox-specifier\n\nrocket_launch_password:\n  type: str\n  secret: true # This value will not be logged into .copier-answers.yml\n  default: my top secret password\n\n# I\'ll avoid default and help here, but you can use them too\nage:\n  type: int\n\nheight:\n  type: float\n\nany_json:\n  help: Tell me anything, but format it as a one-line JSON string\n  type: json\n\nany_yaml:\n  help: Tell me anything, but format it as a one-line YAML string\n  type: yaml # This is the default type, also for short syntax questions\n\nyour_favorite_book:\n  # User will type 1 or 2, but your template will get the value\n  choices:\n    - The Bible\n    - The Hitchhiker\'s Guide to the Galaxy\n\nproject_license:\n  # User will type 1 or 2 and will see only the dict key, but you will\n  # get the dict value in your template\n  choices:\n    MIT: &mit_text |\n      Here I can write the full text of the MIT license.\n      This will be a long text, shortened here for example purposes.\n    Apache2: |\n      Full text of Apache2 license.\n  # When using choices, the default value is the value, **not** the key;\n  # that\'s why I\'m using the YAML anchor declared above to avoid retyping the\n  # whole license\n  default: *mit_text\n\nclose_to_work:\n  help: Do you live close to your work?\n  # This format works just like the dict one\n  choices:\n    - [at home, I work at home]\n    - [less than 10km, quite close]\n    - [more than 10km, not so close]\n    - [more than 100km, quite far away]\n```\n\n### Arguments defaults\n\nThe keys `_exclude`, `_skip_if_exists`, `_tasks`, and `_extra_paths`\nin the `copier.yml` file, will be treated as the default values for the `exclude`,\n`tasks`, and , `extra_paths` arguments to `copier.copy()`.\n\nNote that they become just _the defaults_, so any explicitly-passed argument will\noverwrite them.\n\n```yaml\n# File where answers will be recorded. Defaults to `.copier-answers.yml`.\n# Remember to add that file to your template if you want to support updates.\n_answers_file: .my-custom-answers.yml\n\n# Suffix that instructs which files are to be processed by Jinja as templates\n_templates_suffix: .tmpl\n\n# gitignore-style patterns files/folders that must not be copied.\n_exclude:\n  - "*.bar"\n  - ".git"\n\n# gitignore-style patterns files to skip, without asking, if they already exists\n# in the destination folder\n_skip_if_exists:\n\n# Commands to be executed after the copy\n# They have the $STAGE=task environment variable\n_tasks:\n  # Strings get executed under system\'s default shell\n  - "git init"\n  - "rm [[ name_of_the_project / \'README.md\' ]]"\n  # Arrays are executed without shell, saving you the work of escaping arguments\n  - [invoke, "--search-root=[[ _copier_conf.src_path ]]", after-copy]\n  # You are able to output the full conf to JSON, to be parsed by your script,\n  # but you cannot use the normal `|tojson` filter; instead, use `.json()`\n  - [invoke, end-process, "--full-conf=[[ _copier_conf.json() ]]"]\n\n# Migrations are like tasks, but they are executed:\n# - Evaluated using PEP 440\n# - In the same order as declared here\n# - Only when new version >= declared version > old version\n# - Only when updating\n# - After being rendered with the same renderer as the rest of the template\n# - With the same supported syntaxes as `_tasks`, above\n# - With $VERSION_FROM, $VERSION_TO and $VERSION_CURRENT, $STAGE (before/after)\n#   environment variables\n_migrations:\n  - version: v1.0.0\n    before:\n      - rm ./old-folder\n    after:\n      # [[ _copier_conf.src_path ]] points to the path where the template was\n      # cloned, so it can be helpful to run migration scripts stored there.\n      - invoke -r [[ _copier_conf.src_path ]] -c migrations migrate $VERSION_CURRENT\n\n# Additional paths, from where to search for templates\n_extra_paths:\n  - ~/Projects/templates\n```\n\n### Include other yaml files\n\nTo reuse configurations across templates you can reference other yaml files. You just need to state the `!include` together with the absolute or relative path to the file to be included. Multiple files can be included per `copier.yml`. For more detailed instructions, see [pyyaml-include](https://github.com/tanbro/pyyaml-include#usage).\n\n```yaml\n# other_place/include_me.yml\ncommon_setting: "1"\n\n# copier.yml\n!include other_place/include_me.yml\n```\n\n**Warning:** Use only trusted project templates as these tasks run with the\nsame level of access as your user.\n\n## The answers file\n\nIf the destination path exists and a `.copier-answers.yml` file is\npresent there, it will be used to load the last user\'s answers to the questions\nmade in [the `copier.yml` file](#the-copieryml-file).\n\nThis makes projects easier to update because when the user is asked, the default\nanswers will be the last ones he used.\n\nTo make sure projects based on your templates can make use of this nice feature,\n**add a file called `[[ _copier_conf.answers_file ]].tmpl`** (or your chosen `templates_suffix`)\nin your template\'s root folder, with this content:\n\n```yml\n# Changes here will be overwritten by Copier\n[[_copier_answers|to_nice_yaml]]\n```\n\nIf this file is called different than `[[ _copier_conf.answers_file ]].tmpl` your users will not be able to choose a custom answers file name, and thus they will not be able to integrate several updatable templates into one destination directory.\n\nThe builtin `_copier_answers` variable includes all data needed to smooth future updates\nof this project. This includes (but is not limited to) all JSON-serializable\nvalues declared as user questions in [the `copier.yml` file](#the-copieryml-file).\n\nAs you can see, you also have the power to customize what will be logged here.\nKeys that start with an underscore (`_`) are specific to Copier. Other keys\nshould match questions in `copier.yml`.\n\nIf you plan to integrate several templates into one single downstream project, you can use a different path for this file:\n\n```yaml\n# In your `copier.yml`:\n_answers_file: .my-custom-answers.yml\n```\n\n### Updating a project\n\nThe best way to update a project from its template is when all of these conditions are true:\n\n1. The template includes a valid `.copier-answers.yml` file.\n2. The template is versioned with git (with tags).\n3. The destination folder is versioned with git.\n\nIf that\'s your case, then just enter the destination folder, make sure\n`git status` shows it clean, and run:\n\n```bash\ncopier update\n```\n\nThis will read all available git tags, will compare them using [PEP 440](https://www.python.org/dev/peps/pep-0440/), and will check out the latest one before updating. To update to the latest commit, add `--vcs-ref=HEAD`. You can use any other git ref you want.\n\nCopier will do its best to respect the answers you provided when copied for the last\ncopy, and the git diff that has evolved since the last copy. If there are conflicts,\nyou will probably find diff files around.\n\n## Patterns syntax\n\nCopier supports matching names against patterns in a gitignore style fashion. This works for the options `exclude` and `skip` . This means you can write patterns as you would for any `.gitignore` file. The full range of the gitignore syntax ist supported via [pathspec]([https://github.com/cpburnz/python-path-specification](https://github.com/cpburnz/python-path-specification).\n\n### Examples for pattern matching\n\nPutting the following settings in your `copier.yaml` file would exclude all files ending with "txt" from being copied to the destination folder, except the file `a.txt`.\n\n```yaml\n_exclude:\n  # match all text files...\n  - "*.txt"\n  # .. but not this one:\n  - "!a.txt"\n```\n\n## Template helpers\n\nIn addition to [all the features Jinja supports](https://jinja.palletsprojects.com/en/2.10.x/templates/),\nCopier includes:\n\n### Builtin variables/functions\n\n- `now()` to get current UTC time.\n- `make_secret()` to get a random string.\n- `_copier_answers` includes the current answers dict, but slightly modified to make it suitable to [autoupdate your project safely](#the-answers-file):\n  - It doesn\'t contain secret answers.\n  - It doesn\'t contain any data that is not easy to render to JSON or YAML.\n- `_copier_conf` includes the current copier `ConfigData` object, also slightly modified:\n  - It only contains JSON-serializable data.\n  - But you have to serialize it with `[[ _copier_conf.json() ]]` instead of `[[ _copier_conf|tojson ]]`.\n  - ⚠️ It contains secret answers inside its `.data` key.\n  - Modifying it doesn\'t alter the current rendering configuration.\n\n### Builtin filters\n\n- `anything|to_nice_yaml` to print as pretty-formatted YAML.\n\n  Without arguments it defaults to:\n  `anything|to_nice_yaml(indent=2, width=80, allow_unicode=True)`,\n  but you can modify those.\n\n---\n\n## API\n\n#### copier.copy()\n\n```python\ncopier.copy(\n    src_path,\n    dst_path,\n\n    data=DEFAULT_DATA,\n    *,\n    exclude=DEFAULT_FILTER,\n    skip_if_exists=[],\n    tasks=[],\n\n    envops={},\n    extra_paths=[],\n\n    pretend=False,\n    force=False,\n    skip=False,\n    quiet=False,\n    cleanup_on_error=True\n)\n```\n\nUses the template in _src_path_ to generate a new project at _dst_path_.\n\n**Arguments**:\n\n- **src_path** (str):<br>\n  Absolute path to the project skeleton, which can also be a version control\n  system URL.\n\n- **dst_path** (str):<br>\n  Absolute path to where to render the skeleton.\n\n- **data** (dict):<br>\n  Data to be passed to the templates in addition to the user data from\n  a `copier.yml`.\n\n- **exclude** (list):<br>\n  A list of names or gitignore-style patterns matching files or folders\n  that must not be copied.\n\n- **skip_if_exists** (list):<br>\n  A list of names or gitignore-style patterns matching files or folders, that are skipped if another with the same name already exists in the destination folder. (It only makes sense if you are copying to a folder that already exists).\n\n- **tasks** (list):<br>\n  Optional lists of commands to run in order after finishing the copy. Like in\n  the templates files, you can use variables on the commands that will be\n  replaced by the real values before running the command. If one of the commands\n  fails, the rest of them will not run.\n\n- **envops** (dict):<br>\n  Extra options for the Jinja template environment.\n  See available options in\n  [Jinja\'s docs](https://jinja.palletsprojects.com/en/2.10.x/api/#jinja2.Environment).\n\n  Copier uses these defaults that are different from Jinja\'s:\n\n  ```yml\n  # copier.yml\n  _envops:\n    block_start_string: "[%"\n    block_end_string: "%]"\n    comment_start_string: "[#"\n    comment_end_string: "#]"\n    variable_start_string: "[["\n    variable_end_string: "]]"\n    keep_trailing_newline: true\n  ```\n\n  You can use default Jinja syntax with:\n\n  ```yml\n  # copier.yml\n  _envops:\n    block_start_string: "{%"\n    block_end_string: "%}"\n    comment_start_string: "{#"\n    comment_end_string: "#}"\n    variable_start_string: "{{"\n    variable_end_string: "}}"\n    keep_trailing_newline: false\n  ```\n\n- **extra_paths** (list):<br>\n  Additional paths, from where to search for templates. This is intended to be\n  used with shared parent templates, files with macros, etc. outside the copied\n  project skeleton.\n\n- **pretend** (bool):<br>\n  Run but do not make any changes.\n\n- **force** (bool):<br>\n  Overwrite files that already exist, without asking.\n\n- **skip** (bool):<br>\n  Skip files that already exist, without asking.\n\n- **quiet** (bool):<br>\n  Suppress the status output.\n\n- **cleanup_on_error** (bool):<br>\n  Remove the destination folder if the copy process or one of the tasks fails.\n  True by default.\n\n## Credits\n\nSpecial thanks go to [jpscaletti](<[https://github.com/jpscaletti](https://github.com/jpscaletti)>) for originally creating `Copier`. This project would not be a thing without him.\n\nBig thanks also go to [Yajo](<[https://github.com/Yajo](https://github.com/Yajo)>) for his relentless zest for improving `Copier` even further.\n',
    'author': 'Ben Felder',
    'author_email': 'ben@felder.io',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/pykong/copier',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
