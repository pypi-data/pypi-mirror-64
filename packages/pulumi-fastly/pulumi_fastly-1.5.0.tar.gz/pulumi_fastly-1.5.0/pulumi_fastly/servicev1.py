# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Servicev1(pulumi.CustomResource):
    acls: pulumi.Output[list]
    """
    A set of ACL configuration blocks.  Defined below.

      * `acl_id` (`str`) - The ID of the ACL.
      * `name` (`str`) - The unique name for the Service to create.
    """
    activate: pulumi.Output[bool]
    """
    Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
    """
    active_version: pulumi.Output[float]
    """
    The currently active version of your Fastly Service.
    """
    backends: pulumi.Output[list]
    """
    A set of Backends to service requests from your Domains.
    Defined below. Backends must be defined in this argument, or defined in the
    `vcl` argument below

      * `address` (`str`)
      * `autoLoadbalance` (`bool`)
      * `betweenBytesTimeout` (`float`)
      * `connectTimeout` (`float`)
      * `errorThreshold` (`float`)
      * `firstByteTimeout` (`float`)
      * `healthcheck` (`str`) - Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
      * `maxConn` (`float`)
      * `maxTlsVersion` (`str`)
      * `minTlsVersion` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `overrideHost` (`str`)
      * `port` (`float`)
      * `requestCondition` (`str`)
      * `shield` (`str`)
      * `sslCaCert` (`str`)
      * `sslCertHostname` (`str`)
      * `sslCheckCert` (`bool`)
      * `sslCiphers` (`str`)
      * `sslClientCert` (`str`)
      * `sslClientKey` (`str`)
      * `sslHostname` (`str`)
      * `sslSniHostname` (`str`)
      * `useSsl` (`bool`)
      * `weight` (`float`)
    """
    bigqueryloggings: pulumi.Output[list]
    """
    A BigQuery endpoint to send streaming logs too.
    Defined below.

      * `dataset` (`str`)
      * `email` (`str`)
      * `format` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `placement` (`str`)
      * `projectId` (`str`)
      * `responseCondition` (`str`)
      * `secretKey` (`str`)
      * `table` (`str`)
      * `template` (`str`)
    """
    blobstorageloggings: pulumi.Output[list]
    """
    An Azure Blob Storage endpoint to send streaming logs too.
    Defined below.

      * `accountName` (`str`)
      * `container` (`str`)
      * `format` (`str`)
      * `formatVersion` (`float`)
      * `gzipLevel` (`float`)
      * `messageType` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `path` (`str`)
      * `period` (`float`)
      * `placement` (`str`)
      * `publicKey` (`str`)
      * `responseCondition` (`str`)
      * `sasToken` (`str`)
      * `timestampFormat` (`str`)
    """
    cache_settings: pulumi.Output[list]
    """
    A set of Cache Settings, allowing you to override

      * `action` (`str`)
      * `cacheCondition` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `staleTtl` (`float`)
      * `ttl` (`float`)
    """
    cloned_version: pulumi.Output[float]
    comment: pulumi.Output[str]
    """
    A personal freeform descriptive note
    """
    conditions: pulumi.Output[list]
    """
    A set of conditions to add logic to any basic
    configuration object in this service. Defined below.

      * `name` (`str`) - The unique name for the Service to create.
      * `priority` (`float`)
      * `statement` (`str`)
      * `type` (`str`)
    """
    default_host: pulumi.Output[str]
    """
    The default hostname.
    """
    default_ttl: pulumi.Output[float]
    """
    The default Time-to-live (TTL) for
    requests.
    """
    dictionaries: pulumi.Output[list]
    """
    A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.

      * `dictionary_id` (`str`) - The ID of the dictionary.
      * `name` (`str`) - The unique name for the Service to create.
      * `writeOnly` (`bool`)
    """
    directors: pulumi.Output[list]
    """
    A director to allow more control over balancing traffic over backends.
    when an item is not to be cached based on an above `condition`. Defined below

      * `backends` (`list`)
      * `capacity` (`float`)
      * `comment` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `quorum` (`float`)
      * `retries` (`float`)
      * `shield` (`str`)
      * `type` (`float`)
    """
    domains: pulumi.Output[list]
    """
    A set of Domain names to serve as entry points for your
    Service. Defined below.

      * `comment` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
    """
    dynamicsnippets: pulumi.Output[list]
    """
    A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.

      * `name` (`str`) - The unique name for the Service to create.
      * `priority` (`float`)
      * `snippet_id` (`str`) - The ID of the dynamic snippet.
      * `type` (`str`)
    """
    force_destroy: pulumi.Output[bool]
    """
    Services that are active cannot be destroyed. In
    order to destroy the Service, set `force_destroy` to `true`. Default `false`.
    """
    gcsloggings: pulumi.Output[list]
    """
    A gcs endpoint to send streaming logs too.
    Defined below.

      * `bucketName` (`str`)
      * `email` (`str`)
      * `format` (`str`)
      * `gzipLevel` (`float`)
      * `messageType` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `path` (`str`)
      * `period` (`float`)
      * `placement` (`str`)
      * `responseCondition` (`str`)
      * `secretKey` (`str`)
      * `timestampFormat` (`str`)
    """
    gzips: pulumi.Output[list]
    """
    A set of gzip rules to control automatic gzipping of
    content. Defined below.

      * `cacheCondition` (`str`)
      * `contentTypes` (`list`)
      * `extensions` (`list`)
      * `name` (`str`) - The unique name for the Service to create.
    """
    headers: pulumi.Output[list]
    """
    A set of Headers to manipulate for each request. Defined
    below.

      * `action` (`str`)
      * `cacheCondition` (`str`)
      * `destination` (`str`)
      * `ignoreIfSet` (`bool`)
      * `name` (`str`) - The unique name for the Service to create.
      * `priority` (`float`)
      * `regex` (`str`)
      * `requestCondition` (`str`)
      * `responseCondition` (`str`)
      * `source` (`str`)
      * `substitution` (`str`)
      * `type` (`str`)
    """
    healthchecks: pulumi.Output[list]
    """
    Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.

      * `checkInterval` (`float`)
      * `expectedResponse` (`float`)
      * `host` (`str`)
      * `httpVersion` (`str`)
      * `initial` (`float`)
      * `method` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `path` (`str`)
      * `threshold` (`float`)
      * `timeout` (`float`)
      * `window` (`float`)
    """
    logentries: pulumi.Output[list]
    """
    A logentries endpoint to send streaming logs too.
    Defined below.

      * `format` (`str`)
      * `formatVersion` (`float`)
      * `name` (`str`) - The unique name for the Service to create.
      * `placement` (`str`)
      * `port` (`float`)
      * `responseCondition` (`str`)
      * `token` (`str`)
      * `useTls` (`bool`)
    """
    name: pulumi.Output[str]
    """
    The unique name for the Service to create.
    """
    papertrails: pulumi.Output[list]
    """
    A Papertrail endpoint to send streaming logs too.
    Defined below.

      * `address` (`str`)
      * `format` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `placement` (`str`)
      * `port` (`float`)
      * `responseCondition` (`str`)
    """
    request_settings: pulumi.Output[list]
    """
    A set of Request modifiers. Defined below

      * `action` (`str`)
      * `bypassBusyWait` (`bool`)
      * `default_host` (`str`) - The default hostname.
      * `forceMiss` (`bool`)
      * `forceSsl` (`bool`)
      * `geoHeaders` (`bool`)
      * `hashKeys` (`str`)
      * `maxStaleAge` (`float`)
      * `name` (`str`) - The unique name for the Service to create.
      * `requestCondition` (`str`)
      * `timerSupport` (`bool`)
      * `xff` (`str`)
    """
    response_objects: pulumi.Output[list]
    """
    Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.

      * `cacheCondition` (`str`)
      * `content` (`str`)
      * `contentType` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `requestCondition` (`str`)
      * `response` (`str`)
      * `status` (`float`)
    """
    s3loggings: pulumi.Output[list]
    """
    A set of S3 Buckets to send streaming logs too.
    Defined below.

      * `bucketName` (`str`)
      * `domain` (`str`) - A set of Domain names to serve as entry points for your
        Service. Defined below.
      * `format` (`str`)
      * `formatVersion` (`float`)
      * `gzipLevel` (`float`)
      * `messageType` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `path` (`str`)
      * `period` (`float`)
      * `placement` (`str`)
      * `redundancy` (`str`)
      * `responseCondition` (`str`)
      * `s3AccessKey` (`str`)
      * `s3SecretKey` (`str`)
      * `timestampFormat` (`str`)
    """
    snippets: pulumi.Output[list]
    """
    A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.

      * `content` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `priority` (`float`)
      * `type` (`str`)
    """
    splunks: pulumi.Output[list]
    """
    A Splunk endpoint to send streaming logs too.
    Defined below.

      * `format` (`str`)
      * `formatVersion` (`float`)
      * `name` (`str`) - The unique name for the Service to create.
      * `placement` (`str`)
      * `responseCondition` (`str`)
      * `token` (`str`)
      * `url` (`str`)
    """
    sumologics: pulumi.Output[list]
    """
    A Sumologic endpoint to send streaming logs too.
    Defined below.

      * `format` (`str`)
      * `formatVersion` (`float`)
      * `messageType` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `placement` (`str`)
      * `responseCondition` (`str`)
      * `url` (`str`)
    """
    syslogs: pulumi.Output[list]
    """
    A syslog endpoint to send streaming logs too.
    Defined below.

      * `address` (`str`)
      * `format` (`str`)
      * `formatVersion` (`float`)
      * `messageType` (`str`)
      * `name` (`str`) - The unique name for the Service to create.
      * `placement` (`str`)
      * `port` (`float`)
      * `responseCondition` (`str`)
      * `tlsCaCert` (`str`)
      * `tlsClientCert` (`str`)
      * `tlsClientKey` (`str`)
      * `tlsHostname` (`str`)
      * `token` (`str`)
      * `useTls` (`bool`)
    """
    vcls: pulumi.Output[list]
    """
    A set of custom VCL configuration blocks. The
    ability to upload custom VCL code is not enabled by default for new Fastly
    accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).

      * `content` (`str`)
      * `main` (`bool`)
      * `name` (`str`) - The unique name for the Service to create.
    """
    version_comment: pulumi.Output[str]
    """
    Description field for the version.
    """
    def __init__(__self__, resource_name, opts=None, acls=None, activate=None, backends=None, bigqueryloggings=None, blobstorageloggings=None, cache_settings=None, comment=None, conditions=None, default_host=None, default_ttl=None, dictionaries=None, directors=None, domains=None, dynamicsnippets=None, force_destroy=None, gcsloggings=None, gzips=None, headers=None, healthchecks=None, logentries=None, name=None, papertrails=None, request_settings=None, response_objects=None, s3loggings=None, snippets=None, splunks=None, sumologics=None, syslogs=None, vcls=None, version_comment=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Fastly Service, representing the configuration for a website, app,
        API, or anything else to be served through Fastly. A Service encompasses Domains
        and Backends.

        The Service resource requires a domain name that is correctly set up to direct
        traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
        on their documentation site for guidance.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-fastly/blob/master/website/docs/r/service_v1.html.markdown.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] acls: A set of ACL configuration blocks.  Defined below.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        :param pulumi.Input[list] backends: A set of Backends to service requests from your Domains.
               Defined below. Backends must be defined in this argument, or defined in the
               `vcl` argument below
        :param pulumi.Input[list] bigqueryloggings: A BigQuery endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] blobstorageloggings: An Azure Blob Storage endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] cache_settings: A set of Cache Settings, allowing you to override
        :param pulumi.Input[str] comment: A personal freeform descriptive note
        :param pulumi.Input[list] conditions: A set of conditions to add logic to any basic
               configuration object in this service. Defined below.
        :param pulumi.Input[str] default_host: The default hostname.
        :param pulumi.Input[float] default_ttl: The default Time-to-live (TTL) for
               requests.
        :param pulumi.Input[list] dictionaries: A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        :param pulumi.Input[list] directors: A director to allow more control over balancing traffic over backends.
               when an item is not to be cached based on an above `condition`. Defined below
        :param pulumi.Input[list] domains: A set of Domain names to serve as entry points for your
               Service. Defined below.
        :param pulumi.Input[list] dynamicsnippets: A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In
               order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        :param pulumi.Input[list] gcsloggings: A gcs endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] gzips: A set of gzip rules to control automatic gzipping of
               content. Defined below.
        :param pulumi.Input[list] headers: A set of Headers to manipulate for each request. Defined
               below.
        :param pulumi.Input[list] healthchecks: Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        :param pulumi.Input[list] logentries: A logentries endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[str] name: The unique name for the Service to create.
        :param pulumi.Input[list] papertrails: A Papertrail endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] request_settings: A set of Request modifiers. Defined below
        :param pulumi.Input[list] response_objects: Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        :param pulumi.Input[list] s3loggings: A set of S3 Buckets to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] snippets: A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        :param pulumi.Input[list] splunks: A Splunk endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] sumologics: A Sumologic endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] syslogs: A syslog endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] vcls: A set of custom VCL configuration blocks. The
               ability to upload custom VCL code is not enabled by default for new Fastly
               accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        :param pulumi.Input[str] version_comment: Description field for the version.

        The **acls** object supports the following:

          * `acl_id` (`pulumi.Input[str]`) - The ID of the ACL.
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.

        The **backends** object supports the following:

          * `address` (`pulumi.Input[str]`)
          * `autoLoadbalance` (`pulumi.Input[bool]`)
          * `betweenBytesTimeout` (`pulumi.Input[float]`)
          * `connectTimeout` (`pulumi.Input[float]`)
          * `errorThreshold` (`pulumi.Input[float]`)
          * `firstByteTimeout` (`pulumi.Input[float]`)
          * `healthcheck` (`pulumi.Input[str]`) - Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
          * `maxConn` (`pulumi.Input[float]`)
          * `maxTlsVersion` (`pulumi.Input[str]`)
          * `minTlsVersion` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `overrideHost` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `requestCondition` (`pulumi.Input[str]`)
          * `shield` (`pulumi.Input[str]`)
          * `sslCaCert` (`pulumi.Input[str]`)
          * `sslCertHostname` (`pulumi.Input[str]`)
          * `sslCheckCert` (`pulumi.Input[bool]`)
          * `sslCiphers` (`pulumi.Input[str]`)
          * `sslClientCert` (`pulumi.Input[str]`)
          * `sslClientKey` (`pulumi.Input[str]`)
          * `sslHostname` (`pulumi.Input[str]`)
          * `sslSniHostname` (`pulumi.Input[str]`)
          * `useSsl` (`pulumi.Input[bool]`)
          * `weight` (`pulumi.Input[float]`)

        The **bigqueryloggings** object supports the following:

          * `dataset` (`pulumi.Input[str]`)
          * `email` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `projectId` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `secretKey` (`pulumi.Input[str]`)
          * `table` (`pulumi.Input[str]`)
          * `template` (`pulumi.Input[str]`)

        The **blobstorageloggings** object supports the following:

          * `accountName` (`pulumi.Input[str]`)
          * `container` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `gzipLevel` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `placement` (`pulumi.Input[str]`)
          * `publicKey` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `sasToken` (`pulumi.Input[str]`)
          * `timestampFormat` (`pulumi.Input[str]`)

        The **cache_settings** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `cacheCondition` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `staleTtl` (`pulumi.Input[float]`)
          * `ttl` (`pulumi.Input[float]`)

        The **conditions** object supports the following:

          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `statement` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **dictionaries** object supports the following:

          * `dictionary_id` (`pulumi.Input[str]`) - The ID of the dictionary.
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `writeOnly` (`pulumi.Input[bool]`)

        The **directors** object supports the following:

          * `backends` (`pulumi.Input[list]`)
          * `capacity` (`pulumi.Input[float]`)
          * `comment` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `quorum` (`pulumi.Input[float]`)
          * `retries` (`pulumi.Input[float]`)
          * `shield` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[float]`)

        The **domains** object supports the following:

          * `comment` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.

        The **dynamicsnippets** object supports the following:

          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `snippet_id` (`pulumi.Input[str]`) - The ID of the dynamic snippet.
          * `type` (`pulumi.Input[str]`)

        The **gcsloggings** object supports the following:

          * `bucketName` (`pulumi.Input[str]`)
          * `email` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `gzipLevel` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `placement` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `secretKey` (`pulumi.Input[str]`)
          * `timestampFormat` (`pulumi.Input[str]`)

        The **gzips** object supports the following:

          * `cacheCondition` (`pulumi.Input[str]`)
          * `contentTypes` (`pulumi.Input[list]`)
          * `extensions` (`pulumi.Input[list]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.

        The **headers** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `cacheCondition` (`pulumi.Input[str]`)
          * `destination` (`pulumi.Input[str]`)
          * `ignoreIfSet` (`pulumi.Input[bool]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `regex` (`pulumi.Input[str]`)
          * `requestCondition` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `source` (`pulumi.Input[str]`)
          * `substitution` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **healthchecks** object supports the following:

          * `checkInterval` (`pulumi.Input[float]`)
          * `expectedResponse` (`pulumi.Input[float]`)
          * `host` (`pulumi.Input[str]`)
          * `httpVersion` (`pulumi.Input[str]`)
          * `initial` (`pulumi.Input[float]`)
          * `method` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `threshold` (`pulumi.Input[float]`)
          * `timeout` (`pulumi.Input[float]`)
          * `window` (`pulumi.Input[float]`)

        The **logentries** object supports the following:

          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`)
          * `useTls` (`pulumi.Input[bool]`)

        The **papertrails** object supports the following:

          * `address` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `responseCondition` (`pulumi.Input[str]`)

        The **request_settings** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `bypassBusyWait` (`pulumi.Input[bool]`)
          * `default_host` (`pulumi.Input[str]`) - The default hostname.
          * `forceMiss` (`pulumi.Input[bool]`)
          * `forceSsl` (`pulumi.Input[bool]`)
          * `geoHeaders` (`pulumi.Input[bool]`)
          * `hashKeys` (`pulumi.Input[str]`)
          * `maxStaleAge` (`pulumi.Input[float]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `requestCondition` (`pulumi.Input[str]`)
          * `timerSupport` (`pulumi.Input[bool]`)
          * `xff` (`pulumi.Input[str]`)

        The **response_objects** object supports the following:

          * `cacheCondition` (`pulumi.Input[str]`)
          * `content` (`pulumi.Input[str]`)
          * `contentType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `requestCondition` (`pulumi.Input[str]`)
          * `response` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[float]`)

        The **s3loggings** object supports the following:

          * `bucketName` (`pulumi.Input[str]`)
          * `domain` (`pulumi.Input[str]`) - A set of Domain names to serve as entry points for your
            Service. Defined below.
          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `gzipLevel` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `placement` (`pulumi.Input[str]`)
          * `redundancy` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `s3AccessKey` (`pulumi.Input[str]`)
          * `s3SecretKey` (`pulumi.Input[str]`)
          * `timestampFormat` (`pulumi.Input[str]`)

        The **snippets** object supports the following:

          * `content` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `type` (`pulumi.Input[str]`)

        The **splunks** object supports the following:

          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`)
          * `url` (`pulumi.Input[str]`)

        The **sumologics** object supports the following:

          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `url` (`pulumi.Input[str]`)

        The **syslogs** object supports the following:

          * `address` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `tlsCaCert` (`pulumi.Input[str]`)
          * `tlsClientCert` (`pulumi.Input[str]`)
          * `tlsClientKey` (`pulumi.Input[str]`)
          * `tlsHostname` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`)
          * `useTls` (`pulumi.Input[bool]`)

        The **vcls** object supports the following:

          * `content` (`pulumi.Input[str]`)
          * `main` (`pulumi.Input[bool]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['acls'] = acls
            __props__['activate'] = activate
            __props__['backends'] = backends
            __props__['bigqueryloggings'] = bigqueryloggings
            __props__['blobstorageloggings'] = blobstorageloggings
            __props__['cache_settings'] = cache_settings
            __props__['comment'] = comment
            __props__['conditions'] = conditions
            __props__['default_host'] = default_host
            __props__['default_ttl'] = default_ttl
            __props__['dictionaries'] = dictionaries
            __props__['directors'] = directors
            if domains is None:
                raise TypeError("Missing required property 'domains'")
            __props__['domains'] = domains
            __props__['dynamicsnippets'] = dynamicsnippets
            __props__['force_destroy'] = force_destroy
            __props__['gcsloggings'] = gcsloggings
            __props__['gzips'] = gzips
            __props__['headers'] = headers
            __props__['healthchecks'] = healthchecks
            __props__['logentries'] = logentries
            __props__['name'] = name
            __props__['papertrails'] = papertrails
            __props__['request_settings'] = request_settings
            __props__['response_objects'] = response_objects
            __props__['s3loggings'] = s3loggings
            __props__['snippets'] = snippets
            __props__['splunks'] = splunks
            __props__['sumologics'] = sumologics
            __props__['syslogs'] = syslogs
            __props__['vcls'] = vcls
            __props__['version_comment'] = version_comment
            __props__['active_version'] = None
            __props__['cloned_version'] = None
        super(Servicev1, __self__).__init__(
            'fastly:index/servicev1:Servicev1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, acls=None, activate=None, active_version=None, backends=None, bigqueryloggings=None, blobstorageloggings=None, cache_settings=None, cloned_version=None, comment=None, conditions=None, default_host=None, default_ttl=None, dictionaries=None, directors=None, domains=None, dynamicsnippets=None, force_destroy=None, gcsloggings=None, gzips=None, headers=None, healthchecks=None, logentries=None, name=None, papertrails=None, request_settings=None, response_objects=None, s3loggings=None, snippets=None, splunks=None, sumologics=None, syslogs=None, vcls=None, version_comment=None):
        """
        Get an existing Servicev1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] acls: A set of ACL configuration blocks.  Defined below.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        :param pulumi.Input[float] active_version: The currently active version of your Fastly Service.
        :param pulumi.Input[list] backends: A set of Backends to service requests from your Domains.
               Defined below. Backends must be defined in this argument, or defined in the
               `vcl` argument below
        :param pulumi.Input[list] bigqueryloggings: A BigQuery endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] blobstorageloggings: An Azure Blob Storage endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] cache_settings: A set of Cache Settings, allowing you to override
        :param pulumi.Input[str] comment: A personal freeform descriptive note
        :param pulumi.Input[list] conditions: A set of conditions to add logic to any basic
               configuration object in this service. Defined below.
        :param pulumi.Input[str] default_host: The default hostname.
        :param pulumi.Input[float] default_ttl: The default Time-to-live (TTL) for
               requests.
        :param pulumi.Input[list] dictionaries: A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        :param pulumi.Input[list] directors: A director to allow more control over balancing traffic over backends.
               when an item is not to be cached based on an above `condition`. Defined below
        :param pulumi.Input[list] domains: A set of Domain names to serve as entry points for your
               Service. Defined below.
        :param pulumi.Input[list] dynamicsnippets: A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In
               order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        :param pulumi.Input[list] gcsloggings: A gcs endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] gzips: A set of gzip rules to control automatic gzipping of
               content. Defined below.
        :param pulumi.Input[list] headers: A set of Headers to manipulate for each request. Defined
               below.
        :param pulumi.Input[list] healthchecks: Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        :param pulumi.Input[list] logentries: A logentries endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[str] name: The unique name for the Service to create.
        :param pulumi.Input[list] papertrails: A Papertrail endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] request_settings: A set of Request modifiers. Defined below
        :param pulumi.Input[list] response_objects: Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        :param pulumi.Input[list] s3loggings: A set of S3 Buckets to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] snippets: A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        :param pulumi.Input[list] splunks: A Splunk endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] sumologics: A Sumologic endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] syslogs: A syslog endpoint to send streaming logs too.
               Defined below.
        :param pulumi.Input[list] vcls: A set of custom VCL configuration blocks. The
               ability to upload custom VCL code is not enabled by default for new Fastly
               accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        :param pulumi.Input[str] version_comment: Description field for the version.

        The **acls** object supports the following:

          * `acl_id` (`pulumi.Input[str]`) - The ID of the ACL.
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.

        The **backends** object supports the following:

          * `address` (`pulumi.Input[str]`)
          * `autoLoadbalance` (`pulumi.Input[bool]`)
          * `betweenBytesTimeout` (`pulumi.Input[float]`)
          * `connectTimeout` (`pulumi.Input[float]`)
          * `errorThreshold` (`pulumi.Input[float]`)
          * `firstByteTimeout` (`pulumi.Input[float]`)
          * `healthcheck` (`pulumi.Input[str]`) - Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
          * `maxConn` (`pulumi.Input[float]`)
          * `maxTlsVersion` (`pulumi.Input[str]`)
          * `minTlsVersion` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `overrideHost` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `requestCondition` (`pulumi.Input[str]`)
          * `shield` (`pulumi.Input[str]`)
          * `sslCaCert` (`pulumi.Input[str]`)
          * `sslCertHostname` (`pulumi.Input[str]`)
          * `sslCheckCert` (`pulumi.Input[bool]`)
          * `sslCiphers` (`pulumi.Input[str]`)
          * `sslClientCert` (`pulumi.Input[str]`)
          * `sslClientKey` (`pulumi.Input[str]`)
          * `sslHostname` (`pulumi.Input[str]`)
          * `sslSniHostname` (`pulumi.Input[str]`)
          * `useSsl` (`pulumi.Input[bool]`)
          * `weight` (`pulumi.Input[float]`)

        The **bigqueryloggings** object supports the following:

          * `dataset` (`pulumi.Input[str]`)
          * `email` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `projectId` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `secretKey` (`pulumi.Input[str]`)
          * `table` (`pulumi.Input[str]`)
          * `template` (`pulumi.Input[str]`)

        The **blobstorageloggings** object supports the following:

          * `accountName` (`pulumi.Input[str]`)
          * `container` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `gzipLevel` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `placement` (`pulumi.Input[str]`)
          * `publicKey` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `sasToken` (`pulumi.Input[str]`)
          * `timestampFormat` (`pulumi.Input[str]`)

        The **cache_settings** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `cacheCondition` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `staleTtl` (`pulumi.Input[float]`)
          * `ttl` (`pulumi.Input[float]`)

        The **conditions** object supports the following:

          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `statement` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **dictionaries** object supports the following:

          * `dictionary_id` (`pulumi.Input[str]`) - The ID of the dictionary.
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `writeOnly` (`pulumi.Input[bool]`)

        The **directors** object supports the following:

          * `backends` (`pulumi.Input[list]`)
          * `capacity` (`pulumi.Input[float]`)
          * `comment` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `quorum` (`pulumi.Input[float]`)
          * `retries` (`pulumi.Input[float]`)
          * `shield` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[float]`)

        The **domains** object supports the following:

          * `comment` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.

        The **dynamicsnippets** object supports the following:

          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `snippet_id` (`pulumi.Input[str]`) - The ID of the dynamic snippet.
          * `type` (`pulumi.Input[str]`)

        The **gcsloggings** object supports the following:

          * `bucketName` (`pulumi.Input[str]`)
          * `email` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `gzipLevel` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `placement` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `secretKey` (`pulumi.Input[str]`)
          * `timestampFormat` (`pulumi.Input[str]`)

        The **gzips** object supports the following:

          * `cacheCondition` (`pulumi.Input[str]`)
          * `contentTypes` (`pulumi.Input[list]`)
          * `extensions` (`pulumi.Input[list]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.

        The **headers** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `cacheCondition` (`pulumi.Input[str]`)
          * `destination` (`pulumi.Input[str]`)
          * `ignoreIfSet` (`pulumi.Input[bool]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `regex` (`pulumi.Input[str]`)
          * `requestCondition` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `source` (`pulumi.Input[str]`)
          * `substitution` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **healthchecks** object supports the following:

          * `checkInterval` (`pulumi.Input[float]`)
          * `expectedResponse` (`pulumi.Input[float]`)
          * `host` (`pulumi.Input[str]`)
          * `httpVersion` (`pulumi.Input[str]`)
          * `initial` (`pulumi.Input[float]`)
          * `method` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `threshold` (`pulumi.Input[float]`)
          * `timeout` (`pulumi.Input[float]`)
          * `window` (`pulumi.Input[float]`)

        The **logentries** object supports the following:

          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`)
          * `useTls` (`pulumi.Input[bool]`)

        The **papertrails** object supports the following:

          * `address` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `responseCondition` (`pulumi.Input[str]`)

        The **request_settings** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `bypassBusyWait` (`pulumi.Input[bool]`)
          * `default_host` (`pulumi.Input[str]`) - The default hostname.
          * `forceMiss` (`pulumi.Input[bool]`)
          * `forceSsl` (`pulumi.Input[bool]`)
          * `geoHeaders` (`pulumi.Input[bool]`)
          * `hashKeys` (`pulumi.Input[str]`)
          * `maxStaleAge` (`pulumi.Input[float]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `requestCondition` (`pulumi.Input[str]`)
          * `timerSupport` (`pulumi.Input[bool]`)
          * `xff` (`pulumi.Input[str]`)

        The **response_objects** object supports the following:

          * `cacheCondition` (`pulumi.Input[str]`)
          * `content` (`pulumi.Input[str]`)
          * `contentType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `requestCondition` (`pulumi.Input[str]`)
          * `response` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[float]`)

        The **s3loggings** object supports the following:

          * `bucketName` (`pulumi.Input[str]`)
          * `domain` (`pulumi.Input[str]`) - A set of Domain names to serve as entry points for your
            Service. Defined below.
          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `gzipLevel` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `path` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `placement` (`pulumi.Input[str]`)
          * `redundancy` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `s3AccessKey` (`pulumi.Input[str]`)
          * `s3SecretKey` (`pulumi.Input[str]`)
          * `timestampFormat` (`pulumi.Input[str]`)

        The **snippets** object supports the following:

          * `content` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `priority` (`pulumi.Input[float]`)
          * `type` (`pulumi.Input[str]`)

        The **splunks** object supports the following:

          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`)
          * `url` (`pulumi.Input[str]`)

        The **sumologics** object supports the following:

          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `url` (`pulumi.Input[str]`)

        The **syslogs** object supports the following:

          * `address` (`pulumi.Input[str]`)
          * `format` (`pulumi.Input[str]`)
          * `formatVersion` (`pulumi.Input[float]`)
          * `messageType` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
          * `placement` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `responseCondition` (`pulumi.Input[str]`)
          * `tlsCaCert` (`pulumi.Input[str]`)
          * `tlsClientCert` (`pulumi.Input[str]`)
          * `tlsClientKey` (`pulumi.Input[str]`)
          * `tlsHostname` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`)
          * `useTls` (`pulumi.Input[bool]`)

        The **vcls** object supports the following:

          * `content` (`pulumi.Input[str]`)
          * `main` (`pulumi.Input[bool]`)
          * `name` (`pulumi.Input[str]`) - The unique name for the Service to create.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["acls"] = acls
        __props__["activate"] = activate
        __props__["active_version"] = active_version
        __props__["backends"] = backends
        __props__["bigqueryloggings"] = bigqueryloggings
        __props__["blobstorageloggings"] = blobstorageloggings
        __props__["cache_settings"] = cache_settings
        __props__["cloned_version"] = cloned_version
        __props__["comment"] = comment
        __props__["conditions"] = conditions
        __props__["default_host"] = default_host
        __props__["default_ttl"] = default_ttl
        __props__["dictionaries"] = dictionaries
        __props__["directors"] = directors
        __props__["domains"] = domains
        __props__["dynamicsnippets"] = dynamicsnippets
        __props__["force_destroy"] = force_destroy
        __props__["gcsloggings"] = gcsloggings
        __props__["gzips"] = gzips
        __props__["headers"] = headers
        __props__["healthchecks"] = healthchecks
        __props__["logentries"] = logentries
        __props__["name"] = name
        __props__["papertrails"] = papertrails
        __props__["request_settings"] = request_settings
        __props__["response_objects"] = response_objects
        __props__["s3loggings"] = s3loggings
        __props__["snippets"] = snippets
        __props__["splunks"] = splunks
        __props__["sumologics"] = sumologics
        __props__["syslogs"] = syslogs
        __props__["vcls"] = vcls
        __props__["version_comment"] = version_comment
        return Servicev1(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

