#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK

import sys
import locale

from argtoolbox import DefaultCommand
from argtoolbox import BasicProgram
# pylint: disable=unused-import
from argtoolbox import SimpleSection
# pylint: disable=unused-import
from argtoolbox import Element

# if you want to debug argcomplete completion,
# you just need to export _ARC_DEBUG=True


# pylint: disable=too-few-public-methods
class #{command_name_class}Command(DefaultCommand):
    """#{command_name_class} command"""

    def __call__(self, args):
        super(#{command_name_class}Command, self).__call__(args)
        print("New generated command : #{command_name}")
        # return True if command exits with success.
        return True


class #{prog_name_class}Program(BasicProgram):
    """Main program."""

    def add_config_options(self):
        super(#{prog_name_class}Program, self).add_config_options()

        # To be removed if useless : samples
        # sample_section = self.config.add_section(SimpleSection("sample_section"))
        # sample_section.add_element(Element('server_name'))

    def add_commands(self):
        super(#{prog_name_class}Program, self).add_commands()

        # To be removed if useless : samples
        # self.parser.add_argument(
        #     '--server-name',
        #     **self.config.sample_section.server_name.get_arg_parse_arguments())

        subparsers = self.parser.add_subparsers()
        parser_tmp = subparsers.add_parser(
            '#{command_name}',
            help="Description of #{command_name}")
        parser_tmp.set_defaults(__func__=#{command_name_class}Command(self.config))


PROG = #{prog_name_class}Program(
        "#{prog_name}",
        desc="#{description}.")
if __name__ == "__main__":
    PROG()
