def Path1():
  # Global parameters:
  global speed_ms = 0.300
  global speed_rads  = 0.750
  global accel_mss   = 3.000
  global accel_radss = 1.200
  global blend_radius_m = 0.001
  
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to drive an extruder:
  def Extruder(value):
    # use the value as an output:
    if value < 0:
      # stop extruder
    else:
      # start extruder
    end
  end
  
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  
  # Main program:
  # Program generated by RoboDK v4.2.0 for Pulse 750 on 17/03/2020 20:22:47
  # Using nominal kinematics.
  blend_radius_m = 0.001
  speed_ms    = 1.000
  set_tcp(p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  movej([-2.598887, -0.918922, 2.347111, -2.998986, -1.570796, 2.113502],accel_radss,speed_rads,0,0)
  movel(p[0.315000, 0.330700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0)
  speed_ms    = 0.050
  movel(p[0.315000, 0.428000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.315958, 0.430198, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.318000, 0.431000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.320600, 0.431000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.322054, 0.431179, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.325004, 0.432925, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.326516, 0.436001, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.326098, 0.439403, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.323885, 0.442021, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.320600, 0.443000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.318000, 0.443000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.315958, 0.443802, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.315000, 0.446000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.315000, 0.543300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.315802, 0.545342, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.318000, 0.546300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.320600, 0.546300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.323885, 0.547279, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.326098, 0.549897, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.326600, 0.552300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.326600, 0.556000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.327402, 0.558042, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.329600, 0.559000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.420400, 0.559000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.422598, 0.558042, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.423400, 0.556000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.423400, 0.552300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.424379, 0.549015, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.426997, 0.546802, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.429400, 0.546300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.432000, 0.546300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.434198, 0.545342, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.435000, 0.543300, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.435000, 0.446000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.434042, 0.443802, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.432000, 0.443000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.429400, 0.443000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.427946, 0.442821, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.424996, 0.441075, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.423484, 0.437999, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.423902, 0.434597, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.426115, 0.431979, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.429400, 0.431000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.432000, 0.431000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.434198, 0.430042, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.435000, 0.428000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.435000, 0.330700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.434198, 0.328658, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.432000, 0.327700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.429400, 0.327700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.426115, 0.326721, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.423902, 0.324103, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.423400, 0.321700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.423400, 0.318000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.422598, 0.315958, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.420400, 0.315000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.329600, 0.315000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.327558, 0.315802, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.326600, 0.318000, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.326600, 0.321700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.326098, 0.324103, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.323885, 0.326721, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.320600, 0.327700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.318000, 0.327700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[0.315958, 0.328502, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  movel(p[0.315000, 0.330700, 0.000000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  speed_ms    = 1.000
  movel(p[0.315000, 0.330700, 0.100000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  # End of main program
end

Path1()
