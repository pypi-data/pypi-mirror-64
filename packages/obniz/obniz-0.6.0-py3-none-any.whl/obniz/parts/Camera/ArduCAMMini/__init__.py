from attrdict import AttrDefault

import asyncio
import base64

class ArduCAMMini:
    def __init__(self):
        self.keys = ['cs', 'mosi', 'miso', 'sclk', 'gnd', 'vcc', 'sda', 'scl', 'spi', 'i2c', 'spi_frequency', 'spi_drive']
        self.required_keys = ['cs']
        self.io_keys = self.keys
        self.display_name = 'Cam'
        self.regs = AttrDefault(bool, {'ARDUCHIP_TEST1': 0x00, 'ARDUCHIP_MODE': 0x02, 'ARDUCHIP_FIFO': 0x04, 'BURST_FIFO_READ': 0x3c, 'ARDUCHIP_TRIG': 0x41, 'FIFO_SIZE1': 0x42, 'FIFO_SIZE2': 0x43, 'FIFO_SIZE3': 0x44})
        self.configs = AttrDefault(bool, {
            'OV2640_JPEG_INIT': [[0xff, 0x00], [0x2c, 0xff], [0x2e, 0xdf], [0xff, 0x01], [0x3c, 0x32], [0x11, 0x04], [0x09, 0x02], [0x04, 0x28], [0x13, 0xe5], [0x14, 0x48], [0x2c, 0x0c], [0x33, 0x78], [0x3a, 0x33], [0x3b, 0xfb], [0x3e, 0x00], [0x43, 0x11], [0x16, 0x10], [0x39, 0x92], [0x35, 0xda], [0x22, 0x1a], [0x37, 0xc3], [0x23, 0x00], [0x34, 0xc0], [0x36, 0x1a], [0x06, 0x88], [0x07, 0xc0], [0x0d, 0x87], [0x0e, 0x41], [0x4c, 0x00], [0x48, 0x00], [0x5b, 0x00], [0x42, 0x03], [0x4a, 0x81], [0x21, 0x99], [0x24, 0x40], [0x25, 0x38], [0x26, 0x82], [0x5c, 0x00], [0x63, 0x00], [0x61, 0x70], [0x62, 0x80], [0x7c, 0x05], [0x20, 0x80], [0x28, 0x30], [0x6c, 0x00], [0x6d, 0x80], [0x6e, 0x00], [0x70, 0x02], [0x71, 0x94], [0x73, 0xc1], [0x12, 0x40], [0x17, 0x11], [0x18, 0x43], [0x19, 0x00], [0x1a, 0x4b], [0x32, 0x09], [0x37, 0xc0], [0x4f, 0x60], [0x50, 0xa8], [0x6d, 0x00], [0x3d, 0x38], [0x46, 0x3f], [0x4f, 0x60], [0x0c, 0x3c], [0xff, 0x00], [0xe5, 0x7f], [0xf9, 0xc0], [0x41, 0x24], [0xe0, 0x14], [0x76, 0xff], [0x33, 0xa0], [0x42, 0x20], [0x43, 0x18], [0x4c, 0x00], [0x87, 0xd5], [0x88, 0x3f], [0xd7, 0x03], [0xd9, 0x10], [0xd3, 0x82], [0xc8, 0x08], [0xc9, 0x80], [0x7c, 0x00], [0x7d, 0x00], [0x7c, 0x03], [0x7d, 0x48], [0x7d, 0x48], [0x7c, 0x08], [0x7d, 0x20], [0x7d, 0x10], [0x7d, 0x0e], [0x90, 0x00], [0x91, 0x0e], [0x91, 0x1a], [0x91, 0x31], [0x91, 0x5a], [0x91, 0x69], [0x91, 0x75], [0x91, 0x7e], [0x91, 0x88], [0x91, 0x8f], [0x91, 0x96], [0x91, 0xa3], [0x91, 0xaf], [0x91, 0xc4], [0x91, 0xd7], [0x91, 0xe8], [0x91, 0x20], [0x92, 0x00], [0x93, 0x06], [0x93, 0xe3], [0x93, 0x05], [0x93, 0x05], [0x93, 0x00], [0x93, 0x04], [0x93, 0x00], [0x93, 0x00], [0x93, 0x00], [0x93, 0x00], [0x93, 0x00], [0x93, 0x00], [0x93, 0x00], [0x96, 0x00], [0x97, 0x08], [0x97, 0x19], [0x97, 0x02], [0x97, 0x0c], [0x97, 0x24], [0x97, 0x30], [0x97, 0x28], [0x97, 0x26], [0x97, 0x02], [0x97, 0x98], [0x97, 0x80], [0x97, 0x00], [0x97, 0x00], [0xc3, 0xed], [0xa4, 0x00], [0xa8, 0x00], [0xc5, 0x11], [0xc6, 0x51], [0xbf, 0x80], [0xc7, 0x10], [0xb6, 0x66], [0xb8, 0xa5], [0xb7, 0x64], [0xb9, 0x7c], [0xb3, 0xaf], [0xb4, 0x97], [0xb5, 0xff], [0xb0, 0xc5], [0xb1, 0x94], [0xb2, 0x0f], [0xc4, 0x5c], [0xc0, 0x64], [0xc1, 0x4b], [0x8c, 0x00], [0x86, 0x3d], [0x50, 0x00], [0x51, 0xc8], [0x52, 0x96], [0x53, 0x00], [0x54, 0x00], [0x55, 0x00], [0x5a, 0xc8], [0x5b, 0x96], [0x5c, 0x00], [0xd3, 0x00], [0xc3, 0xed], [0x7f, 0x00], [0xda, 0x00], [0xe5, 0x1f], [0xe1, 0x67], [0xe0, 0x00], [0xdd, 0x7f], [0x05, 0x00], [0x12, 0x40], [0xd3, 0x04], [0xc0, 0x16], [0xc1, 0x12], [0x8c, 0x00], [0x86, 0x3d], [0x50, 0x00], [0x51, 0x2c], [0x52, 0x24], [0x53, 0x00], [0x54, 0x00], [0x55, 0x00], [0x5a, 0x2c], [0x5b, 0x24], [0x5c, 0x00], [0xff, 0xff]],
            'OV2640_YUV422': [[0xff, 0x00], [0x05, 0x00], [0xda, 0x10], [0xd7, 0x03], [0xdf, 0x00], [0x33, 0x80], [0x3c, 0x40], [0xe1, 0x77], [0x00, 0x00], [0xff, 0xff]],
            'OV2640_JPEG': [[0xe0, 0x14], [0xe1, 0x77], [0xe5, 0x1f], [0xd7, 0x03], [0xda, 0x10], [0xe0, 0x00], [0xff, 0x01], [0x04, 0x08], [0xff, 0xff]],
            'OV2640_160x120_JPEG': [[0xff, 0x01], [0x12, 0x40], [0x17, 0x11], [0x18, 0x43], [0x19, 0x00], [0x1a, 0x4b], [0x32, 0x09], [0x4f, 0xca], [0x50, 0xa8], [0x5a, 0x23], [0x6d, 0x00], [0x39, 0x12], [0x35, 0xda], [0x22, 0x1a], [0x37, 0xc3], [0x23, 0x00], [0x34, 0xc0], [0x36, 0x1a], [0x06, 0x88], [0x07, 0xc0], [0x0d, 0x87], [0x0e, 0x41], [0x4c, 0x00], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0x64], [0xc1, 0x4b], [0x86, 0x35], [0x50, 0x92], [0x51, 0xc8], [0x52, 0x96], [0x53, 0x00], [0x54, 0x00], [0x55, 0x00], [0x57, 0x00], [0x5a, 0x28], [0x5b, 0x1e], [0x5c, 0x00], [0xe0, 0x00], [0xff, 0xff]],
            'OV2640_176x144_JPEG': [[0xff, 0x01], [0x12, 0x40], [0x17, 0x11], [0x18, 0x43], [0x19, 0x00], [0x1a, 0x4b], [0x32, 0x09], [0x4f, 0xca], [0x50, 0xa8], [0x5a, 0x23], [0x6d, 0x00], [0x39, 0x12], [0x35, 0xda], [0x22, 0x1a], [0x37, 0xc3], [0x23, 0x00], [0x34, 0xc0], [0x36, 0x1a], [0x06, 0x88], [0x07, 0xc0], [0x0d, 0x87], [0x0e, 0x41], [0x4c, 0x00], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0x64], [0xc1, 0x4b], [0x86, 0x35], [0x50, 0x92], [0x51, 0xc8], [0x52, 0x96], [0x53, 0x00], [0x54, 0x00], [0x55, 0x00], [0x57, 0x00], [0x5a, 0x2c], [0x5b, 0x24], [0x5c, 0x00], [0xe0, 0x00], [0xff, 0xff]],
            'OV2640_320x240_JPEG': [[0xff, 0x01], [0x12, 0x40], [0x17, 0x11], [0x18, 0x43], [0x19, 0x00], [0x1a, 0x4b], [0x32, 0x09], [0x4f, 0xca], [0x50, 0xa8], [0x5a, 0x23], [0x6d, 0x00], [0x39, 0x12], [0x35, 0xda], [0x22, 0x1a], [0x37, 0xc3], [0x23, 0x00], [0x34, 0xc0], [0x36, 0x1a], [0x06, 0x88], [0x07, 0xc0], [0x0d, 0x87], [0x0e, 0x41], [0x4c, 0x00], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0x64], [0xc1, 0x4b], [0x86, 0x35], [0x50, 0x89], [0x51, 0xc8], [0x52, 0x96], [0x53, 0x00], [0x54, 0x00], [0x55, 0x00], [0x57, 0x00], [0x5a, 0x50], [0x5b, 0x3c], [0x5c, 0x00], [0xe0, 0x00], [0xff, 0xff]],
            'OV2640_352x288_JPEG': [[0xff, 0x01], [0x12, 0x40], [0x17, 0x11], [0x18, 0x43], [0x19, 0x00], [0x1a, 0x4b], [0x32, 0x09], [0x4f, 0xca], [0x50, 0xa8], [0x5a, 0x23], [0x6d, 0x00], [0x39, 0x12], [0x35, 0xda], [0x22, 0x1a], [0x37, 0xc3], [0x23, 0x00], [0x34, 0xc0], [0x36, 0x1a], [0x06, 0x88], [0x07, 0xc0], [0x0d, 0x87], [0x0e, 0x41], [0x4c, 0x00], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0x64], [0xc1, 0x4b], [0x86, 0x35], [0x50, 0x89], [0x51, 0xc8], [0x52, 0x96], [0x53, 0x00], [0x54, 0x00], [0x55, 0x00], [0x57, 0x00], [0x5a, 0x58], [0x5b, 0x48], [0x5c, 0x00], [0xe0, 0x00], [0xff, 0xff]],
            'OV2640_640x480_JPEG': [[0xff, 0x01], [0x11, 0x01], [0x12, 0x00], [0x17, 0x11], [0x18, 0x75], [0x32, 0x36], [0x19, 0x01], [0x1a, 0x97], [0x03, 0x0f], [0x37, 0x40], [0x4f, 0xbb], [0x50, 0x9c], [0x5a, 0x57], [0x6d, 0x80], [0x3d, 0x34], [0x39, 0x02], [0x35, 0x88], [0x22, 0x0a], [0x37, 0x40], [0x34, 0xa0], [0x06, 0x02], [0x0d, 0xb7], [0x0e, 0x01], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0xc8], [0xc1, 0x96], [0x86, 0x3d], [0x50, 0x89], [0x51, 0x90], [0x52, 0x2c], [0x53, 0x00], [0x54, 0x00], [0x55, 0x88], [0x57, 0x00], [0x5a, 0xa0], [0x5b, 0x78], [0x5c, 0x00], [0xd3, 0x04], [0xe0, 0x00], [0xff, 0xff]],
            'OV2640_800x600_JPEG': [[0xff, 0x01], [0x11, 0x01], [0x12, 0x00], [0x17, 0x11], [0x18, 0x75], [0x32, 0x36], [0x19, 0x01], [0x1a, 0x97], [0x03, 0x0f], [0x37, 0x40], [0x4f, 0xbb], [0x50, 0x9c], [0x5a, 0x57], [0x6d, 0x80], [0x3d, 0x34], [0x39, 0x02], [0x35, 0x88], [0x22, 0x0a], [0x37, 0x40], [0x34, 0xa0], [0x06, 0x02], [0x0d, 0xb7], [0x0e, 0x01], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0xc8], [0xc1, 0x96], [0x86, 0x35], [0x50, 0x89], [0x51, 0x90], [0x52, 0x2c], [0x53, 0x00], [0x54, 0x00], [0x55, 0x88], [0x57, 0x00], [0x5a, 0xc8], [0x5b, 0x96], [0x5c, 0x00], [0xd3, 0x02], [0xe0, 0x00], [0xff, 0xff]],
            'OV2640_1024x768_JPEG': [[0xff, 0x01], [0x11, 0x01], [0x12, 0x00], [0x17, 0x11], [0x18, 0x75], [0x32, 0x36], [0x19, 0x01], [0x1a, 0x97], [0x03, 0x0f], [0x37, 0x40], [0x4f, 0xbb], [0x50, 0x9c], [0x5a, 0x57], [0x6d, 0x80], [0x3d, 0x34], [0x39, 0x02], [0x35, 0x88], [0x22, 0x0a], [0x37, 0x40], [0x34, 0xa0], [0x06, 0x02], [0x0d, 0xb7], [0x0e, 0x01], [0xff, 0x00], [0xc0, 0xc8], [0xc1, 0x96], [0x8c, 0x00], [0x86, 0x3d], [0x50, 0x00], [0x51, 0x90], [0x52, 0x2c], [0x53, 0x00], [0x54, 0x00], [0x55, 0x88], [0x5a, 0x00], [0x5b, 0xc0], [0x5c, 0x01], [0xd3, 0x02], [0xff, 0xff]],
            'OV2640_1280x960_JPEG': [[0xff, 0x01], [0x11, 0x01], [0x12, 0x00], [0x17, 0x11], [0x18, 0x75], [0x32, 0x36], [0x19, 0x01], [0x1a, 0x97], [0x03, 0x0f], [0x37, 0x40], [0x4f, 0xbb], [0x50, 0x9c], [0x5a, 0x57], [0x6d, 0x80], [0x3d, 0x34], [0x39, 0x02], [0x35, 0x88], [0x22, 0x0a], [0x37, 0x40], [0x34, 0xa0], [0x06, 0x02], [0x0d, 0xb7], [0x0e, 0x01], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0xc8], [0xc1, 0x96], [0x86, 0x3d], [0x50, 0x00], [0x51, 0x90], [0x52, 0x2c], [0x53, 0x00], [0x54, 0x00], [0x55, 0x88], [0x57, 0x00], [0x5a, 0x40], [0x5b, 0xf0], [0x5c, 0x01], [0xd3, 0x02], [0xe0, 0x00], [0xff, 0xff]],
            'OV2640_1600x1200_JPEG': [[0xff, 0x01], [0x11, 0x01], [0x12, 0x00], [0x17, 0x11], [0x18, 0x75], [0x32, 0x36], [0x19, 0x01], [0x1a, 0x97], [0x03, 0x0f], [0x37, 0x40], [0x4f, 0xbb], [0x50, 0x9c], [0x5a, 0x57], [0x6d, 0x80], [0x3d, 0x34], [0x39, 0x02], [0x35, 0x88], [0x22, 0x0a], [0x37, 0x40], [0x34, 0xa0], [0x06, 0x02], [0x0d, 0xb7], [0x0e, 0x01], [0xff, 0x00], [0xe0, 0x04], [0xc0, 0xc8], [0xc1, 0x96], [0x86, 0x3d], [0x50, 0x00], [0x51, 0x90], [0x52, 0x2c], [0x53, 0x00], [0x54, 0x00], [0x55, 0x88], [0x57, 0x00], [0x5a, 0x90], [0x5b, 0x2c], [0x5c, 0x05], [0xd3, 0x02], [0xe0, 0x00], [0xff, 0xff]]
        })

    @staticmethod
    def info():
        return AttrDefault(bool, {'name': 'ArduCAMMini'})

    def wired(self, obniz):
        self.obniz.set_vcc_gnd(*[self.params.vcc, self.params.gnd, '5v'])
        self.io_cs = obniz.get_io(*[self.params.cs])
        self.io_cs.output(*[True])
        obniz.wait(*[100])
        self.sensor_addr = 0x30
        self.params.mode = self.params.mode or 'master'
        self.params.drive = self.params.spi_drive or '3v'
        self.params.frequency = self.params.spi_frequency or 4 * 1000 * 1000
        self.params.clk = self.params.sclk
        self.spi = self.obniz.get_spi_with_config(*[self.params])
        self.params.sda = self.params.sda
        self.params.scl = self.params.scl
        self.params.clock = self.params.clock or 100 * 1000
        self.params.mode = 'master'
        self.params.pull = '5v'
        self.i2c = obniz.get_i2c_with_config(*[self.params])

    def spi_write(self, addr, byte_data):
        data = [addr, byte_data]
        self.io_cs.output(*[False])
        self.spi.write(*[data])
        self.io_cs.output(*[True])

    async def spi_read_wait(self, addr):
        data = [addr, 0x00]
        self.io_cs.output(*[False])
        recv = await self.spi.write_wait(*[data])
        self.io_cs.output(*[True])
        return recv[1]

    def i2c_byte_write(self, addr, byte_data):
        self.i2c.write(*[self.sensor_addr, [addr, byte_data]])

    def i2c_regs_write(self, regs):
        for i in range(0, len(regs), 1):
            self.i2c.write(*[self.sensor_addr, regs[i]])

    def spi_write_reg(self, addr, byte_data):
        self.spi_write(*[addr | 0x80, byte_data])

    async def spi_read_reg_wait(self, addr):
        return await self.spi_read_wait(*[addr & 0x7f])

    async def spi_pingpong_wait(self):
        test_val = 0x55
        self.spi_write_reg(*[self.regs.ARDUCHIP_TEST1, test_val])
        val = await self.spi_read_reg_wait(*[self.regs.ARDUCHIP_TEST1])
        if val != test_val:
            raise Exception('spi bus fail')

    def set_mode(self, mode):
        modes = AttrDefault(bool, {'MCU2LCD': 0x00, 'CAM2LCD': 0x01, 'LCD2MCU': 0x02})
        if type(modes[mode]) is not int:
            raise Exception('unknown mode. options are ' + str(modes))
        self.spi_write_reg(*[self.regs.ARDUCHIP_MODE, modes[mode]])

    async def get_chip_id_wait(self):
        self.i2c.write(*[self.sensor_addr, [0x0a]])
        val0 = await self.i2c.read_wait(*[self.sensor_addr, 1])
        self.i2c.write(*[self.sensor_addr, [0x0b]])
        val1 = await self.i2c.read_wait(*[self.sensor_addr, 1])
        return ((val0[0] << 8) + val1[0])

    def init(self):
        self.i2c_byte_write(*[0xff, 0x01])
        self.i2c_byte_write(*[0x12, 0x80])
        self.obniz.wait(*[100])
        self.i2c_regs_write(*[self.configs.OV2640_JPEG_INIT])
        self.i2c_regs_write(*[self.configs.OV2640_YUV422])
        self.i2c_regs_write(*[self.configs.OV2640_JPEG])
        self.i2c_byte_write(*[0xff, 0x01])
        self.i2c_byte_write(*[0x15, 0x00])
        self.set_size(*['320x240'])

    async def startup_wait(self):
        await self.spi_pingpong_wait()
        self.set_mode(*['MCU2LCD'])
        chipid = await self.get_chip_id_wait()
        if chipid != 0x2642:
            raise Exception('unknown chip ' + str(chipid))
        self.init()

    async def take_wait(self, size):
        if type(size) == str and self._size != size:
            self.set_size(*[size])
            self.obniz.wait(*[1000])
        self.flush_fifo()
        self.flush_fifo()
        self.start_capture()
        while True:
            if await self.is_capture_done_wait():
                break
        return await self.read_fifo_wait()

    def set_size(self, string):
        if hasattr(self, "_size") and self._size == string:
            return
        map = AttrDefault(bool, {
            '160x120': self.configs.OV2640_160x120_JPEG,
            '176x144': self.configs.OV2640_176x144_JPEG,
            '320x240': self.configs.OV2640_320x240_JPEG,
            '352x288': self.configs.OV2640_352x288_JPEG,
            '640x480': self.configs.OV2640_640x480_JPEG,
            '800x600': self.configs.OV2640_800x600_JPEG,
            '1024x768': self.configs.OV2640_1024x768_JPEG,
            '1280x960': self.configs.OV2640_1280x960_JPEG,
            '1600x1200': self.configs.OV2640_1600x1200_JPEG})
        if map[string]:
            self._size = string
            self.i2c_regs_write(*[map[string]])
        else:
            raise Exception('unsupported size options are ' + str(list(map.keys())))

    def update_fifo(self, data):
        self.spi_write_reg(*[self.regs.ARDUCHIP_FIFO, data])

    def flush_fifo(self):
        self.spi_write_reg(*[self.regs.ARDUCHIP_FIFO, 0x01])

    async def read_fifolength_wait(self):
        len1 = await self.spi_read_reg_wait(*[self.regs.FIFO_SIZE1])
        len2 = await self.spi_read_reg_wait(*[self.regs.FIFO_SIZE2])
        len3 = (await self.spi_read_reg_wait(*[self.regs.FIFO_SIZE3]) & 0x07)
        return ((len3 << 16) | (len2 << 8) | len1) & 0x07ffff

    def start_capture(self):
        self.spi_write_reg(*[self.regs.ARDUCHIP_FIFO, 0x02])

    async def is_capture_done_wait(self):
        CAP_DONE_MASK = 0x08
        val = await self.spi_read_reg_wait(*[self.regs.ARDUCHIP_TRIG])
        return True if val & CAP_DONE_MASK else False

    async def read_fifo_wait(self):
        length = await self.read_fifolength_wait()
        self.io_cs.output(*[False])
        self.spi.write(*[[self.regs.BURST_FIFO_READ]])
        self.spi.write(*[[0xff]])
        buf = []
        while len(buf) < length:
            must_read = (length - len(buf))
            if must_read > 1024:
                must_read = 1024
            arr = [0] * must_read
            # arr.fill(*[0])
            sliced = await self.spi.write_wait(*[arr])
            buf.extend(sliced)
        self.io_cs.output(*[True])
        return buf

    def array_to_base64(self, array):
        return base64.b64encode(bytearray(array))