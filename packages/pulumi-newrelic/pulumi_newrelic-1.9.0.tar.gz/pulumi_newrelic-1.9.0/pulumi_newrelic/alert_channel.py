# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class AlertChannel(pulumi.CustomResource):
    config: pulumi.Output[dict]
    """
    A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.

      * `api_key` (`str`)
      * `authPassword` (`str`)
      * `authType` (`str`)
      * `authUsername` (`str`)
      * `baseUrl` (`str`)
      * `channel` (`str`)
      * `headers` (`dict`)
      * `headersString` (`str`)
      * `includeJsonAttachment` (`str`)
      * `key` (`str`)
      * `payload` (`dict`)
      * `payloadString` (`str`)
      * `payloadType` (`str`)
      * `recipients` (`str`)
      * `region` (`str`)
      * `routeKey` (`str`)
      * `serviceKey` (`str`)
      * `tags` (`str`)
      * `teams` (`str`)
      * `url` (`str`)
      * `userId` (`str`)
    """
    configuration: pulumi.Output[dict]
    """
    **Deprecated** (Optional) A map of key/value pairs with channel type specific values. This argument is deprecated.  Use the `config` argument instead.
    """
    name: pulumi.Output[str]
    """
    The name of the channel.
    """
    type: pulumi.Output[str]
    """
    The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.
    """
    def __init__(__self__, resource_name, opts=None, config=None, configuration=None, name=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Use this resource to create and manage New Relic alert policies.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_channel.html.markdown.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.
        :param pulumi.Input[dict] configuration: **Deprecated** (Optional) A map of key/value pairs with channel type specific values. This argument is deprecated.  Use the `config` argument instead.
        :param pulumi.Input[str] name: The name of the channel.
        :param pulumi.Input[str] type: The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.

        The **config** object supports the following:

          * `api_key` (`pulumi.Input[str]`)
          * `authPassword` (`pulumi.Input[str]`)
          * `authType` (`pulumi.Input[str]`)
          * `authUsername` (`pulumi.Input[str]`)
          * `baseUrl` (`pulumi.Input[str]`)
          * `channel` (`pulumi.Input[str]`)
          * `headers` (`pulumi.Input[dict]`)
          * `headersString` (`pulumi.Input[str]`)
          * `includeJsonAttachment` (`pulumi.Input[str]`)
          * `key` (`pulumi.Input[str]`)
          * `payload` (`pulumi.Input[dict]`)
          * `payloadString` (`pulumi.Input[str]`)
          * `payloadType` (`pulumi.Input[str]`)
          * `recipients` (`pulumi.Input[str]`)
          * `region` (`pulumi.Input[str]`)
          * `routeKey` (`pulumi.Input[str]`)
          * `serviceKey` (`pulumi.Input[str]`)
          * `tags` (`pulumi.Input[str]`)
          * `teams` (`pulumi.Input[str]`)
          * `url` (`pulumi.Input[str]`)
          * `userId` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['config'] = config
            __props__['configuration'] = configuration
            __props__['name'] = name
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(AlertChannel, __self__).__init__(
            'newrelic:index/alertChannel:AlertChannel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, config=None, configuration=None, name=None, type=None):
        """
        Get an existing AlertChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.
        :param pulumi.Input[dict] configuration: **Deprecated** (Optional) A map of key/value pairs with channel type specific values. This argument is deprecated.  Use the `config` argument instead.
        :param pulumi.Input[str] name: The name of the channel.
        :param pulumi.Input[str] type: The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.

        The **config** object supports the following:

          * `api_key` (`pulumi.Input[str]`)
          * `authPassword` (`pulumi.Input[str]`)
          * `authType` (`pulumi.Input[str]`)
          * `authUsername` (`pulumi.Input[str]`)
          * `baseUrl` (`pulumi.Input[str]`)
          * `channel` (`pulumi.Input[str]`)
          * `headers` (`pulumi.Input[dict]`)
          * `headersString` (`pulumi.Input[str]`)
          * `includeJsonAttachment` (`pulumi.Input[str]`)
          * `key` (`pulumi.Input[str]`)
          * `payload` (`pulumi.Input[dict]`)
          * `payloadString` (`pulumi.Input[str]`)
          * `payloadType` (`pulumi.Input[str]`)
          * `recipients` (`pulumi.Input[str]`)
          * `region` (`pulumi.Input[str]`)
          * `routeKey` (`pulumi.Input[str]`)
          * `serviceKey` (`pulumi.Input[str]`)
          * `tags` (`pulumi.Input[str]`)
          * `teams` (`pulumi.Input[str]`)
          * `url` (`pulumi.Input[str]`)
          * `userId` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["configuration"] = configuration
        __props__["name"] = name
        __props__["type"] = type
        return AlertChannel(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

