"""Maze Runner HTML, by Al Sweigart al@inventwithpython.com

Move around a maze and try to escape... in 3D and IN YOUR WEB BROWSER!
Tags: large, maze"""

__version__ = 1
import sys, os, shutil, webbrowser

# Maze file constants:
WALL = '#'
EMPTY = ' '
START = 'S'
EXIT = 'E'

NORTH = 'NORTH'
SOUTH = 'SOUTH'
EAST = 'EAST'
WEST = 'WEST'

print('''MAZE RUNNER HTML
By Al Sweigart al@inventwithpython.com

(Maze files are generated by mazemaker*.py)''')

# Get the maze file's filename from the user:
while True:
    print('Enter the filename of the maze (or LIST or QUIT):')
    filename = input()

    # List all the maze files in the current folder:
    if filename.upper() == 'LIST':
        print('Maze files found in', os.getcwd())
        for fileInCurrentFolder in os.listdir():
            if (fileInCurrentFolder.startswith('maze') and
            fileInCurrentFolder.endswith('.txt')):
                print('  ', fileInCurrentFolder)
        continue

    if filename.upper() == 'QUIT':
        sys.exit()

    if os.path.exists(filename):
        break
    print('There is no file named', filename)

# Load the maze from a file:
mazeFile = open(filename)
maze = {}
lines = mazeFile.readlines()
startx = None
starty = None
exitx = None
exity = None
y = 0
for line in lines:
    WIDTH = len(line.rstrip())
    for x, character in enumerate(line.rstrip()):
        assert character in (WALL, EMPTY, START, EXIT), 'Invalid character at column {}, line {}'.format(x + 1, y + 1)
        if character in (WALL, EMPTY):
            maze[(x, y)] = character
        elif character == START:
            startx, starty = x, y
            maze[(x, y)] = EMPTY
        elif character == EXIT:
            exitx, exity = x, y
            maze[(x, y)] = EMPTY
    y += 1
HEIGHT = y

assert startx != None and starty != None, 'No start point in maze file.'
assert exitx != None and exity != None, 'No exit point in maze file.'


# Generate HTML files:

# Cut off everything after the last dot (i.e. ".txt")
outputFolder = filename[: filename.rfind('.')]

numFilesWritten = 0
os.makedirs(outputFolder, exist_ok=True)
for x in range(WIDTH):
    for y in range(HEIGHT):
        # If this space is a wall, then the player can't be here.
        if maze[(x, y)] == WALL:
            continue

        for direction in (NORTH, EAST, SOUTH, WEST):
            htmlFilename = '{}/{}_{}_{}.html'.format(outputFolder, x, y, direction)
            print('Writing {}...'.format(htmlFilename))
            numFilesWritten += 1

            with open(htmlFilename, 'w') as htmlFile:
                if direction == NORTH:
                    # Map of the sections, relative  A
                    # to the player @:              BCD (Facing north)
                    #                               E@F
                    offsets = (('A', 0, -2), ('B', -1, -1), ('C', 0, -1),
                               ('D', 1, -1), ('E', -1, 0), ('F', 1, 0))
                if direction == SOUTH:
                    # Map of the sections, relative F@E
                    # to the player @:              DCB (Facing south)
                    #                                A
                    offsets = (('A', 0, 2), ('B', 1, 1), ('C', 0, 1),
                               ('D', -1, 1), ('E', 1, 0), ('F', -1, 0))
                if direction == EAST:
                    # Map of the sections, relative EB
                    # to the player @:              @CA (Facing east)
                    #                               FD
                    offsets = (('A', 2, 0), ('B', 1, -1), ('C', 1, 0),
                               ('D', 1, 1), ('E', 0, -1), ('F', 0, 1))
                if direction == WEST:
                    # Map of the sections, relative  DF
                    # to the player @:              AC@ (Facing west)
                    #                                BE
                    offsets = (('A', -2, 0), ('B', -1, 1), ('C', -1, 0),
                               ('D', -1, -1), ('E', 0, 1), ('F', 0, -1))

                section = {}
                for sec, xOffset, yOffset in offsets:
                    offSetPosition = (x + xOffset, y + yOffset)
                    section[sec] = maze.get(offSetPosition, WALL)
                    if (x + xOffset, y + yOffset) == (exitx, exity):
                        section[sec] = EXIT

                wallImgFilename = ''
                for sec in 'ABDCEF':
                    if section[sec] == WALL:
                        wallImgFilename += sec
                # Alphabetize order because C and D are out of order:
                wallImgFilename = ''.join(sorted(list(wallImgFilename)))

                # Draw the EXIT sign if needed:
                if section['C'] == EXIT:
                    wallImgFilename += '_exitback'
                if section['E'] == EXIT:
                    wallImgFilename += '_exitleft'
                if section['F'] == EXIT:
                    wallImgFilename += '_exitright'

                wallImgFilename += '.jpg'

                # Calculate turn URLs:
                if direction == NORTH:
                    leftDir = WEST
                elif direction == WEST:
                    leftDir = SOUTH
                elif direction == SOUTH:
                    leftDir = EAST
                elif direction == EAST:
                    leftDir = NORTH
                turnLeftURL = '{}_{}_{}.html'.format(x, y, leftDir)

                if direction == NORTH:
                    rightDir = EAST
                elif direction == EAST:
                    rightDir = SOUTH
                elif direction == SOUTH:
                    rightDir = WEST
                elif direction == WEST:
                    rightDir = NORTH

                turnRightURL = '{}_{}_{}.html'.format(x, y, rightDir)

                if section['C'] != WALL:
                    forwardURL = '{}_{}_{}.html'.format(x + offsets[2][1], y + offsets[2][2], direction)
                else:
                    forwardURL = '#'

                # Create the .html file:
                htmlFile.write('''
<!-- This line is an HTML comment, which is ignored by the browser. -->
<!-- HTML tags are between angle brackets < and >. The <html>, <head>,
     <title>, and <body> tags are used in all web pages. They are paired
     with closing tags like </html>. -->
<html>
<head>
    <title>{}</title>
</head>
<body>
    <!-- <center> puts things in the center of the page. -->
    <center>
    <!-- <img> displays an image, while <br /> adds a break return.
         The <br> tag has no paired closing tag, which is why it's
         written as <br /> -->
    <img src="../maze_html_images/{}" /><br />

    Facing: {}<br />

    <!-- Everything between <a> and </a> is a clickable link. We make
         the arrow images clickable links. -->
    <a href="{}"><img src="../maze_html_images/turn_left.png" /></a>
    <a href="{}"><img src="../maze_html_images/forward.png" /></a>
    <a href="{}"><img src="../maze_html_images/turn_right.png" /></a>
    </center>
</body>
</html>
'''.format(filename, wallImgFilename, direction, turnLeftURL, forwardURL, turnRightURL))

            # After writing the html file, see if this is the starting position:
            if (startx, starty, direction) == (x, y, NORTH):
                shutil.copy(htmlFilename, outputFolder + '/index.html')
                numFilesWritten += 1

print('Done. {} files written.'.format(numFilesWritten))
print('Opening browser...')
webbrowser.open(os.path.join(outputFolder, 'index.html'))
