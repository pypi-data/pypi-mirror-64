.. include:: /defs.txt

Plotting
========

|Zero| relies on the powerful `Matplotlib <https://matplotlib.org/>`__ plotting library. In all
cases, the plots produced by |Zero| can be further modified in ways supported by Matplotlib.

Plotting in analysis scripts
----------------------------

In scripts, plots are generated by the call to the :ref:`solution <solution/index:Solutions>`'s
:meth:`~.Solution.plot_responses` or :meth:`~.Solution.plot_noise` methods. These support many
display options, as listed below. The return value from these methods is the
:class:`~matplotlib.figure.Figure`, which can be
:ref:`further modified <plotting/index:Further modifying plots generated by |Zero|>`.

After calling either :meth:`~.Solution.plot_responses` or :meth:`~.Solution.plot_noise`, you can
show the generated plots with :meth:`~.Solution.show`. This method is called separately to allow
you to show a number of plots simultaneously.

Responses
~~~~~~~~~

.. automethod:: zero.solution.Solution.plot_responses
   :noindex:

Noise spectral densities
~~~~~~~~~~~~~~~~~~~~~~~~

.. automethod:: zero.solution.Solution.plot_noise
   :noindex:

Further modifying plots generated by |Zero|
-------------------------------------------

If you wish to apply further styling to a plot generated by |Zero|, you can do so using `Matplotlib
<https://matplotlib.org/>`__ method calls on the :attr:`~.MatplotlibPlotter.figure` property of the
:class:`plotter <.MatplotlibPlotter>` object.

You can also set the :class:`.Solution`'s :attr:`~.Solution.response_plotter` and
:attr:`~.Solution.noise_plotter` attributes to custom :class:`.BaseGroupPlotter` implementations to
provide full control over plotting capabilities.

Plotting from the command line
------------------------------

The LISO compatibility command line interface provides some options for controlling the display
of plots and for saving copies to the file system. See
:ref:`LISO tools in the CLI section <cli/liso:LISO tools>` for more information.
