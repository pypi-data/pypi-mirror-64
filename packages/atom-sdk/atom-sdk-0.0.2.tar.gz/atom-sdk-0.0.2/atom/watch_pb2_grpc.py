# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import meta_pb2 as meta__pb2
from . import watch_pb2 as watch__pb2


class WatchServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Watch = channel.unary_unary(
                '/apiserver.v2.WatchService/Watch',
                request_serializer=meta__pb2.ResourceReference.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Unwatch = channel.unary_unary(
                '/apiserver.v2.WatchService/Unwatch',
                request_serializer=meta__pb2.ResourceReference.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.IsWatching = channel.unary_unary(
                '/apiserver.v2.WatchService/IsWatching',
                request_serializer=meta__pb2.ResourceReference.SerializeToString,
                response_deserializer=watch__pb2.IsWatchingRes.FromString,
                )
        self.ListWatching = channel.unary_unary(
                '/apiserver.v2.WatchService/ListWatching',
                request_serializer=watch__pb2.ListWatchingReq.SerializeToString,
                response_deserializer=watch__pb2.ListWatchingRes.FromString,
                )


class WatchServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unwatch(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsWatching(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWatching(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WatchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Watch': grpc.unary_unary_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=meta__pb2.ResourceReference.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Unwatch': grpc.unary_unary_rpc_method_handler(
                    servicer.Unwatch,
                    request_deserializer=meta__pb2.ResourceReference.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'IsWatching': grpc.unary_unary_rpc_method_handler(
                    servicer.IsWatching,
                    request_deserializer=meta__pb2.ResourceReference.FromString,
                    response_serializer=watch__pb2.IsWatchingRes.SerializeToString,
            ),
            'ListWatching': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWatching,
                    request_deserializer=watch__pb2.ListWatchingReq.FromString,
                    response_serializer=watch__pb2.ListWatchingRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'apiserver.v2.WatchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WatchService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/apiserver.v2.WatchService/Watch',
            meta__pb2.ResourceReference.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unwatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/apiserver.v2.WatchService/Unwatch',
            meta__pb2.ResourceReference.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsWatching(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/apiserver.v2.WatchService/IsWatching',
            meta__pb2.ResourceReference.SerializeToString,
            watch__pb2.IsWatchingRes.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWatching(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/apiserver.v2.WatchService/ListWatching',
            watch__pb2.ListWatchingReq.SerializeToString,
            watch__pb2.ListWatchingRes.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
