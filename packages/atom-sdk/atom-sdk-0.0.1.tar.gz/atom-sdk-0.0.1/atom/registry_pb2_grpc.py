# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import registry_pb2 as registry__pb2


class RegistryServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListNamespaces = channel.unary_unary(
                '/apiserver.v2.RegistryService/ListNamespaces',
                request_serializer=registry__pb2.ListNamespacesReq.SerializeToString,
                response_deserializer=registry__pb2.ListNamespacesRes.FromString,
                )
        self.ListRepositories = channel.unary_unary(
                '/apiserver.v2.RegistryService/ListRepositories',
                request_serializer=registry__pb2.ListRepositoriesReq.SerializeToString,
                response_deserializer=registry__pb2.ListRepositoriesRes.FromString,
                )
        self.ListTags = channel.unary_unary(
                '/apiserver.v2.RegistryService/ListTags',
                request_serializer=registry__pb2.ListTagsReq.SerializeToString,
                response_deserializer=registry__pb2.ListTagsRes.FromString,
                )


class RegistryServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def ListNamespaces(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRepositories(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTags(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListNamespaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNamespaces,
                    request_deserializer=registry__pb2.ListNamespacesReq.FromString,
                    response_serializer=registry__pb2.ListNamespacesRes.SerializeToString,
            ),
            'ListRepositories': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRepositories,
                    request_deserializer=registry__pb2.ListRepositoriesReq.FromString,
                    response_serializer=registry__pb2.ListRepositoriesRes.SerializeToString,
            ),
            'ListTags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTags,
                    request_deserializer=registry__pb2.ListTagsReq.FromString,
                    response_serializer=registry__pb2.ListTagsRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'apiserver.v2.RegistryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegistryService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def ListNamespaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/apiserver.v2.RegistryService/ListNamespaces',
            registry__pb2.ListNamespacesReq.SerializeToString,
            registry__pb2.ListNamespacesRes.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRepositories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/apiserver.v2.RegistryService/ListRepositories',
            registry__pb2.ListRepositoriesReq.SerializeToString,
            registry__pb2.ListRepositoriesRes.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/apiserver.v2.RegistryService/ListTags',
            registry__pb2.ListTagsReq.SerializeToString,
            registry__pb2.ListTagsRes.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
