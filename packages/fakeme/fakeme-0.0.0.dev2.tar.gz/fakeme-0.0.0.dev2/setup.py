# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['fakeme', 'fakeme.cli', 'fakeme.examples.space_ship_parts']

package_data = \
{'': ['*'], 'fakeme': ['examples/cli_usage/*', 'examples/cli_usage/schemas/*']}

install_requires = \
['mimesis>=4.0,<5.0', 'pandas>=1.0,<2.0', 'ply>=3.11,<4.0']

entry_points = \
{'console_scripts': ['fakeme = fakeme.cli:cli']}

setup_kwargs = {
    'name': 'fakeme',
    'version': '0.0.0.dev2',
    'description': 'Relative Dataframes Generator: generate tables with data, that depend each other',
    'long_description': 'Fakeme Data Generator for Chained and Relative Data\n===================================================\n\nReadme and docs in process.\n\nUse under the hood at current time:\n\n     - Mimesis (like one of the generators for fields values)\n     - Pandas (like main instrument to combain data in tables (frames) \n     - Standart Python Library\n\n\nSupport Python 3.7\nWhat it does not do?\n=========================\n\nThis is not random value generated library - for this exist pretty cool lib Mimesis and another. \n\n\nWhat it does?\n=========================\n\n**Fakeme** oriented on generation data that depend on values in another tables/datasets.\nData, that knitted together as real. \n\n**Fakeme** can help you if you want to generate several tables, that must contains in columns values, \nthat you will use like key for join.\n\nFor example, *user_data* table has field *user_id* and *users* table contains list of users with column id. \nYou want join it on user_id = id.\n\n**Fakeme** will generate for you 2 tables with same values in those 2 columns. \n\nIt does not matter to have columns with same name you can define dependencies between tables with alias names. \n \n \nWhat you can to do\n=========================\n\n1. Define that fields in your datasets must contain similar values\n\n2. You can set up how much values must intersect, for example, you want to emulate data for email validation pipeline - \nyou have one dataset with *incoming* messages  and you need to find all emails that was not added previously in your *contacts* table.\n\nSo you will have incoming messages table, that contains, for example only 70% of emails that exist in contacts table. \n\n3. You can use multiply columns as a key (dependency) in another column, for example, \n*player_final_report* must contains for each player same values as in other tables, for example, you have *player* table\nwith players details and *in_game_player_activity* with all player activities for some test reasons it\'s critical\nto you generate *player_final_report* with 1-to-1 data from other 2 tables.\n \n4. Union tables. You can generate tables that contains all rows from another tables. \n\n5. You can define your own generator for fields on Python.\n\n6. You can define your own output format\n\n\nExamples\n=========================\n\n   You can find usage examples in \'examples/\' folder.\n        \nSupported schema formats\n=========================\n    \n    ...\n \nBuild and install from src\n==========================\n    \n    ...\n    \n\nUsage\n=========================\n    \n    ...\n    \n    \nCustomisation\n=========================\n    \n    ...\n\n\nOutput formats\n=========================\n\nBy default result output is JSON. \n\n\n\nFrom Command Line\n=========================\n\nUsage from command line:\n\n     fakeme path_to/config.json\n\nTo use Generator from command line, you need to install it at first. \nTo check what it installed correct, input command:\n\n     fakeme\n    \nYou must get such output: \n\n    usage: Fakeme Tables Data Generator [-h] config\n    Fakeme Tables Data Generator: error: the following arguments are required: config\n\nTo use generator from command line, you need to define config.json \n(it must be json file, name of file does not matter). \n\nTo get example, how to define config, check: \n\n        fakeme/examples/cli_usage/fakeme_config.json\n\n\nJSON Config for Cli usage\n=========================\n\nYou can put into config dict all args, what is RunGenerator class wait for:\n\n    `tables_list, paths_with_scripts, settings, dump_schema, chains`\n\nTo get more information about types - look at RunGenerator class docstring.\n\nExample: \n\n   ...\n\nField Rules\n=========================\n\nField rule it\'s a dict, what contain:\n \n **field**  name for field \n **generator**  it is a key, what contain python code or value; must be defined like a string look at section Generators to know more.\n **len** len of result value  \n \nExist list of pre-defined rules that will be usd by default if user did not any provide specific rules\nand field name include one of standart rules key.\n\nList of built_in_rules here:\n\n    fakeme/rules.py\n    \nGenerators\n=========================\n\nGenerators it\'s a functions or values, or other python structures, \nthat are used to generate value like this:\n\n    value = eval(rule[\'generator\'])\n\nSo it must be valid python code that will be \'evaled\'. \n\n\nAll generators for fields are defined in field rules in key \'generator\', for example:\n\n    {"field": "name", "generator": "person.name()", "len": "4"} \n    \nIt mean, what value for field will be result of person.name() splitted to have len == 4.\n\n\nRelations\n=========================\n\nTo define relations you need to use param \'rls\' of  RunGenerator class or provide it in \njson config.\n\nrls waits for dictionary, that contains as a keys of 1st level tables\n\nFor example:\n\n    rls = {\'warehouse\': {\'part_id\': {\'alias\': \'part_identification\',\n                                                \'matches\': 1,\n                                                \'table\': \'parts\'}}\n                                                }\n\nMeans, that field \'part_id\' of table \'warehouse\' depends on field \'part_identification\' in table \'parts\'. \nIt means it must contain save values as in \'parts\' table in column \'part_identification\'.\n\nSettings:\n    \n    "matches" - % of values in column that must intersect with aliased column in another table. 1 == 100, 0.8 = 80 and etc\n   \n\nExample: \n    \n     fakeme/examples/space_ship_parts/space_ship_warehouse_tables.py\n\n\nSettings\n=========================\n\nDefault settings: \n\n    d default_settings = {\n        "row_numbers": 100,\n        "matches": 0.6,\n        "timezone": "UTC",\n        "output": {"file_format": "json","config": {}}}\n    \nSetting description: \n\n    "row_numbers" - count of how many rows need to generate for each table data\n    \n    "matches" - % of values in column that must intersect with aliased column in another table. 1 == 100, 0.8 = 80 and etc\n    \n    "timezone" - default timezone for datetime data\n    \n    "output" - settings of output data format \n    \n    \n\n\nGenerators "from the Box"\n=========================\n\n...\n\n    \nAdd custom fields generators\n=============================\n\nFind example in:\n\n     fakeme/examples/space_ship_parts/space_ship_warehouse_tables.py\n\n    \nIf you want to add your new field rule (how to generate it correct), \nyou can do it from your python script runner:\n\n    at the bottom of your script (before you call RunGenerator) add:\n    \n    from  fakeme.fields import FieldRules\n    \n    FieldRules.user_rules.append(\n    {"field": "count", "generator": "str(randint(100, 6000))", "len": ""})\n\n\n',
    'author': 'xnuinside',
    'author_email': 'xnuinside@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/xnuinside/fakeme',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
