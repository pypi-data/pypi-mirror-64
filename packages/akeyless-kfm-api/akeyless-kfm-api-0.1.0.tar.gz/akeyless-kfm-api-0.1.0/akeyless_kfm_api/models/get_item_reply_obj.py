# coding: utf-8

"""
    KFM - Application API

    KFM manages and stores key fragments. The core operations of each KFM instance are as follows: Creating secure random encryption keys which will be used as an encryption key fragment. Managing data storage for key fragments. Performing a key fragment derivation function, which generates a derived fragment from the original key fragment.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from akeyless_kfm_api.models.ssh_certificate_issue_details import SSHCertificateIssueDetails  # noqa: F401,E501


class GetItemReplyObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificates': 'str',
        'item_metadata': 'str',
        'item_name': 'str',
        'item_size': 'int',
        'item_type': 'str',
        'last_version': 'int',
        'permissions': 'list[str]',
        'protection_key_name': 'str',
        'public_value': 'str',
        'ssh_cert_issue_details': 'SSHCertificateIssueDetails',
        'ssh_cert_issuer_signer_key_name': 'str',
        'with_customer_fragment': 'bool'
    }

    attribute_map = {
        'certificates': 'certificates',
        'item_metadata': 'item_metadata',
        'item_name': 'item_name',
        'item_size': 'item_size',
        'item_type': 'item_type',
        'last_version': 'last_version',
        'permissions': 'permissions',
        'protection_key_name': 'protection_key_name',
        'public_value': 'public_value',
        'ssh_cert_issue_details': 'ssh_cert_issue_details',
        'ssh_cert_issuer_signer_key_name': 'ssh_cert_issuer_signer_key_name',
        'with_customer_fragment': 'with_customer_fragment'
    }

    def __init__(self, certificates=None, item_metadata=None, item_name=None, item_size=None, item_type=None, last_version=None, permissions=None, protection_key_name=None, public_value=None, ssh_cert_issue_details=None, ssh_cert_issuer_signer_key_name=None, with_customer_fragment=None):  # noqa: E501
        """GetItemReplyObj - a model defined in Swagger"""  # noqa: E501

        self._certificates = None
        self._item_metadata = None
        self._item_name = None
        self._item_size = None
        self._item_type = None
        self._last_version = None
        self._permissions = None
        self._protection_key_name = None
        self._public_value = None
        self._ssh_cert_issue_details = None
        self._ssh_cert_issuer_signer_key_name = None
        self._with_customer_fragment = None
        self.discriminator = None

        if certificates is not None:
            self.certificates = certificates
        if item_metadata is not None:
            self.item_metadata = item_metadata
        if item_name is not None:
            self.item_name = item_name
        if item_size is not None:
            self.item_size = item_size
        if item_type is not None:
            self.item_type = item_type
        if last_version is not None:
            self.last_version = last_version
        if permissions is not None:
            self.permissions = permissions
        if protection_key_name is not None:
            self.protection_key_name = protection_key_name
        if public_value is not None:
            self.public_value = public_value
        if ssh_cert_issue_details is not None:
            self.ssh_cert_issue_details = ssh_cert_issue_details
        if ssh_cert_issuer_signer_key_name is not None:
            self.ssh_cert_issuer_signer_key_name = ssh_cert_issuer_signer_key_name
        if with_customer_fragment is not None:
            self.with_customer_fragment = with_customer_fragment

    @property
    def certificates(self):
        """Gets the certificates of this GetItemReplyObj.  # noqa: E501


        :return: The certificates of this GetItemReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this GetItemReplyObj.


        :param certificates: The certificates of this GetItemReplyObj.  # noqa: E501
        :type: str
        """

        self._certificates = certificates

    @property
    def item_metadata(self):
        """Gets the item_metadata of this GetItemReplyObj.  # noqa: E501


        :return: The item_metadata of this GetItemReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._item_metadata

    @item_metadata.setter
    def item_metadata(self, item_metadata):
        """Sets the item_metadata of this GetItemReplyObj.


        :param item_metadata: The item_metadata of this GetItemReplyObj.  # noqa: E501
        :type: str
        """

        self._item_metadata = item_metadata

    @property
    def item_name(self):
        """Gets the item_name of this GetItemReplyObj.  # noqa: E501


        :return: The item_name of this GetItemReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this GetItemReplyObj.


        :param item_name: The item_name of this GetItemReplyObj.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def item_size(self):
        """Gets the item_size of this GetItemReplyObj.  # noqa: E501


        :return: The item_size of this GetItemReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._item_size

    @item_size.setter
    def item_size(self, item_size):
        """Sets the item_size of this GetItemReplyObj.


        :param item_size: The item_size of this GetItemReplyObj.  # noqa: E501
        :type: int
        """

        self._item_size = item_size

    @property
    def item_type(self):
        """Gets the item_type of this GetItemReplyObj.  # noqa: E501


        :return: The item_type of this GetItemReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this GetItemReplyObj.


        :param item_type: The item_type of this GetItemReplyObj.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def last_version(self):
        """Gets the last_version of this GetItemReplyObj.  # noqa: E501


        :return: The last_version of this GetItemReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._last_version

    @last_version.setter
    def last_version(self, last_version):
        """Sets the last_version of this GetItemReplyObj.


        :param last_version: The last_version of this GetItemReplyObj.  # noqa: E501
        :type: int
        """

        self._last_version = last_version

    @property
    def permissions(self):
        """Gets the permissions of this GetItemReplyObj.  # noqa: E501


        :return: The permissions of this GetItemReplyObj.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GetItemReplyObj.


        :param permissions: The permissions of this GetItemReplyObj.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def protection_key_name(self):
        """Gets the protection_key_name of this GetItemReplyObj.  # noqa: E501


        :return: The protection_key_name of this GetItemReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._protection_key_name

    @protection_key_name.setter
    def protection_key_name(self, protection_key_name):
        """Sets the protection_key_name of this GetItemReplyObj.


        :param protection_key_name: The protection_key_name of this GetItemReplyObj.  # noqa: E501
        :type: str
        """

        self._protection_key_name = protection_key_name

    @property
    def public_value(self):
        """Gets the public_value of this GetItemReplyObj.  # noqa: E501


        :return: The public_value of this GetItemReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._public_value

    @public_value.setter
    def public_value(self, public_value):
        """Sets the public_value of this GetItemReplyObj.


        :param public_value: The public_value of this GetItemReplyObj.  # noqa: E501
        :type: str
        """

        self._public_value = public_value

    @property
    def ssh_cert_issue_details(self):
        """Gets the ssh_cert_issue_details of this GetItemReplyObj.  # noqa: E501


        :return: The ssh_cert_issue_details of this GetItemReplyObj.  # noqa: E501
        :rtype: SSHCertificateIssueDetails
        """
        return self._ssh_cert_issue_details

    @ssh_cert_issue_details.setter
    def ssh_cert_issue_details(self, ssh_cert_issue_details):
        """Sets the ssh_cert_issue_details of this GetItemReplyObj.


        :param ssh_cert_issue_details: The ssh_cert_issue_details of this GetItemReplyObj.  # noqa: E501
        :type: SSHCertificateIssueDetails
        """

        self._ssh_cert_issue_details = ssh_cert_issue_details

    @property
    def ssh_cert_issuer_signer_key_name(self):
        """Gets the ssh_cert_issuer_signer_key_name of this GetItemReplyObj.  # noqa: E501


        :return: The ssh_cert_issuer_signer_key_name of this GetItemReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._ssh_cert_issuer_signer_key_name

    @ssh_cert_issuer_signer_key_name.setter
    def ssh_cert_issuer_signer_key_name(self, ssh_cert_issuer_signer_key_name):
        """Sets the ssh_cert_issuer_signer_key_name of this GetItemReplyObj.


        :param ssh_cert_issuer_signer_key_name: The ssh_cert_issuer_signer_key_name of this GetItemReplyObj.  # noqa: E501
        :type: str
        """

        self._ssh_cert_issuer_signer_key_name = ssh_cert_issuer_signer_key_name

    @property
    def with_customer_fragment(self):
        """Gets the with_customer_fragment of this GetItemReplyObj.  # noqa: E501


        :return: The with_customer_fragment of this GetItemReplyObj.  # noqa: E501
        :rtype: bool
        """
        return self._with_customer_fragment

    @with_customer_fragment.setter
    def with_customer_fragment(self, with_customer_fragment):
        """Sets the with_customer_fragment of this GetItemReplyObj.


        :param with_customer_fragment: The with_customer_fragment of this GetItemReplyObj.  # noqa: E501
        :type: bool
        """

        self._with_customer_fragment = with_customer_fragment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetItemReplyObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetItemReplyObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
