# coding: utf-8

"""
    KFM - Application API

    KFM manages and stores key fragments. The core operations of each KFM instance are as follows: Creating secure random encryption keys which will be used as an encryption key fragment. Managing data storage for key fragments. Performing a key fragment derivation function, which generates a derived fragment from the original key fragment.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from akeyless_kfm_api.models.auth_method_access_info import AuthMethodAccessInfo  # noqa: F401,E501
from akeyless_kfm_api.models.auth_method_role_association import AuthMethodRoleAssociation  # noqa: F401,E501


class GetAuthMethodReplyObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_info': 'AuthMethodAccessInfo',
        'account_id': 'str',
        'auth_method_access_id': 'str',
        'auth_method_name': 'str',
        'auth_method_roles_assoc': 'list[AuthMethodRoleAssociation]'
    }

    attribute_map = {
        'access_info': 'access_info',
        'account_id': 'account_id',
        'auth_method_access_id': 'auth_method_access_id',
        'auth_method_name': 'auth_method_name',
        'auth_method_roles_assoc': 'auth_method_roles_assoc'
    }

    def __init__(self, access_info=None, account_id=None, auth_method_access_id=None, auth_method_name=None, auth_method_roles_assoc=None):  # noqa: E501
        """GetAuthMethodReplyObj - a model defined in Swagger"""  # noqa: E501

        self._access_info = None
        self._account_id = None
        self._auth_method_access_id = None
        self._auth_method_name = None
        self._auth_method_roles_assoc = None
        self.discriminator = None

        if access_info is not None:
            self.access_info = access_info
        if account_id is not None:
            self.account_id = account_id
        if auth_method_access_id is not None:
            self.auth_method_access_id = auth_method_access_id
        if auth_method_name is not None:
            self.auth_method_name = auth_method_name
        if auth_method_roles_assoc is not None:
            self.auth_method_roles_assoc = auth_method_roles_assoc

    @property
    def access_info(self):
        """Gets the access_info of this GetAuthMethodReplyObj.  # noqa: E501


        :return: The access_info of this GetAuthMethodReplyObj.  # noqa: E501
        :rtype: AuthMethodAccessInfo
        """
        return self._access_info

    @access_info.setter
    def access_info(self, access_info):
        """Sets the access_info of this GetAuthMethodReplyObj.


        :param access_info: The access_info of this GetAuthMethodReplyObj.  # noqa: E501
        :type: AuthMethodAccessInfo
        """

        self._access_info = access_info

    @property
    def account_id(self):
        """Gets the account_id of this GetAuthMethodReplyObj.  # noqa: E501


        :return: The account_id of this GetAuthMethodReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetAuthMethodReplyObj.


        :param account_id: The account_id of this GetAuthMethodReplyObj.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def auth_method_access_id(self):
        """Gets the auth_method_access_id of this GetAuthMethodReplyObj.  # noqa: E501


        :return: The auth_method_access_id of this GetAuthMethodReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._auth_method_access_id

    @auth_method_access_id.setter
    def auth_method_access_id(self, auth_method_access_id):
        """Sets the auth_method_access_id of this GetAuthMethodReplyObj.


        :param auth_method_access_id: The auth_method_access_id of this GetAuthMethodReplyObj.  # noqa: E501
        :type: str
        """

        self._auth_method_access_id = auth_method_access_id

    @property
    def auth_method_name(self):
        """Gets the auth_method_name of this GetAuthMethodReplyObj.  # noqa: E501


        :return: The auth_method_name of this GetAuthMethodReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._auth_method_name

    @auth_method_name.setter
    def auth_method_name(self, auth_method_name):
        """Sets the auth_method_name of this GetAuthMethodReplyObj.


        :param auth_method_name: The auth_method_name of this GetAuthMethodReplyObj.  # noqa: E501
        :type: str
        """

        self._auth_method_name = auth_method_name

    @property
    def auth_method_roles_assoc(self):
        """Gets the auth_method_roles_assoc of this GetAuthMethodReplyObj.  # noqa: E501


        :return: The auth_method_roles_assoc of this GetAuthMethodReplyObj.  # noqa: E501
        :rtype: list[AuthMethodRoleAssociation]
        """
        return self._auth_method_roles_assoc

    @auth_method_roles_assoc.setter
    def auth_method_roles_assoc(self, auth_method_roles_assoc):
        """Sets the auth_method_roles_assoc of this GetAuthMethodReplyObj.


        :param auth_method_roles_assoc: The auth_method_roles_assoc of this GetAuthMethodReplyObj.  # noqa: E501
        :type: list[AuthMethodRoleAssociation]
        """

        self._auth_method_roles_assoc = auth_method_roles_assoc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAuthMethodReplyObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAuthMethodReplyObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
