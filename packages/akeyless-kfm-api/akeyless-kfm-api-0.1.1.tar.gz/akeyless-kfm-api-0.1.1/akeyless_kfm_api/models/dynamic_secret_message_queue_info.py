# coding: utf-8

"""
    KFM - Application API

    KFM manages and stores key fragments. The core operations of each KFM instance are as follows: Creating secure random encryption keys which will be used as an encryption key fragment. Managing data storage for key fragments. Performing a key fragment derivation function, which generates a derived fragment from the original key fragment.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DynamicSecretMessageQueueInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mq_type': 'str',
        'queue_url': 'str'
    }

    attribute_map = {
        'mq_type': 'mq_type',
        'queue_url': 'queue_url'
    }

    def __init__(self, mq_type=None, queue_url=None):  # noqa: E501
        """DynamicSecretMessageQueueInfo - a model defined in Swagger"""  # noqa: E501

        self._mq_type = None
        self._queue_url = None
        self.discriminator = None

        if mq_type is not None:
            self.mq_type = mq_type
        if queue_url is not None:
            self.queue_url = queue_url

    @property
    def mq_type(self):
        """Gets the mq_type of this DynamicSecretMessageQueueInfo.  # noqa: E501


        :return: The mq_type of this DynamicSecretMessageQueueInfo.  # noqa: E501
        :rtype: str
        """
        return self._mq_type

    @mq_type.setter
    def mq_type(self, mq_type):
        """Sets the mq_type of this DynamicSecretMessageQueueInfo.


        :param mq_type: The mq_type of this DynamicSecretMessageQueueInfo.  # noqa: E501
        :type: str
        """

        self._mq_type = mq_type

    @property
    def queue_url(self):
        """Gets the queue_url of this DynamicSecretMessageQueueInfo.  # noqa: E501


        :return: The queue_url of this DynamicSecretMessageQueueInfo.  # noqa: E501
        :rtype: str
        """
        return self._queue_url

    @queue_url.setter
    def queue_url(self, queue_url):
        """Sets the queue_url of this DynamicSecretMessageQueueInfo.


        :param queue_url: The queue_url of this DynamicSecretMessageQueueInfo.  # noqa: E501
        :type: str
        """

        self._queue_url = queue_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DynamicSecretMessageQueueInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicSecretMessageQueueInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
