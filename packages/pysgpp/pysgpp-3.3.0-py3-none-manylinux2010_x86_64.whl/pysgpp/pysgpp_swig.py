# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

from . import _pysgpp_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

M_E = _pysgpp_swig.M_E
M_LOG2E = _pysgpp_swig.M_LOG2E
M_LOG10E = _pysgpp_swig.M_LOG10E
M_LN2 = _pysgpp_swig.M_LN2
M_LN10 = _pysgpp_swig.M_LN10
M_PI = _pysgpp_swig.M_PI
M_PI_2 = _pysgpp_swig.M_PI_2
M_PI_4 = _pysgpp_swig.M_PI_4
M_1_PI = _pysgpp_swig.M_1_PI
M_2_PI = _pysgpp_swig.M_2_PI
M_2_SQRTPI = _pysgpp_swig.M_2_SQRTPI
M_SQRT2 = _pysgpp_swig.M_SQRT2
M_SQRT1_2 = _pysgpp_swig.M_SQRT1_2
M_1_SQRT2PI = _pysgpp_swig.M_1_SQRT2PI
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _pysgpp_swig.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _pysgpp_swig.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _pysgpp_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _pysgpp_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pysgpp_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pysgpp_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pysgpp_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pysgpp_swig:
_pysgpp_swig.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _pysgpp_swig.SHARED_PTR_DISOWN
class unsignedIntArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _pysgpp_swig.unsignedIntArray_swiginit(self, _pysgpp_swig.new_unsignedIntArray(nelements))
    __swig_destroy__ = _pysgpp_swig.delete_unsignedIntArray

    def __getitem__(self, index: "size_t") -> "unsigned int":
        return _pysgpp_swig.unsignedIntArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "unsigned int") -> "void":
        return _pysgpp_swig.unsignedIntArray___setitem__(self, index, value)

    def cast(self) -> "unsigned int *":
        return _pysgpp_swig.unsignedIntArray_cast(self)

    @staticmethod
    def frompointer(t: "unsigned int *") -> "unsignedIntArray *":
        return _pysgpp_swig.unsignedIntArray_frompointer(t)

# Register unsignedIntArray in _pysgpp_swig:
_pysgpp_swig.unsignedIntArray_swigregister(unsignedIntArray)

def unsignedIntArray_frompointer(t: "unsigned int *") -> "unsignedIntArray *":
    return _pysgpp_swig.unsignedIntArray_frompointer(t)

class BoolArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _pysgpp_swig.BoolArray_swiginit(self, _pysgpp_swig.new_BoolArray(nelements))
    __swig_destroy__ = _pysgpp_swig.delete_BoolArray

    def __getitem__(self, index: "size_t") -> "bool":
        return _pysgpp_swig.BoolArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "bool") -> "void":
        return _pysgpp_swig.BoolArray___setitem__(self, index, value)

    def cast(self) -> "bool *":
        return _pysgpp_swig.BoolArray_cast(self)

    @staticmethod
    def frompointer(t: "bool *") -> "BoolArray *":
        return _pysgpp_swig.BoolArray_frompointer(t)

# Register BoolArray in _pysgpp_swig:
_pysgpp_swig.BoolArray_swigregister(BoolArray)

def BoolArray_frompointer(t: "bool *") -> "BoolArray *":
    return _pysgpp_swig.BoolArray_frompointer(t)

class IntArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _pysgpp_swig.IntArray_swiginit(self, _pysgpp_swig.new_IntArray(nelements))
    __swig_destroy__ = _pysgpp_swig.delete_IntArray

    def __getitem__(self, index: "size_t") -> "int":
        return _pysgpp_swig.IntArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "int") -> "void":
        return _pysgpp_swig.IntArray___setitem__(self, index, value)

    def cast(self) -> "int *":
        return _pysgpp_swig.IntArray_cast(self)

    @staticmethod
    def frompointer(t: "int *") -> "IntArray *":
        return _pysgpp_swig.IntArray_frompointer(t)

# Register IntArray in _pysgpp_swig:
_pysgpp_swig.IntArray_swigregister(IntArray)

def IntArray_frompointer(t: "int *") -> "IntArray *":
    return _pysgpp_swig.IntArray_frompointer(t)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _pysgpp_swig.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _pysgpp_swig.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _pysgpp_swig.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _pysgpp_swig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _pysgpp_swig.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pysgpp_swig.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _pysgpp_swig.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _pysgpp_swig.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _pysgpp_swig.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _pysgpp_swig.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _pysgpp_swig.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _pysgpp_swig.IntVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _pysgpp_swig.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _pysgpp_swig.IntVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.IntVector_swiginit(self, _pysgpp_swig.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pysgpp_swig.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _pysgpp_swig.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _pysgpp_swig.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _pysgpp_swig.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _pysgpp_swig.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _pysgpp_swig.IntVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_IntVector

# Register IntVector in _pysgpp_swig:
_pysgpp_swig.IntVector_swigregister(IntVector)

class IntVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.IntVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.IntVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _pysgpp_swig.IntVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _pysgpp_swig.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _pysgpp_swig.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _pysgpp_swig.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.IntVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _pysgpp_swig.IntVectorVector_pop(self)

    def append(self, x: "IntVector") -> "void":
        return _pysgpp_swig.IntVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.IntVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _pysgpp_swig.IntVectorVector_size(self)

    def swap(self, v: "IntVectorVector") -> "void":
        return _pysgpp_swig.IntVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _pysgpp_swig.IntVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _pysgpp_swig.IntVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _pysgpp_swig.IntVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _pysgpp_swig.IntVectorVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.IntVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _pysgpp_swig.IntVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.IntVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _pysgpp_swig.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.IntVectorVector_swiginit(self, _pysgpp_swig.new_IntVectorVector(*args))

    def push_back(self, x: "IntVector") -> "void":
        return _pysgpp_swig.IntVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _pysgpp_swig.IntVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _pysgpp_swig.IntVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "IntVector") -> "void":
        return _pysgpp_swig.IntVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.IntVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.IntVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _pysgpp_swig.IntVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _pysgpp_swig.IntVectorVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_IntVectorVector

# Register IntVectorVector in _pysgpp_swig:
_pysgpp_swig.IntVectorVector_swigregister(IntVectorVector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _pysgpp_swig.BoolVector___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _pysgpp_swig.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _pysgpp_swig.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _pysgpp_swig.BoolVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _pysgpp_swig.BoolVector_size(self)

    def swap(self, v: "BoolVector") -> "void":
        return _pysgpp_swig.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _pysgpp_swig.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _pysgpp_swig.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _pysgpp_swig.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _pysgpp_swig.BoolVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _pysgpp_swig.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _pysgpp_swig.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.BoolVector_swiginit(self, _pysgpp_swig.new_BoolVector(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _pysgpp_swig.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _pysgpp_swig.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.BoolVector_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _pysgpp_swig.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _pysgpp_swig.BoolVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_BoolVector

# Register BoolVector in _pysgpp_swig:
_pysgpp_swig.BoolVector_swigregister(BoolVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _pysgpp_swig.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _pysgpp_swig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _pysgpp_swig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _pysgpp_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _pysgpp_swig.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _pysgpp_swig.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _pysgpp_swig.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _pysgpp_swig.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _pysgpp_swig.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _pysgpp_swig.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _pysgpp_swig.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _pysgpp_swig.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _pysgpp_swig.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _pysgpp_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.DoubleVector_swiginit(self, _pysgpp_swig.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _pysgpp_swig.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _pysgpp_swig.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _pysgpp_swig.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _pysgpp_swig.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _pysgpp_swig.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _pysgpp_swig.DoubleVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_DoubleVector

# Register DoubleVector in _pysgpp_swig:
_pysgpp_swig.DoubleVector_swigregister(DoubleVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.FloatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.FloatVector___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _pysgpp_swig.FloatVector___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _pysgpp_swig.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.FloatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _pysgpp_swig.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _pysgpp_swig.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.FloatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _pysgpp_swig.FloatVector_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _pysgpp_swig.FloatVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.FloatVector_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _pysgpp_swig.FloatVector_size(self)

    def swap(self, v: "FloatVector") -> "void":
        return _pysgpp_swig.FloatVector_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _pysgpp_swig.FloatVector_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _pysgpp_swig.FloatVector_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _pysgpp_swig.FloatVector_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _pysgpp_swig.FloatVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.FloatVector_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _pysgpp_swig.FloatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.FloatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _pysgpp_swig.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.FloatVector_swiginit(self, _pysgpp_swig.new_FloatVector(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _pysgpp_swig.FloatVector_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _pysgpp_swig.FloatVector_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _pysgpp_swig.FloatVector_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _pysgpp_swig.FloatVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.FloatVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.FloatVector_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _pysgpp_swig.FloatVector_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _pysgpp_swig.FloatVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_FloatVector

# Register FloatVector in _pysgpp_swig:
_pysgpp_swig.FloatVector_swigregister(FloatVector)

class SizeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SizeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.SizeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.SizeVector___bool__(self)

    def __len__(self) -> "std::vector< size_t >::size_type":
        return _pysgpp_swig.SizeVector___len__(self)

    def __getslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "std::vector< size_t,std::allocator< size_t > > *":
        return _pysgpp_swig.SizeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.SizeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "void":
        return _pysgpp_swig.SizeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< size_t >::value_type const &":
        return _pysgpp_swig.SizeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< size_t >::value_type":
        return _pysgpp_swig.SizeVector_pop(self)

    def append(self, x: "std::vector< size_t >::value_type const &") -> "void":
        return _pysgpp_swig.SizeVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.SizeVector_empty(self)

    def size(self) -> "std::vector< size_t >::size_type":
        return _pysgpp_swig.SizeVector_size(self)

    def swap(self, v: "SizeVector") -> "void":
        return _pysgpp_swig.SizeVector_swap(self, v)

    def begin(self) -> "std::vector< size_t >::iterator":
        return _pysgpp_swig.SizeVector_begin(self)

    def end(self) -> "std::vector< size_t >::iterator":
        return _pysgpp_swig.SizeVector_end(self)

    def rbegin(self) -> "std::vector< size_t >::reverse_iterator":
        return _pysgpp_swig.SizeVector_rbegin(self)

    def rend(self) -> "std::vector< size_t >::reverse_iterator":
        return _pysgpp_swig.SizeVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.SizeVector_clear(self)

    def get_allocator(self) -> "std::vector< size_t >::allocator_type":
        return _pysgpp_swig.SizeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.SizeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< size_t >::iterator":
        return _pysgpp_swig.SizeVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.SizeVector_swiginit(self, _pysgpp_swig.new_SizeVector(*args))

    def push_back(self, x: "std::vector< size_t >::value_type const &") -> "void":
        return _pysgpp_swig.SizeVector_push_back(self, x)

    def front(self) -> "std::vector< size_t >::value_type const &":
        return _pysgpp_swig.SizeVector_front(self)

    def back(self) -> "std::vector< size_t >::value_type const &":
        return _pysgpp_swig.SizeVector_back(self)

    def assign(self, n: "std::vector< size_t >::size_type", x: "std::vector< size_t >::value_type const &") -> "void":
        return _pysgpp_swig.SizeVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.SizeVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.SizeVector_insert(self, *args)

    def reserve(self, n: "std::vector< size_t >::size_type") -> "void":
        return _pysgpp_swig.SizeVector_reserve(self, n)

    def capacity(self) -> "std::vector< size_t >::size_type":
        return _pysgpp_swig.SizeVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_SizeVector

# Register SizeVector in _pysgpp_swig:
_pysgpp_swig.SizeVector_swigregister(SizeVector)

class SizeDoublePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SizeDoublePair_swiginit(self, _pysgpp_swig.new_SizeDoublePair(*args))
    first = property(_pysgpp_swig.SizeDoublePair_first_get, _pysgpp_swig.SizeDoublePair_first_set)
    second = property(_pysgpp_swig.SizeDoublePair_second_get, _pysgpp_swig.SizeDoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pysgpp_swig.delete_SizeDoublePair

# Register SizeDoublePair in _pysgpp_swig:
_pysgpp_swig.SizeDoublePair_swigregister(SizeDoublePair)

class SizeDoublePairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SizeDoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.SizeDoublePairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.SizeDoublePairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< size_t,double > >::size_type":
        return _pysgpp_swig.SizeDoublePairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< size_t,double > >::difference_type", j: "std::vector< std::pair< size_t,double > >::difference_type") -> "std::vector< std::pair< size_t,double >,std::allocator< std::pair< size_t,double > > > *":
        return _pysgpp_swig.SizeDoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.SizeDoublePairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< size_t,double > >::difference_type", j: "std::vector< std::pair< size_t,double > >::difference_type") -> "void":
        return _pysgpp_swig.SizeDoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeDoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< size_t,double > >::value_type const &":
        return _pysgpp_swig.SizeDoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeDoublePairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< size_t,double > >::value_type":
        return _pysgpp_swig.SizeDoublePairVector_pop(self)

    def append(self, x: "SizeDoublePair") -> "void":
        return _pysgpp_swig.SizeDoublePairVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.SizeDoublePairVector_empty(self)

    def size(self) -> "std::vector< std::pair< size_t,double > >::size_type":
        return _pysgpp_swig.SizeDoublePairVector_size(self)

    def swap(self, v: "SizeDoublePairVector") -> "void":
        return _pysgpp_swig.SizeDoublePairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< size_t,double > >::iterator":
        return _pysgpp_swig.SizeDoublePairVector_begin(self)

    def end(self) -> "std::vector< std::pair< size_t,double > >::iterator":
        return _pysgpp_swig.SizeDoublePairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< size_t,double > >::reverse_iterator":
        return _pysgpp_swig.SizeDoublePairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< size_t,double > >::reverse_iterator":
        return _pysgpp_swig.SizeDoublePairVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.SizeDoublePairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< size_t,double > >::allocator_type":
        return _pysgpp_swig.SizeDoublePairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.SizeDoublePairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< size_t,double > >::iterator":
        return _pysgpp_swig.SizeDoublePairVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.SizeDoublePairVector_swiginit(self, _pysgpp_swig.new_SizeDoublePairVector(*args))

    def push_back(self, x: "SizeDoublePair") -> "void":
        return _pysgpp_swig.SizeDoublePairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< size_t,double > >::value_type const &":
        return _pysgpp_swig.SizeDoublePairVector_front(self)

    def back(self) -> "std::vector< std::pair< size_t,double > >::value_type const &":
        return _pysgpp_swig.SizeDoublePairVector_back(self)

    def assign(self, n: "std::vector< std::pair< size_t,double > >::size_type", x: "SizeDoublePair") -> "void":
        return _pysgpp_swig.SizeDoublePairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.SizeDoublePairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.SizeDoublePairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< size_t,double > >::size_type") -> "void":
        return _pysgpp_swig.SizeDoublePairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< size_t,double > >::size_type":
        return _pysgpp_swig.SizeDoublePairVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_SizeDoublePairVector

# Register SizeDoublePairVector in _pysgpp_swig:
_pysgpp_swig.SizeDoublePairVector_swigregister(SizeDoublePairVector)

class SizeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SizeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.SizeList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.SizeList___bool__(self)

    def __len__(self) -> "std::list< size_t >::size_type":
        return _pysgpp_swig.SizeList___len__(self)

    def __getslice__(self, i: "std::list< size_t >::difference_type", j: "std::list< size_t >::difference_type") -> "std::list< size_t,std::allocator< size_t > > *":
        return _pysgpp_swig.SizeList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.SizeList___setslice__(self, *args)

    def __delslice__(self, i: "std::list< size_t >::difference_type", j: "std::list< size_t >::difference_type") -> "void":
        return _pysgpp_swig.SizeList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::list< size_t >::value_type const &":
        return _pysgpp_swig.SizeList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeList___setitem__(self, *args)

    def pop(self) -> "std::list< size_t >::value_type":
        return _pysgpp_swig.SizeList_pop(self)

    def append(self, x: "std::list< size_t >::value_type const &") -> "void":
        return _pysgpp_swig.SizeList_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.SizeList_empty(self)

    def size(self) -> "std::list< size_t >::size_type":
        return _pysgpp_swig.SizeList_size(self)

    def swap(self, v: "SizeList") -> "void":
        return _pysgpp_swig.SizeList_swap(self, v)

    def begin(self) -> "std::list< size_t >::iterator":
        return _pysgpp_swig.SizeList_begin(self)

    def end(self) -> "std::list< size_t >::iterator":
        return _pysgpp_swig.SizeList_end(self)

    def rbegin(self) -> "std::list< size_t >::reverse_iterator":
        return _pysgpp_swig.SizeList_rbegin(self)

    def rend(self) -> "std::list< size_t >::reverse_iterator":
        return _pysgpp_swig.SizeList_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.SizeList_clear(self)

    def get_allocator(self) -> "std::list< size_t >::allocator_type":
        return _pysgpp_swig.SizeList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.SizeList_pop_back(self)

    def erase(self, *args) -> "std::list< size_t >::iterator":
        return _pysgpp_swig.SizeList_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.SizeList_swiginit(self, _pysgpp_swig.new_SizeList(*args))

    def push_back(self, x: "std::list< size_t >::value_type const &") -> "void":
        return _pysgpp_swig.SizeList_push_back(self, x)

    def front(self) -> "std::list< size_t >::value_type const &":
        return _pysgpp_swig.SizeList_front(self)

    def back(self) -> "std::list< size_t >::value_type const &":
        return _pysgpp_swig.SizeList_back(self)

    def assign(self, n: "std::list< size_t >::size_type", x: "std::list< size_t >::value_type const &") -> "void":
        return _pysgpp_swig.SizeList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.SizeList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.SizeList_insert(self, *args)

    def pop_front(self) -> "void":
        return _pysgpp_swig.SizeList_pop_front(self)

    def push_front(self, x: "std::list< size_t >::value_type const &") -> "void":
        return _pysgpp_swig.SizeList_push_front(self, x)

    def reverse(self) -> "void":
        return _pysgpp_swig.SizeList_reverse(self)
    __swig_destroy__ = _pysgpp_swig.delete_SizeList

# Register SizeList in _pysgpp_swig:
_pysgpp_swig.SizeList_swigregister(SizeList)

class refinement_key(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.refinement_key_swiginit(self, _pysgpp_swig.new_refinement_key(*args))
    first = property(_pysgpp_swig.refinement_key_first_get, _pysgpp_swig.refinement_key_first_set)
    second = property(_pysgpp_swig.refinement_key_second_get, _pysgpp_swig.refinement_key_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pysgpp_swig.delete_refinement_key

# Register refinement_key in _pysgpp_swig:
_pysgpp_swig.refinement_key_swigregister(refinement_key)

class refinement_map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.refinement_map_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.refinement_map___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.refinement_map___bool__(self)

    def __len__(self) -> "std::map< std::pair< size_t,unsigned int >,double >::size_type":
        return _pysgpp_swig.refinement_map___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "refinement_key") -> "std::map< std::pair< size_t,unsigned int >,double >::mapped_type const &":
        return _pysgpp_swig.refinement_map___getitem__(self, key)

    def __delitem__(self, key: "refinement_key") -> "void":
        return _pysgpp_swig.refinement_map___delitem__(self, key)

    def has_key(self, key: "refinement_key") -> "bool":
        return _pysgpp_swig.refinement_map_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_keys(self)

    def values(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_values(self)

    def items(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_items(self)

    def __contains__(self, key: "refinement_key") -> "bool":
        return _pysgpp_swig.refinement_map___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.refinement_map_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.refinement_map_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.refinement_map___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_asdict(self)

    def __init__(self, *args):
        _pysgpp_swig.refinement_map_swiginit(self, _pysgpp_swig.new_refinement_map(*args))

    def empty(self) -> "bool":
        return _pysgpp_swig.refinement_map_empty(self)

    def size(self) -> "std::map< std::pair< size_t,unsigned int >,double >::size_type":
        return _pysgpp_swig.refinement_map_size(self)

    def swap(self, v: "refinement_map") -> "void":
        return _pysgpp_swig.refinement_map_swap(self, v)

    def begin(self) -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_begin(self)

    def end(self) -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_end(self)

    def rbegin(self) -> "std::map< std::pair< size_t,unsigned int >,double >::reverse_iterator":
        return _pysgpp_swig.refinement_map_rbegin(self)

    def rend(self) -> "std::map< std::pair< size_t,unsigned int >,double >::reverse_iterator":
        return _pysgpp_swig.refinement_map_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.refinement_map_clear(self)

    def get_allocator(self) -> "std::map< std::pair< size_t,unsigned int >,double >::allocator_type":
        return _pysgpp_swig.refinement_map_get_allocator(self)

    def count(self, x: "refinement_key") -> "std::map< std::pair< size_t,unsigned int >,double >::size_type":
        return _pysgpp_swig.refinement_map_count(self, x)

    def erase(self, *args) -> "void":
        return _pysgpp_swig.refinement_map_erase(self, *args)

    def find(self, x: "refinement_key") -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_find(self, x)

    def lower_bound(self, x: "refinement_key") -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_lower_bound(self, x)

    def upper_bound(self, x: "refinement_key") -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_upper_bound(self, x)
    __swig_destroy__ = _pysgpp_swig.delete_refinement_map

# Register refinement_map in _pysgpp_swig:
_pysgpp_swig.refinement_map_swigregister(refinement_map)

class SizeVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SizeVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.SizeVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.SizeVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< size_t > >::size_type":
        return _pysgpp_swig.SizeVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< size_t > >::difference_type", j: "std::vector< std::vector< size_t > >::difference_type") -> "std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > *":
        return _pysgpp_swig.SizeVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.SizeVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< size_t > >::difference_type", j: "std::vector< std::vector< size_t > >::difference_type") -> "void":
        return _pysgpp_swig.SizeVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< size_t > >::value_type const &":
        return _pysgpp_swig.SizeVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.SizeVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< size_t > >::value_type":
        return _pysgpp_swig.SizeVectorVector_pop(self)

    def append(self, x: "SizeVector") -> "void":
        return _pysgpp_swig.SizeVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.SizeVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< size_t > >::size_type":
        return _pysgpp_swig.SizeVectorVector_size(self)

    def swap(self, v: "SizeVectorVector") -> "void":
        return _pysgpp_swig.SizeVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< size_t > >::iterator":
        return _pysgpp_swig.SizeVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< size_t > >::iterator":
        return _pysgpp_swig.SizeVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< size_t > >::reverse_iterator":
        return _pysgpp_swig.SizeVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< size_t > >::reverse_iterator":
        return _pysgpp_swig.SizeVectorVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.SizeVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< size_t > >::allocator_type":
        return _pysgpp_swig.SizeVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.SizeVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< size_t > >::iterator":
        return _pysgpp_swig.SizeVectorVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.SizeVectorVector_swiginit(self, _pysgpp_swig.new_SizeVectorVector(*args))

    def push_back(self, x: "SizeVector") -> "void":
        return _pysgpp_swig.SizeVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< size_t > >::value_type const &":
        return _pysgpp_swig.SizeVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< size_t > >::value_type const &":
        return _pysgpp_swig.SizeVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< size_t > >::size_type", x: "SizeVector") -> "void":
        return _pysgpp_swig.SizeVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.SizeVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.SizeVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< size_t > >::size_type") -> "void":
        return _pysgpp_swig.SizeVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< size_t > >::size_type":
        return _pysgpp_swig.SizeVectorVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_SizeVectorVector

# Register SizeVectorVector in _pysgpp_swig:
_pysgpp_swig.SizeVectorVector_swigregister(SizeVectorVector)

class DataVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.DataVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.DataVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.DataVectorVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::DataVector >::size_type":
        return _pysgpp_swig.DataVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::base::DataVector >::difference_type", j: "std::vector< sgpp::base::DataVector >::difference_type") -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > *":
        return _pysgpp_swig.DataVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::base::DataVector >::difference_type", j: "std::vector< sgpp::base::DataVector >::difference_type") -> "void":
        return _pysgpp_swig.DataVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::DataVector >::value_type const &":
        return _pysgpp_swig.DataVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::DataVector >::value_type":
        return _pysgpp_swig.DataVectorVector_pop(self)

    def append(self, x: "DataVector") -> "void":
        return _pysgpp_swig.DataVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.DataVectorVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::DataVector >::size_type":
        return _pysgpp_swig.DataVectorVector_size(self)

    def swap(self, v: "DataVectorVector") -> "void":
        return _pysgpp_swig.DataVectorVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::DataVector >::iterator":
        return _pysgpp_swig.DataVectorVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::DataVector >::iterator":
        return _pysgpp_swig.DataVectorVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::DataVector >::reverse_iterator":
        return _pysgpp_swig.DataVectorVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::DataVector >::reverse_iterator":
        return _pysgpp_swig.DataVectorVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.DataVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::DataVector >::allocator_type":
        return _pysgpp_swig.DataVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.DataVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::DataVector >::iterator":
        return _pysgpp_swig.DataVectorVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.DataVectorVector_swiginit(self, _pysgpp_swig.new_DataVectorVector(*args))

    def push_back(self, x: "DataVector") -> "void":
        return _pysgpp_swig.DataVectorVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::DataVector >::value_type const &":
        return _pysgpp_swig.DataVectorVector_front(self)

    def back(self) -> "std::vector< sgpp::base::DataVector >::value_type const &":
        return _pysgpp_swig.DataVectorVector_back(self)

    def assign(self, n: "std::vector< sgpp::base::DataVector >::size_type", x: "DataVector") -> "void":
        return _pysgpp_swig.DataVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::base::DataVector >::size_type") -> "void":
        return _pysgpp_swig.DataVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::DataVector >::size_type":
        return _pysgpp_swig.DataVectorVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_DataVectorVector

# Register DataVectorVector in _pysgpp_swig:
_pysgpp_swig.DataVectorVector_swigregister(DataVectorVector)

class DataMatrixVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.DataMatrixVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.DataMatrixVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.DataMatrixVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::DataMatrix >::size_type":
        return _pysgpp_swig.DataMatrixVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::base::DataMatrix >::difference_type", j: "std::vector< sgpp::base::DataMatrix >::difference_type") -> "std::vector< sgpp::base::DataMatrix,std::allocator< sgpp::base::DataMatrix > > *":
        return _pysgpp_swig.DataMatrixVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::base::DataMatrix >::difference_type", j: "std::vector< sgpp::base::DataMatrix >::difference_type") -> "void":
        return _pysgpp_swig.DataMatrixVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::DataMatrix >::value_type const &":
        return _pysgpp_swig.DataMatrixVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::DataMatrix >::value_type":
        return _pysgpp_swig.DataMatrixVector_pop(self)

    def append(self, x: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrixVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.DataMatrixVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::DataMatrix >::size_type":
        return _pysgpp_swig.DataMatrixVector_size(self)

    def swap(self, v: "DataMatrixVector") -> "void":
        return _pysgpp_swig.DataMatrixVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::DataMatrix >::iterator":
        return _pysgpp_swig.DataMatrixVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::DataMatrix >::iterator":
        return _pysgpp_swig.DataMatrixVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::DataMatrix >::reverse_iterator":
        return _pysgpp_swig.DataMatrixVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::DataMatrix >::reverse_iterator":
        return _pysgpp_swig.DataMatrixVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.DataMatrixVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::DataMatrix >::allocator_type":
        return _pysgpp_swig.DataMatrixVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.DataMatrixVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::DataMatrix >::iterator":
        return _pysgpp_swig.DataMatrixVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.DataMatrixVector_swiginit(self, _pysgpp_swig.new_DataMatrixVector(*args))

    def push_back(self, x: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrixVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::DataMatrix >::value_type const &":
        return _pysgpp_swig.DataMatrixVector_front(self)

    def back(self) -> "std::vector< sgpp::base::DataMatrix >::value_type const &":
        return _pysgpp_swig.DataMatrixVector_back(self)

    def assign(self, n: "std::vector< sgpp::base::DataMatrix >::size_type", x: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrixVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::base::DataMatrix >::size_type") -> "void":
        return _pysgpp_swig.DataMatrixVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::DataMatrix >::size_type":
        return _pysgpp_swig.DataMatrixVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_DataMatrixVector

# Register DataMatrixVector in _pysgpp_swig:
_pysgpp_swig.DataMatrixVector_swigregister(DataMatrixVector)

class SBasis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def eval(self, level: "unsigned int", index: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBasis_eval(self, level, index, x)

    def getDegree(self) -> "size_t":
        return _pysgpp_swig.SBasis_getDegree(self)

    def getIntegral(self, level: "unsigned int", index: "unsigned int") -> "double":
        return _pysgpp_swig.SBasis_getIntegral(self, level, index)
    __swig_destroy__ = _pysgpp_swig.delete_SBasis

# Register SBasis in _pysgpp_swig:
_pysgpp_swig.SBasis_swigregister(SBasis)


def free_array(ptr: "PyObject *") -> "void":
    return _pysgpp_swig.free_array(ptr)
class DataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DataVector_swiginit(self, _pysgpp_swig.new_DataVector(*args))

    def resize(self, size: "size_t") -> "void":
        return _pysgpp_swig.DataVector_resize(self, size)

    def resizeZero(self, size: "size_t") -> "void":
        return _pysgpp_swig.DataVector_resizeZero(self, size)

    def append(self, *args) -> "size_t":
        return _pysgpp_swig.DataVector_append(self, *args)

    def restructure(self, arg2: "SizeVector") -> "void":
        return _pysgpp_swig.DataVector_restructure(self, arg2)

    def setAll(self, value: "double") -> "void":
        return _pysgpp_swig.DataVector_setAll(self, value)

    def copyFrom(self, vec: "DataVector") -> "void":
        return _pysgpp_swig.DataVector_copyFrom(self, vec)

    def assign(self, vec: "DataVector") -> "sgpp::base::DataVector &":
        return _pysgpp_swig.DataVector_assign(self, vec)

    def get(self, i: "size_t") -> "double":
        return _pysgpp_swig.DataVector_get(self, i)

    def set(self, i: "size_t", value: "double") -> "void":
        return _pysgpp_swig.DataVector_set(self, i, value)

    def add(self, vec: "DataVector") -> "void":
        return _pysgpp_swig.DataVector_add(self, vec)

    def sub(self, vec: "DataVector") -> "void":
        return _pysgpp_swig.DataVector_sub(self, vec)

    def componentwise_mult(self, vec: "DataVector") -> "void":
        return _pysgpp_swig.DataVector_componentwise_mult(self, vec)

    def componentwise_div(self, vec: "DataVector") -> "void":
        return _pysgpp_swig.DataVector_componentwise_div(self, vec)

    def mult(self, scalar: "double") -> "void":
        return _pysgpp_swig.DataVector_mult(self, scalar)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataVector_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataVector_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataVector_abs(self)

    def sum(self) -> "double":
        return _pysgpp_swig.DataVector_sum(self)

    def min(self) -> "double":
        return _pysgpp_swig.DataVector_min(self)

    def max(self) -> "double":
        return _pysgpp_swig.DataVector_max(self)

    def minmax(self) -> "void":
        return _pysgpp_swig.DataVector_minmax(self)

    def maxNorm(self) -> "double":
        return _pysgpp_swig.DataVector_maxNorm(self)

    def RMSNorm(self) -> "double":
        return _pysgpp_swig.DataVector_RMSNorm(self)

    def l2Norm(self) -> "double":
        return _pysgpp_swig.DataVector_l2Norm(self)

    def dotProduct(self, vec: "DataVector") -> "double":
        return _pysgpp_swig.DataVector_dotProduct(self, vec)

    def axpy(self, alpha: "double", x: "DataVector") -> "void":
        return _pysgpp_swig.DataVector_axpy(self, alpha, x)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataVector_getSize(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataVector_getNumberNonZero(self)

    def partitionClasses(self, border: "double") -> "void":
        return _pysgpp_swig.DataVector_partitionClasses(self, border)

    def normalize(self, *args) -> "void":
        return _pysgpp_swig.DataVector_normalize(self, *args)

    def toString(self) -> "std::string":
        return _pysgpp_swig.DataVector_toString(self)

    def toFile(self, fileName: "std::string const &") -> "void":
        return _pysgpp_swig.DataVector_toFile(self, fileName)

    @staticmethod
    def fromFile(fileName: "std::string const &") -> "sgpp::base::DataVector":
        return _pysgpp_swig.DataVector_fromFile(fileName)

    def __array(self, datavector: "PyObject *") -> "PyObject *":
        return _pysgpp_swig.DataVector___array(self, datavector)

    def array(self):   
      return self.__array(self)

    def __len__(self):
        return self.getSize()

    def __getitem__(self, i):
        return self.get(i)

    def __setitem__(self, i, value):
        self.set(i, value)

    def __str__(self):
        return self.toString()

    __swig_destroy__ = _pysgpp_swig.delete_DataVector

# Register DataVector in _pysgpp_swig:
_pysgpp_swig.DataVector_swigregister(DataVector)

def DataVector_fromFile(fileName: "std::string const &") -> "sgpp::base::DataVector":
    return _pysgpp_swig.DataVector_fromFile(fileName)

class DataMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DataMatrix_swiginit(self, _pysgpp_swig.new_DataMatrix(*args))

    def resizeRows(self, nrows: "size_t") -> "void":
        return _pysgpp_swig.DataMatrix_resizeRows(self, nrows)

    def resizeRowsCols(self, nrows: "size_t", ncols: "size_t") -> "void":
        return _pysgpp_swig.DataMatrix_resizeRowsCols(self, nrows, ncols)

    def resizeQuadratic(self, size: "size_t") -> "void":
        return _pysgpp_swig.DataMatrix_resizeQuadratic(self, size)

    def resizeZero(self, nrows: "size_t", ncols: "size_t") -> "void":
        return _pysgpp_swig.DataMatrix_resizeZero(self, nrows, ncols)

    def resizeToSubMatrix(self, row_1: "size_t", col_1: "size_t", row_2: "size_t", col_2: "size_t") -> "void":
        return _pysgpp_swig.DataMatrix_resizeToSubMatrix(self, row_1, col_1, row_2, col_2)

    def reserveAdditionalRows(self, inc_nrows: "size_t") -> "void":
        return _pysgpp_swig.DataMatrix_reserveAdditionalRows(self, inc_nrows)

    def appendRow(self, *args) -> "size_t":
        return _pysgpp_swig.DataMatrix_appendRow(self, *args)

    def appendCol(self, vec: "DataVector") -> "size_t":
        return _pysgpp_swig.DataMatrix_appendCol(self, vec)

    def setAll(self, value: "double") -> "void":
        return _pysgpp_swig.DataMatrix_setAll(self, value)

    def copyFrom(self, matr: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrix_copyFrom(self, matr)

    def transpose(self) -> "void":
        return _pysgpp_swig.DataMatrix_transpose(self)

    def get(self, row: "size_t", col: "size_t") -> "double":
        return _pysgpp_swig.DataMatrix_get(self, row, col)

    def set(self, row: "size_t", col: "size_t", value: "double") -> "void":
        return _pysgpp_swig.DataMatrix_set(self, row, col, value)

    def getRow(self, row: "size_t", vec: "DataVector") -> "void":
        return _pysgpp_swig.DataMatrix_getRow(self, row, vec)

    def setRow(self, row: "size_t", vec: "DataVector") -> "void":
        return _pysgpp_swig.DataMatrix_setRow(self, row, vec)

    def getColumn(self, col: "size_t", vec: "DataVector") -> "void":
        return _pysgpp_swig.DataMatrix_getColumn(self, col, vec)

    def setColumn(self, col: "size_t", vec: "DataVector") -> "void":
        return _pysgpp_swig.DataMatrix_setColumn(self, col, vec)

    def getPointer(self) -> "double *":
        return _pysgpp_swig.DataMatrix_getPointer(self)

    def add(self, matr: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrix_add(self, matr)

    def sub(self, matr: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrix_sub(self, matr)

    def componentwise_mult(self, matr: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrix_componentwise_mult(self, matr)

    def componentwise_div(self, matr: "DataMatrix") -> "void":
        return _pysgpp_swig.DataMatrix_componentwise_div(self, matr)

    def mult(self, scalar: "double") -> "void":
        return _pysgpp_swig.DataMatrix_mult(self, scalar)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataMatrix_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataMatrix_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataMatrix_abs(self)

    def sum(self) -> "double":
        return _pysgpp_swig.DataMatrix_sum(self)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getSize(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getNumberNonZero(self)

    def getNrows(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getNrows(self)

    def getNcols(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getNcols(self)

    def normalizeDimension(self, *args) -> "void":
        return _pysgpp_swig.DataMatrix_normalizeDimension(self, *args)

    def min(self, *args) -> "double":
        return _pysgpp_swig.DataMatrix_min(self, *args)

    def max(self, *args) -> "double":
        return _pysgpp_swig.DataMatrix_max(self, *args)

    def minmax(self, *args) -> "void":
        return _pysgpp_swig.DataMatrix_minmax(self, *args)

    def __str__(self) -> "std::string":
        return _pysgpp_swig.DataMatrix___str__(self)

    def toFile(self, fileName: "std::string const &") -> "void":
        return _pysgpp_swig.DataMatrix_toFile(self, fileName)

    @staticmethod
    def fromFile(fileName: "std::string const &") -> "sgpp::base::DataMatrix":
        return _pysgpp_swig.DataMatrix_fromFile(fileName)

    def __array(self, datavector: "PyObject *") -> "PyObject *":
        return _pysgpp_swig.DataMatrix___array(self, datavector)

    def array(self):
      return self.__array(self)

    __swig_destroy__ = _pysgpp_swig.delete_DataMatrix

# Register DataMatrix in _pysgpp_swig:
_pysgpp_swig.DataMatrix_swigregister(DataMatrix)

def DataMatrix_fromFile(fileName: "std::string const &") -> "sgpp::base::DataMatrix":
    return _pysgpp_swig.DataMatrix_fromFile(fileName)

class RegularGridConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_ = property(_pysgpp_swig.RegularGridConfiguration_type__get, _pysgpp_swig.RegularGridConfiguration_type__set)
    dim_ = property(_pysgpp_swig.RegularGridConfiguration_dim__get, _pysgpp_swig.RegularGridConfiguration_dim__set)
    level_ = property(_pysgpp_swig.RegularGridConfiguration_level__get, _pysgpp_swig.RegularGridConfiguration_level__set)
    maxDegree_ = property(_pysgpp_swig.RegularGridConfiguration_maxDegree__get, _pysgpp_swig.RegularGridConfiguration_maxDegree__set)
    boundaryLevel_ = property(_pysgpp_swig.RegularGridConfiguration_boundaryLevel__get, _pysgpp_swig.RegularGridConfiguration_boundaryLevel__set)
    filename_ = property(_pysgpp_swig.RegularGridConfiguration_filename__get, _pysgpp_swig.RegularGridConfiguration_filename__set)

    def __init__(self):
        _pysgpp_swig.RegularGridConfiguration_swiginit(self, _pysgpp_swig.new_RegularGridConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_RegularGridConfiguration

# Register RegularGridConfiguration in _pysgpp_swig:
_pysgpp_swig.RegularGridConfiguration_swigregister(RegularGridConfiguration)

class AdaptivityConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numRefinements_ = property(_pysgpp_swig.AdaptivityConfiguration_numRefinements__get, _pysgpp_swig.AdaptivityConfiguration_numRefinements__set)
    refinementThreshold_ = property(_pysgpp_swig.AdaptivityConfiguration_refinementThreshold__get, _pysgpp_swig.AdaptivityConfiguration_refinementThreshold__set)
    coarseningThreshold_ = property(_pysgpp_swig.AdaptivityConfiguration_coarseningThreshold__get, _pysgpp_swig.AdaptivityConfiguration_coarseningThreshold__set)
    maxLevelType_ = property(_pysgpp_swig.AdaptivityConfiguration_maxLevelType__get, _pysgpp_swig.AdaptivityConfiguration_maxLevelType__set)
    numRefinementPoints_ = property(_pysgpp_swig.AdaptivityConfiguration_numRefinementPoints__get, _pysgpp_swig.AdaptivityConfiguration_numRefinementPoints__set)
    numCoarseningPoints_ = property(_pysgpp_swig.AdaptivityConfiguration_numCoarseningPoints__get, _pysgpp_swig.AdaptivityConfiguration_numCoarseningPoints__set)
    percent_ = property(_pysgpp_swig.AdaptivityConfiguration_percent__get, _pysgpp_swig.AdaptivityConfiguration_percent__set)
    errorBasedRefinement = property(_pysgpp_swig.AdaptivityConfiguration_errorBasedRefinement_get, _pysgpp_swig.AdaptivityConfiguration_errorBasedRefinement_set)
    coarsenInitialPoints_ = property(_pysgpp_swig.AdaptivityConfiguration_coarsenInitialPoints__get, _pysgpp_swig.AdaptivityConfiguration_coarsenInitialPoints__set)

    def __init__(self):
        _pysgpp_swig.AdaptivityConfiguration_swiginit(self, _pysgpp_swig.new_AdaptivityConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_AdaptivityConfiguration

# Register AdaptivityConfiguration in _pysgpp_swig:
_pysgpp_swig.AdaptivityConfiguration_swigregister(AdaptivityConfiguration)

GridType_Linear = _pysgpp_swig.GridType_Linear
GridType_LinearStretched = _pysgpp_swig.GridType_LinearStretched
GridType_LinearL0Boundary = _pysgpp_swig.GridType_LinearL0Boundary
GridType_LinearBoundary = _pysgpp_swig.GridType_LinearBoundary
GridType_LinearStretchedBoundary = _pysgpp_swig.GridType_LinearStretchedBoundary
GridType_LinearTruncatedBoundary = _pysgpp_swig.GridType_LinearTruncatedBoundary
GridType_ModLinear = _pysgpp_swig.GridType_ModLinear
GridType_Poly = _pysgpp_swig.GridType_Poly
GridType_PolyBoundary = _pysgpp_swig.GridType_PolyBoundary
GridType_ModPoly = _pysgpp_swig.GridType_ModPoly
GridType_ModWavelet = _pysgpp_swig.GridType_ModWavelet
GridType_ModBspline = _pysgpp_swig.GridType_ModBspline
GridType_Prewavelet = _pysgpp_swig.GridType_Prewavelet
GridType_SquareRoot = _pysgpp_swig.GridType_SquareRoot
GridType_Periodic = _pysgpp_swig.GridType_Periodic
GridType_LinearClenshawCurtisBoundary = _pysgpp_swig.GridType_LinearClenshawCurtisBoundary
GridType_Bspline = _pysgpp_swig.GridType_Bspline
GridType_BsplineBoundary = _pysgpp_swig.GridType_BsplineBoundary
GridType_BsplineClenshawCurtis = _pysgpp_swig.GridType_BsplineClenshawCurtis
GridType_Wavelet = _pysgpp_swig.GridType_Wavelet
GridType_WaveletBoundary = _pysgpp_swig.GridType_WaveletBoundary
GridType_FundamentalSpline = _pysgpp_swig.GridType_FundamentalSpline
GridType_ModFundamentalSpline = _pysgpp_swig.GridType_ModFundamentalSpline
GridType_ModBsplineClenshawCurtis = _pysgpp_swig.GridType_ModBsplineClenshawCurtis
GridType_LinearStencil = _pysgpp_swig.GridType_LinearStencil
GridType_ModLinearStencil = _pysgpp_swig.GridType_ModLinearStencil
GridType_PolyClenshawCurtisBoundary = _pysgpp_swig.GridType_PolyClenshawCurtisBoundary
GridType_PolyClenshawCurtis = _pysgpp_swig.GridType_PolyClenshawCurtis
GridType_LinearClenshawCurtis = _pysgpp_swig.GridType_LinearClenshawCurtis
GridType_ModPolyClenshawCurtis = _pysgpp_swig.GridType_ModPolyClenshawCurtis
GridType_ModLinearClenshawCurtis = _pysgpp_swig.GridType_ModLinearClenshawCurtis
GridType_NakBsplineBoundaryCombigrid = _pysgpp_swig.GridType_NakBsplineBoundaryCombigrid
GridType_NaturalBsplineBoundary = _pysgpp_swig.GridType_NaturalBsplineBoundary
GridType_NakBsplineBoundary = _pysgpp_swig.GridType_NakBsplineBoundary
GridType_ModNakBspline = _pysgpp_swig.GridType_ModNakBspline
GridType_WeaklyFundamentalSplineBoundary = _pysgpp_swig.GridType_WeaklyFundamentalSplineBoundary
GridType_WeaklyFundamentalNakSplineBoundary = _pysgpp_swig.GridType_WeaklyFundamentalNakSplineBoundary
GridType_ModWeaklyFundamentalNakSpline = _pysgpp_swig.GridType_ModWeaklyFundamentalNakSpline
GridType_FundamentalSplineBoundary = _pysgpp_swig.GridType_FundamentalSplineBoundary
GridType_FundamentalNakSplineBoundary = _pysgpp_swig.GridType_FundamentalNakSplineBoundary
class Grid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createGrid(gridConfig: "RegularGridConfiguration") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createGrid(gridConfig)

    @staticmethod
    def createLinearGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearGrid(dim)

    @staticmethod
    def createLinearStretchedGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearStretchedGrid(dim)

    @staticmethod
    def createLinearBoundaryGrid(dim: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearBoundaryGrid(dim, boundaryLevel)

    @staticmethod
    def createLinearClenshawCurtisGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearClenshawCurtisGrid(dim)

    @staticmethod
    def createLinearClenshawCurtisBoundaryGrid(dim: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearClenshawCurtisBoundaryGrid(dim, boundaryLevel)

    @staticmethod
    def createModLinearClenshawCurtisGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModLinearClenshawCurtisGrid(dim)

    @staticmethod
    def createLinearStretchedBoundaryGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearStretchedBoundaryGrid(dim)

    @staticmethod
    def createModLinearGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModLinearGrid(dim)

    @staticmethod
    def createPolyGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createPolyGrid(dim, degree)

    @staticmethod
    def createPolyBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createPolyBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createModPolyGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModPolyGrid(dim, degree)

    @staticmethod
    def createWaveletGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createWaveletGrid(dim)

    @staticmethod
    def createWaveletBoundaryGrid(dim: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createWaveletBoundaryGrid(dim, boundaryLevel)

    @staticmethod
    def createModWaveletGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModWaveletGrid(dim)

    @staticmethod
    def createBsplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createBsplineGrid(dim, degree)

    @staticmethod
    def createBsplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createBsplineBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createBsplineClenshawCurtisGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createBsplineClenshawCurtisGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createModBsplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModBsplineGrid(dim, degree)

    @staticmethod
    def createModBsplineClenshawCurtisGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid(dim, degree)

    @staticmethod
    def createFundamentalSplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createFundamentalSplineGrid(dim, degree)

    @staticmethod
    def createModFundamentalSplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModFundamentalSplineGrid(dim, degree)

    @staticmethod
    def createSquareRootGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createSquareRootGrid(dim)

    @staticmethod
    def createLinearTruncatedBoundaryGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid(dim)

    @staticmethod
    def createPrewaveletGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createPrewaveletGrid(dim)

    @staticmethod
    def createLinearGridStencil(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createLinearGridStencil(dim)

    @staticmethod
    def createModLinearGridStencil(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModLinearGridStencil(dim)

    @staticmethod
    def createPeriodicGrid(dim: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createPeriodicGrid(dim)

    @staticmethod
    def createPolyClenshawCurtisBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createPolyClenshawCurtisBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createPolyClenshawCurtisGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createPolyClenshawCurtisGrid(dim, degree)

    @staticmethod
    def createModPolyClenshawCurtisGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModPolyClenshawCurtisGrid(dim, degree)

    @staticmethod
    def createNakBsplineBoundaryCombigridGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createNakBsplineBoundaryCombigridGrid(dim, degree)

    @staticmethod
    def createNaturalBsplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createNaturalBsplineBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createNakBsplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createNakBsplineBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createModNakBsplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createModNakBsplineGrid(dim, degree)

    @staticmethod
    def createWeaklyFundamentalSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createWeaklyFundamentalSplineBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createWeaklyFundamentalNakSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createWeaklyFundamentalNakSplineBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createFundamentalSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createFundamentalSplineBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def createFundamentalNakSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createFundamentalNakSplineBoundaryGrid(dim, degree, boundaryLevel)

    @staticmethod
    def unserialize(istr: "std::string const &") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_unserialize(istr)

    @staticmethod
    def stringToGridType(gridType: "std::string const &") -> "sgpp::base::GridType":
        return _pysgpp_swig.Grid_stringToGridType(gridType)
    __swig_destroy__ = _pysgpp_swig.delete_Grid

    def getStorage(self) -> "sgpp::base::GridStorage &":
        return _pysgpp_swig.Grid_getStorage(self)

    def getBoundingBox(self) -> "sgpp::base::BoundingBox &":
        return _pysgpp_swig.Grid_getBoundingBox(self)

    def getStretching(self) -> "sgpp::base::Stretching &":
        return _pysgpp_swig.Grid_getStretching(self)

    def getGenerator(self) -> "sgpp::base::GridGenerator &":
        return _pysgpp_swig.Grid_getGenerator(self)

    def getType(self) -> "sgpp::base::GridType":
        return _pysgpp_swig.Grid_getType(self)

    def getBasis(self) -> "sgpp::base::SBasis const &":
        return _pysgpp_swig.Grid_getBasis(self)

    def serialize(self) -> "void":
        return _pysgpp_swig.Grid_serialize(self)

    def refine(self, vector: "DataVector", num: "int") -> "void":
        return _pysgpp_swig.Grid_refine(self, vector, num)

    def insertPoint(self, dim: "size_t", levels: "unsigned int []", indeces: "unsigned int []", isLeaf: "bool") -> "void":
        return _pysgpp_swig.Grid_insertPoint(self, dim, levels, indeces, isLeaf)

    def getSize(self) -> "int":
        return _pysgpp_swig.Grid_getSize(self)

    def getTypeAsString(self) -> "std::string":
        return _pysgpp_swig.Grid_getTypeAsString(self)

    def createGridOfEquivalentType(self, numDims: "size_t") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createGridOfEquivalentType(self, numDims)

    def clone(self) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_clone(self)

    def createMemento(self) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createMemento(self)

    @staticmethod
    def setMemento(istr: "std::string const &") -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_setMemento(istr)

    def getDegree(self) -> "size_t":
        return _pysgpp_swig.Grid_getDegree(self)

    def hash_hexdigest(self):
      import hashlib

      gs = self.getStorage()
      gps = [None] * gs.getSize()
      for i in xrange(gs.getSize()):
        gps[i] = gs.getPoint(i).getHash()
      return hashlib.sha512(str(gps)).hexdigest()


# Register Grid in _pysgpp_swig:
_pysgpp_swig.Grid_swigregister(Grid)

def Grid_createGrid(gridConfig: "RegularGridConfiguration") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createGrid(gridConfig)

def Grid_createLinearGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearGrid(dim)

def Grid_createLinearStretchedGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearStretchedGrid(dim)

def Grid_createLinearBoundaryGrid(dim: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearBoundaryGrid(dim, boundaryLevel)

def Grid_createLinearClenshawCurtisGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearClenshawCurtisGrid(dim)

def Grid_createLinearClenshawCurtisBoundaryGrid(dim: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearClenshawCurtisBoundaryGrid(dim, boundaryLevel)

def Grid_createModLinearClenshawCurtisGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModLinearClenshawCurtisGrid(dim)

def Grid_createLinearStretchedBoundaryGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearStretchedBoundaryGrid(dim)

def Grid_createModLinearGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModLinearGrid(dim)

def Grid_createPolyGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyGrid(dim, degree)

def Grid_createPolyBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createModPolyGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModPolyGrid(dim, degree)

def Grid_createWaveletGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWaveletGrid(dim)

def Grid_createWaveletBoundaryGrid(dim: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWaveletBoundaryGrid(dim, boundaryLevel)

def Grid_createModWaveletGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModWaveletGrid(dim)

def Grid_createBsplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createBsplineGrid(dim, degree)

def Grid_createBsplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createBsplineBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createBsplineClenshawCurtisGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createBsplineClenshawCurtisGrid(dim, degree, boundaryLevel)

def Grid_createModBsplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModBsplineGrid(dim, degree)

def Grid_createModBsplineClenshawCurtisGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid(dim, degree)

def Grid_createFundamentalSplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createFundamentalSplineGrid(dim, degree)

def Grid_createModFundamentalSplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModFundamentalSplineGrid(dim, degree)

def Grid_createSquareRootGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createSquareRootGrid(dim)

def Grid_createLinearTruncatedBoundaryGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid(dim)

def Grid_createPrewaveletGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPrewaveletGrid(dim)

def Grid_createLinearGridStencil(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearGridStencil(dim)

def Grid_createModLinearGridStencil(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModLinearGridStencil(dim)

def Grid_createPeriodicGrid(dim: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPeriodicGrid(dim)

def Grid_createPolyClenshawCurtisBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyClenshawCurtisBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createPolyClenshawCurtisGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyClenshawCurtisGrid(dim, degree)

def Grid_createModPolyClenshawCurtisGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModPolyClenshawCurtisGrid(dim, degree)

def Grid_createNakBsplineBoundaryCombigridGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createNakBsplineBoundaryCombigridGrid(dim, degree)

def Grid_createNaturalBsplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createNaturalBsplineBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createNakBsplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createNakBsplineBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createModNakBsplineGrid(dim: "size_t", degree: "size_t") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModNakBsplineGrid(dim, degree)

def Grid_createWeaklyFundamentalSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWeaklyFundamentalSplineBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createWeaklyFundamentalNakSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWeaklyFundamentalNakSplineBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createFundamentalSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createFundamentalSplineBoundaryGrid(dim, degree, boundaryLevel)

def Grid_createFundamentalNakSplineBoundaryGrid(dim: "size_t", degree: "size_t", boundaryLevel: "size_t"=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createFundamentalNakSplineBoundaryGrid(dim, degree, boundaryLevel)

def Grid_unserialize(istr: "std::string const &") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_unserialize(istr)

def Grid_stringToGridType(gridType: "std::string const &") -> "sgpp::base::GridType":
    return _pysgpp_swig.Grid_stringToGridType(gridType)

def Grid_setMemento(istr: "std::string const &") -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_setMemento(istr)


def createOperationDiagonal(grid: "Grid", multiplicationFactor: "double"=0.25) -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationDiagonal(grid, multiplicationFactor)

def createOperationHierarchisation(grid: "Grid") -> "sgpp::base::OperationHierarchisation *":
    return _pysgpp_swig.createOperationHierarchisation(grid)

def createOperationArbitraryBoundaryHierarchisation(grid: "Grid") -> "sgpp::base::OperationHierarchisation *":
    return _pysgpp_swig.createOperationArbitraryBoundaryHierarchisation(grid)

def createOperationQuadrature(grid: "Grid") -> "sgpp::base::OperationQuadrature *":
    return _pysgpp_swig.createOperationQuadrature(grid)

def createOperationFirstMoment(grid: "Grid") -> "sgpp::base::OperationFirstMoment *":
    return _pysgpp_swig.createOperationFirstMoment(grid)

def createOperationSecondMoment(grid: "Grid") -> "sgpp::base::OperationSecondMoment *":
    return _pysgpp_swig.createOperationSecondMoment(grid)

def createOperationConvert(grid: "Grid") -> "sgpp::base::OperationConvert *":
    return _pysgpp_swig.createOperationConvert(grid)

def createOperationIdentity(grid: "Grid") -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationIdentity(grid)

def createOperationEval(grid: "Grid") -> "sgpp::base::OperationEval *":
    return _pysgpp_swig.createOperationEval(grid)

def createOperationMultipleEvalInter(grid: "Grid", dataset: "DataMatrix", interactions: "std::set< std::set< size_t > >") -> "sgpp::base::OperationMultipleEval *":
    return _pysgpp_swig.createOperationMultipleEvalInter(grid, dataset, interactions)

def createOperationMultipleEvalNaive(grid: "Grid", dataset: "DataMatrix") -> "sgpp::base::OperationMultipleEval *":
    return _pysgpp_swig.createOperationMultipleEvalNaive(grid, dataset)

def createOperationEvalNaive(grid: "Grid") -> "sgpp::base::OperationEval *":
    return _pysgpp_swig.createOperationEvalNaive(grid)

def createOperationEvalGradientNaive(grid: "Grid") -> "sgpp::base::OperationEvalGradient *":
    return _pysgpp_swig.createOperationEvalGradientNaive(grid)

def createOperationEvalHessianNaive(grid: "Grid") -> "sgpp::base::OperationEvalHessian *":
    return _pysgpp_swig.createOperationEvalHessianNaive(grid)

def createOperationEvalPartialDerivativeNaive(grid: "Grid") -> "sgpp::base::OperationEvalPartialDerivative *":
    return _pysgpp_swig.createOperationEvalPartialDerivativeNaive(grid)
class DataVectorSP(FloatVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DataVectorSP

    def __init__(self, *args):
        _pysgpp_swig.DataVectorSP_swiginit(self, _pysgpp_swig.new_DataVectorSP(*args))

    @staticmethod
    def fromFile(fileName: "std::string const &") -> "sgpp::base::DataVectorSP":
        return _pysgpp_swig.DataVectorSP_fromFile(fileName)

    @staticmethod
    def fromString(serializedVector: "std::string const &") -> "sgpp::base::DataVectorSP":
        return _pysgpp_swig.DataVectorSP_fromString(serializedVector)

    def resizeZero(self, nrows: "size_t") -> "void":
        return _pysgpp_swig.DataVectorSP_resizeZero(self, nrows)

    def restructure(self, remainingIndex: "SizeVector") -> "void":
        return _pysgpp_swig.DataVectorSP_restructure(self, remainingIndex)

    def remove(self, indexesToRemove: "SizeVector") -> "void":
        return _pysgpp_swig.DataVectorSP_remove(self, indexesToRemove)

    def append(self, *args) -> "size_t":
        return _pysgpp_swig.DataVectorSP_append(self, *args)

    def insert(self, index: "size_t", value: "float") -> "void":
        return _pysgpp_swig.DataVectorSP_insert(self, index, value)

    def setAll(self, value: "float") -> "void":
        return _pysgpp_swig.DataVectorSP_setAll(self, value)

    def get(self, i: "size_t") -> "float":
        return _pysgpp_swig.DataVectorSP_get(self, i)

    def set(self, i: "size_t", value: "float") -> "void":
        return _pysgpp_swig.DataVectorSP_set(self, i, value)

    def copyFrom(self, vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataVectorSP_copyFrom(self, vec)

    def add(self, vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataVectorSP_add(self, vec)

    def accumulate(self, vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataVectorSP_accumulate(self, vec)

    def sub(self, vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataVectorSP_sub(self, vec)

    def componentwise_mult(self, vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataVectorSP_componentwise_mult(self, vec)

    def componentwise_div(self, vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataVectorSP_componentwise_div(self, vec)

    def dotProduct(self, vec: "DataVectorSP") -> "float":
        return _pysgpp_swig.DataVectorSP_dotProduct(self, vec)

    def mult(self, scalar: "float") -> "void":
        return _pysgpp_swig.DataVectorSP_mult(self, scalar)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataVectorSP_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataVectorSP_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataVectorSP_abs(self)

    def sum(self) -> "float":
        return _pysgpp_swig.DataVectorSP_sum(self)

    def maxNorm(self) -> "float":
        return _pysgpp_swig.DataVectorSP_maxNorm(self)

    def RMSNorm(self) -> "float":
        return _pysgpp_swig.DataVectorSP_RMSNorm(self)

    def l2Norm(self) -> "float":
        return _pysgpp_swig.DataVectorSP_l2Norm(self)

    def min(self) -> "float":
        return _pysgpp_swig.DataVectorSP_min(self)

    def max(self) -> "float":
        return _pysgpp_swig.DataVectorSP_max(self)

    def minmax(self, min: "float *", max: "float *") -> "void":
        return _pysgpp_swig.DataVectorSP_minmax(self, min, max)

    def axpy(self, a: "float", x: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataVectorSP_axpy(self, a, x)

    def getPointer(self, *args) -> "float const *":
        return _pysgpp_swig.DataVectorSP_getPointer(self, *args)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataVectorSP_getSize(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataVectorSP_getNumberNonZero(self)

    def partitionClasses(self, threshold: "float") -> "void":
        return _pysgpp_swig.DataVectorSP_partitionClasses(self, threshold)

    def normalize(self, *args) -> "void":
        return _pysgpp_swig.DataVectorSP_normalize(self, *args)

    def toString(self) -> "std::string":
        return _pysgpp_swig.DataVectorSP_toString(self)

    def toFile(self, fileName: "std::string const &") -> "void":
        return _pysgpp_swig.DataVectorSP_toFile(self, fileName)

# Register DataVectorSP in _pysgpp_swig:
_pysgpp_swig.DataVectorSP_swigregister(DataVectorSP)

def DataVectorSP_fromFile(fileName: "std::string const &") -> "sgpp::base::DataVectorSP":
    return _pysgpp_swig.DataVectorSP_fromFile(fileName)

def DataVectorSP_fromString(serializedVector: "std::string const &") -> "sgpp::base::DataVectorSP":
    return _pysgpp_swig.DataVectorSP_fromString(serializedVector)

class DataMatrixSP(FloatVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DataMatrixSP

    def __init__(self, *args):
        _pysgpp_swig.DataMatrixSP_swiginit(self, _pysgpp_swig.new_DataMatrixSP(*args))

    @staticmethod
    def fromFile(fileName: "std::string const &") -> "sgpp::base::DataMatrixSP":
        return _pysgpp_swig.DataMatrixSP_fromFile(fileName)

    @staticmethod
    def fromString(serializedVector: "std::string const &") -> "sgpp::base::DataMatrixSP":
        return _pysgpp_swig.DataMatrixSP_fromString(serializedVector)

    def resizeRows(self, nrows: "size_t") -> "void":
        return _pysgpp_swig.DataMatrixSP_resizeRows(self, nrows)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_resize(self, *args)

    def resizeRowsCols(self, nrows: "size_t", ncols: "size_t") -> "void":
        return _pysgpp_swig.DataMatrixSP_resizeRowsCols(self, nrows, ncols)

    def resizeQuadratic(self, size: "size_t") -> "void":
        return _pysgpp_swig.DataMatrixSP_resizeQuadratic(self, size)

    def resizeZero(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_resizeZero(self, *args)

    def resizeToSubMatrix(self, row_1: "size_t", col_1: "size_t", row_2: "size_t", col_2: "size_t") -> "void":
        return _pysgpp_swig.DataMatrixSP_resizeToSubMatrix(self, row_1, col_1, row_2, col_2)

    def reserveAdditionalRows(self, inc_nrows: "size_t") -> "void":
        return _pysgpp_swig.DataMatrixSP_reserveAdditionalRows(self, inc_nrows)

    def appendRow(self, *args) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_appendRow(self, *args)

    def appendCol(self, vec: "DataVectorSP") -> "size_t":
        return _pysgpp_swig.DataMatrixSP_appendCol(self, vec)

    def setAll(self, value: "float") -> "void":
        return _pysgpp_swig.DataMatrixSP_setAll(self, value)

    def copyFrom(self, matr: "DataMatrixSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_copyFrom(self, matr)

    def transpose(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_transpose(self)

    def __call__(self, *args) -> "float const &":
        return _pysgpp_swig.DataMatrixSP___call__(self, *args)

    def get(self, row: "size_t", col: "size_t") -> "float":
        return _pysgpp_swig.DataMatrixSP_get(self, row, col)

    def set(self, row: "size_t", col: "size_t", value: "float") -> "void":
        return _pysgpp_swig.DataMatrixSP_set(self, row, col, value)

    def getRow(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_getRow(self, *args)

    def setRow(self, row: "size_t", vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_setRow(self, row, vec)

    def getColumn(self, col: "size_t", vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_getColumn(self, col, vec)

    def setColumn(self, col: "size_t", vec: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_setColumn(self, col, vec)

    def add(self, matr: "DataMatrixSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_add(self, matr)

    def sub(self, matr: "DataMatrixSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_sub(self, matr)

    def addReduce(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_addReduce(self, *args)

    def expand(self, expand: "DataVectorSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_expand(self, expand)

    def componentwise_mult(self, matr: "DataMatrixSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_componentwise_mult(self, matr)

    def componentwise_div(self, matr: "DataMatrixSP") -> "void":
        return _pysgpp_swig.DataMatrixSP_componentwise_div(self, matr)

    def mult(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_mult(self, *args)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_abs(self)

    def sum(self) -> "float":
        return _pysgpp_swig.DataMatrixSP_sum(self)

    def min(self, *args) -> "float":
        return _pysgpp_swig.DataMatrixSP_min(self, *args)

    def max(self, *args) -> "float":
        return _pysgpp_swig.DataMatrixSP_max(self, *args)

    def minmax(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_minmax(self, *args)

    def getPointer(self, *args) -> "float const *":
        return _pysgpp_swig.DataMatrixSP_getPointer(self, *args)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getSize(self)

    def getAdditionallyReservedRows(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getAdditionallyReservedRows(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getNumberNonZero(self)

    def getNrows(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getNrows(self)

    def getNcols(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getNcols(self)

    def normalizeDimension(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_normalizeDimension(self, *args)

    def toFile(self, fileName: "std::string const &") -> "void":
        return _pysgpp_swig.DataMatrixSP_toFile(self, fileName)

    def toString(self) -> "std::string":
        return _pysgpp_swig.DataMatrixSP_toString(self)

# Register DataMatrixSP in _pysgpp_swig:
_pysgpp_swig.DataMatrixSP_swigregister(DataMatrixSP)

def DataMatrixSP_fromFile(fileName: "std::string const &") -> "sgpp::base::DataMatrixSP":
    return _pysgpp_swig.DataMatrixSP_fromFile(fileName)

def DataMatrixSP_fromString(serializedVector: "std::string const &") -> "sgpp::base::DataMatrixSP":
    return _pysgpp_swig.DataMatrixSP_fromString(serializedVector)

class BoundingBox1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    leftBoundary = property(_pysgpp_swig.BoundingBox1D_leftBoundary_get, _pysgpp_swig.BoundingBox1D_leftBoundary_set)
    rightBoundary = property(_pysgpp_swig.BoundingBox1D_rightBoundary_get, _pysgpp_swig.BoundingBox1D_rightBoundary_set)
    bDirichletLeft = property(_pysgpp_swig.BoundingBox1D_bDirichletLeft_get, _pysgpp_swig.BoundingBox1D_bDirichletLeft_set)
    bDirichletRight = property(_pysgpp_swig.BoundingBox1D_bDirichletRight_get, _pysgpp_swig.BoundingBox1D_bDirichletRight_set)

    def __init__(self, *args):
        _pysgpp_swig.BoundingBox1D_swiginit(self, _pysgpp_swig.new_BoundingBox1D(*args))
    __swig_destroy__ = _pysgpp_swig.delete_BoundingBox1D

# Register BoundingBox1D in _pysgpp_swig:
_pysgpp_swig.BoundingBox1D_swigregister(BoundingBox1D)

class BoundingBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.BoundingBox_swiginit(self, _pysgpp_swig.new_BoundingBox(*args))
    __swig_destroy__ = _pysgpp_swig.delete_BoundingBox

    def setBoundary(self, d: "size_t", boundingBox1D: "BoundingBox1D") -> "void":
        return _pysgpp_swig.BoundingBox_setBoundary(self, d, boundingBox1D)

    def getBoundary(self, d: "size_t") -> "sgpp::base::BoundingBox1D const &":
        return _pysgpp_swig.BoundingBox_getBoundary(self, d)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.BoundingBox_getDimension(self)

    def getIntervalWidth(self, d: "size_t") -> "double":
        return _pysgpp_swig.BoundingBox_getIntervalWidth(self, d)

    def getIntervalOffset(self, d: "size_t") -> "double":
        return _pysgpp_swig.BoundingBox_getIntervalOffset(self, d)

    def isUnitCube(self) -> "bool":
        return _pysgpp_swig.BoundingBox_isUnitCube(self)

    def transformPointsToBoundingBox(self, points: "DataMatrix") -> "void":
        return _pysgpp_swig.BoundingBox_transformPointsToBoundingBox(self, points)

    def transformPointToBoundingBox(self, *args) -> "double":
        return _pysgpp_swig.BoundingBox_transformPointToBoundingBox(self, *args)

    def transformPointsToUnitCube(self, points: "DataMatrix") -> "void":
        return _pysgpp_swig.BoundingBox_transformPointsToUnitCube(self, points)

    def transformPointToUnitCube(self, *args) -> "double":
        return _pysgpp_swig.BoundingBox_transformPointToUnitCube(self, *args)

    def isContainingPoint(self, *args) -> "bool":
        return _pysgpp_swig.BoundingBox_isContainingPoint(self, *args)

    def hasDirichletBoundaryLeft(self, d: "size_t") -> "bool":
        return _pysgpp_swig.BoundingBox_hasDirichletBoundaryLeft(self, d)

    def hasDirichletBoundaryRight(self, d: "size_t") -> "bool":
        return _pysgpp_swig.BoundingBox_hasDirichletBoundaryRight(self, d)

    def serialize(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox_serialize(self, *args)

    def unserialize(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox_unserialize(self, *args)

    def toString(self) -> "std::string":
        return _pysgpp_swig.BoundingBox_toString(self)

# Register BoundingBox in _pysgpp_swig:
_pysgpp_swig.BoundingBox_swigregister(BoundingBox)

LOOKUPSIZE = _pysgpp_swig.LOOKUPSIZE
LOOKUPMAX = _pysgpp_swig.LOOKUPMAX
class Stretching1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pysgpp_swig.Stretching1D_type_get, _pysgpp_swig.Stretching1D_type_set)
    x_0 = property(_pysgpp_swig.Stretching1D_x_0_get, _pysgpp_swig.Stretching1D_x_0_set)
    xsi = property(_pysgpp_swig.Stretching1D_xsi_get, _pysgpp_swig.Stretching1D_xsi_set)
    lookup = property(_pysgpp_swig.Stretching1D_lookup_get, _pysgpp_swig.Stretching1D_lookup_set)

    def __init__(self, *args):
        _pysgpp_swig.Stretching1D_swiginit(self, _pysgpp_swig.new_Stretching1D(*args))
    __swig_destroy__ = _pysgpp_swig.delete_Stretching1D

# Register Stretching1D in _pysgpp_swig:
_pysgpp_swig.Stretching1D_swigregister(Stretching1D)

class Stretching(BoundingBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.Stretching_swiginit(self, _pysgpp_swig.new_Stretching(*args))
    __swig_destroy__ = _pysgpp_swig.delete_Stretching

    def getCoordinate(self, level: "sgpp::base::level_t", index: "sgpp::base::index_t", d: "size_t") -> "double":
        return _pysgpp_swig.Stretching_getCoordinate(self, level, index, d)

    def getStretching1D(self, d: "size_t") -> "sgpp::base::Stretching1D const &":
        return _pysgpp_swig.Stretching_getStretching1D(self, d)

    def printLookupTable(self) -> "void":
        return _pysgpp_swig.Stretching_printLookupTable(self)

    def getAdjacentPositions(self, level: "sgpp::base::level_t", index: "sgpp::base::index_t", d: "size_t", posc: "double &", posl: "double &", posr: "double &") -> "void":
        return _pysgpp_swig.Stretching_getAdjacentPositions(self, level, index, d, posc, posl, posr)

    def getStretchingMode(self) -> "std::string":
        return _pysgpp_swig.Stretching_getStretchingMode(self)

    def getDiscreteVector(self, bSort: "bool") -> "std::vector< double,std::allocator< double > > *":
        return _pysgpp_swig.Stretching_getDiscreteVector(self, bSort)

    def getDiscreteVectorLevel(self) -> "std::vector< sgpp::base::level_t,std::allocator< sgpp::base::level_t > >":
        return _pysgpp_swig.Stretching_getDiscreteVectorLevel(self)

    def calculateNeighborLookup(self, maxlevel: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.Stretching_calculateNeighborLookup(self, maxlevel)

    def serialize(self, *args) -> "void":
        return _pysgpp_swig.Stretching_serialize(self, *args)

    def unserialize(self, *args) -> "void":
        return _pysgpp_swig.Stretching_unserialize(self, *args)

# Register Stretching in _pysgpp_swig:
_pysgpp_swig.Stretching_swigregister(Stretching)

SERIALIZATION_VERSION = _pysgpp_swig.SERIALIZATION_VERSION
class HashGridPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.HashGridPoint_swiginit(self, _pysgpp_swig.new_HashGridPoint(*args))
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPoint

    def serialize(self, ostream: "std::ostream &", version: "int") -> "void":
        return _pysgpp_swig.HashGridPoint_serialize(self, ostream, version)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.HashGridPoint_getDimension(self)

    def set(self, *args) -> "void":
        return _pysgpp_swig.HashGridPoint_set(self, *args)

    def push(self, *args) -> "void":
        return _pysgpp_swig.HashGridPoint_push(self, *args)

    def get(self, d: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_get(self, d)

    def getLevel(self, d: "size_t") -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevel(self, d)

    def getIndex(self, d: "size_t") -> "sgpp::base::HashGridPoint::index_type":
        return _pysgpp_swig.HashGridPoint_getIndex(self, d)

    def setLeaf(self, isLeaf: "bool") -> "void":
        return _pysgpp_swig.HashGridPoint_setLeaf(self, isLeaf)

    def isLeaf(self) -> "bool":
        return _pysgpp_swig.HashGridPoint_isLeaf(self)

    def getStandardCoordinate(self, d: "size_t") -> "double":
        return _pysgpp_swig.HashGridPoint_getStandardCoordinate(self, d)

    def getStandardCoordinates(self, coordinates: "DataVector") -> "void":
        return _pysgpp_swig.HashGridPoint_getStandardCoordinates(self, coordinates)

    def isInnerPoint(self) -> "bool":
        return _pysgpp_swig.HashGridPoint_isInnerPoint(self)

    def rehash(self) -> "void":
        return _pysgpp_swig.HashGridPoint_rehash(self)

    def getHash(self) -> "size_t":
        return _pysgpp_swig.HashGridPoint_getHash(self)

    def equals(self, rhs: "HashGridPoint") -> "bool":
        return _pysgpp_swig.HashGridPoint_equals(self, rhs)

    def assign(self, rhs: "HashGridPoint") -> "sgpp::base::HashGridPoint &":
        return _pysgpp_swig.HashGridPoint_assign(self, rhs)

    def toString(self, *args) -> "void":
        return _pysgpp_swig.HashGridPoint_toString(self, *args)

    def getLevelSum(self) -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevelSum(self)

    def getLevelMax(self) -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevelMax(self)

    def getLevelMin(self) -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevelMin(self)

    def getLeftLevelZero(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getLeftLevelZero(self, dim)

    def getRightLevelZero(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getRightLevelZero(self, dim)

    def getLeftChild(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getLeftChild(self, dim)

    def getRightChild(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getRightChild(self, dim)

    def getRoot(self, d: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getRoot(self, d)

    def getParent(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getParent(self, dim)

    def getRightBoundaryPoint(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getRightBoundaryPoint(self, dim)

    def getLeftBoundaryPoint(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridPoint_getLeftBoundaryPoint(self, dim)

    def setAsHierarchicalGridPoint(self, dim: "size_t", level: "sgpp::base::HashGridPoint::level_type", index: "sgpp::base::HashGridPoint::index_type") -> "void":
        return _pysgpp_swig.HashGridPoint_setAsHierarchicalGridPoint(self, dim, level, index)

    def isHierarchicalAncestor(self, *args) -> "bool":
        return _pysgpp_swig.HashGridPoint_isHierarchicalAncestor(self, *args)

# Register HashGridPoint in _pysgpp_swig:
_pysgpp_swig.HashGridPoint_swigregister(HashGridPoint)

class HashGridPointPointerHashFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, index: "HashGridPoint") -> "size_t":
        return _pysgpp_swig.HashGridPointPointerHashFunctor___call__(self, index)

    def __init__(self):
        _pysgpp_swig.HashGridPointPointerHashFunctor_swiginit(self, _pysgpp_swig.new_HashGridPointPointerHashFunctor())
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointPointerHashFunctor

# Register HashGridPointPointerHashFunctor in _pysgpp_swig:
_pysgpp_swig.HashGridPointPointerHashFunctor_swigregister(HashGridPointPointerHashFunctor)

class HashGridPointPointerEqualityFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, s1: "HashGridPoint", s2: "HashGridPoint") -> "size_t":
        return _pysgpp_swig.HashGridPointPointerEqualityFunctor___call__(self, s1, s2)

    def __init__(self):
        _pysgpp_swig.HashGridPointPointerEqualityFunctor_swiginit(self, _pysgpp_swig.new_HashGridPointPointerEqualityFunctor())
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointPointerEqualityFunctor

# Register HashGridPointPointerEqualityFunctor in _pysgpp_swig:
_pysgpp_swig.HashGridPointPointerEqualityFunctor_swigregister(HashGridPointPointerEqualityFunctor)

class HashGridPointHashFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, index: "HashGridPoint") -> "size_t":
        return _pysgpp_swig.HashGridPointHashFunctor___call__(self, index)

    def __init__(self):
        _pysgpp_swig.HashGridPointHashFunctor_swiginit(self, _pysgpp_swig.new_HashGridPointHashFunctor())
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointHashFunctor

# Register HashGridPointHashFunctor in _pysgpp_swig:
_pysgpp_swig.HashGridPointHashFunctor_swigregister(HashGridPointHashFunctor)

class HashGridPointEqualityFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, s1: "HashGridPoint", s2: "HashGridPoint") -> "size_t":
        return _pysgpp_swig.HashGridPointEqualityFunctor___call__(self, s1, s2)

    def __init__(self):
        _pysgpp_swig.HashGridPointEqualityFunctor_swiginit(self, _pysgpp_swig.new_HashGridPointEqualityFunctor())
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointEqualityFunctor

# Register HashGridPointEqualityFunctor in _pysgpp_swig:
_pysgpp_swig.HashGridPointEqualityFunctor_swigregister(HashGridPointEqualityFunctor)

class HashGridStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.HashGridStorage_swiginit(self, _pysgpp_swig.new_HashGridStorage(*args))
    __swig_destroy__ = _pysgpp_swig.delete_HashGridStorage

    def clear(self) -> "void":
        return _pysgpp_swig.HashGridStorage_clear(self)

    def deletePoints(self, removePoints: "SizeList") -> "std::vector< size_t,std::allocator< size_t > >":
        return _pysgpp_swig.HashGridStorage_deletePoints(self, removePoints)

    def unserializeNoAlgoDims(self, istr: "std::string &") -> "void":
        return _pysgpp_swig.HashGridStorage_unserializeNoAlgoDims(self, istr)

    def serialize(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_serialize(self, *args)

    def toString(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_toString(self, *args)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getSize(self)

    def getNumberOfInnerPoints(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getNumberOfInnerPoints(self)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getDimension(self)

    def getPoint(self, seq: "size_t") -> "sgpp::base::HashGridPoint &":
        return _pysgpp_swig.HashGridStorage_getPoint(self, seq)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_insert(self, *args)

    def update(self, index: "HashGridPoint", pos: "size_t") -> "void":
        return _pysgpp_swig.HashGridStorage_update(self, index, pos)

    def deleteLast(self) -> "void":
        return _pysgpp_swig.HashGridStorage_deleteLast(self)

    def create(self, index: "HashGridPoint") -> "sgpp::base::HashGridStorage::point_pointer":
        return _pysgpp_swig.HashGridStorage_create(self, index)

    def destroy(self, index: "HashGridPoint") -> "void":
        return _pysgpp_swig.HashGridStorage_destroy(self, index)

    def store(self, index: "HashGridPoint") -> "unsigned int":
        return _pysgpp_swig.HashGridStorage_store(self, index)

    def find(self, index: "HashGridPoint") -> "sgpp::base::HashGridStorage::grid_map_iterator":
        return _pysgpp_swig.HashGridStorage_find(self, index)

    def begin(self) -> "sgpp::base::HashGridStorage::grid_map_iterator":
        return _pysgpp_swig.HashGridStorage_begin(self)

    def end(self) -> "sgpp::base::HashGridStorage::grid_map_iterator":
        return _pysgpp_swig.HashGridStorage_end(self)

    def isContaining(self, index: "HashGridPoint") -> "bool":
        return _pysgpp_swig.HashGridStorage_isContaining(self, index)

    def getSequenceNumber(self, index: "HashGridPoint") -> "size_t":
        return _pysgpp_swig.HashGridStorage_getSequenceNumber(self, index)

    def isInvalidSequenceNumber(self, s: "size_t") -> "bool":
        return _pysgpp_swig.HashGridStorage_isInvalidSequenceNumber(self, s)

    def getAlgorithmicDimensions(self) -> "std::vector< size_t,std::allocator< size_t > >":
        return _pysgpp_swig.HashGridStorage_getAlgorithmicDimensions(self)

    def setAlgorithmicDimensions(self, newAlgoDims: "SizeVector") -> "void":
        return _pysgpp_swig.HashGridStorage_setAlgorithmicDimensions(self, newAlgoDims)

    def recalcLeafProperty(self) -> "void":
        return _pysgpp_swig.HashGridStorage_recalcLeafProperty(self)

    def getBoundingBox(self) -> "sgpp::base::BoundingBox *":
        return _pysgpp_swig.HashGridStorage_getBoundingBox(self)

    def getStretching(self) -> "sgpp::base::Stretching *":
        return _pysgpp_swig.HashGridStorage_getStretching(self)

    def setBoundingBox(self, boundingBox: "BoundingBox") -> "void":
        return _pysgpp_swig.HashGridStorage_setBoundingBox(self, boundingBox)

    def setStretching(self, stretching: "Stretching") -> "void":
        return _pysgpp_swig.HashGridStorage_setStretching(self, stretching)

    def getLevelIndexArraysForEval(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_getLevelIndexArraysForEval(self, *args)

    def getLevelForIntegral(self, level: "DataMatrix") -> "void":
        return _pysgpp_swig.HashGridStorage_getLevelForIntegral(self, level)

    def getCoordinateArrays(self, coordinates: "DataMatrix") -> "void":
        return _pysgpp_swig.HashGridStorage_getCoordinateArrays(self, coordinates)

    def getMaxLevel(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getMaxLevel(self)

    def getLevelIndexMaskArraysForModEval(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_getLevelIndexMaskArraysForModEval(self, *args)

    def getCoordinate(self, point: "HashGridPoint", d: "size_t") -> "double":
        return _pysgpp_swig.HashGridStorage_getCoordinate(self, point, d)

    def getUnitCoordinate(self, point: "HashGridPoint", d: "size_t") -> "double":
        return _pysgpp_swig.HashGridStorage_getUnitCoordinate(self, point, d)

    def getCoordinates(self, *args) -> "sgpp::base::DataVector":
        return _pysgpp_swig.HashGridStorage_getCoordinates(self, *args)

# Register HashGridStorage in _pysgpp_swig:
_pysgpp_swig.HashGridStorage_swigregister(HashGridStorage)

class HashGridIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.HashGridIterator_swiginit(self, _pysgpp_swig.new_HashGridIterator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIterator

    def resetToLevelZero(self) -> "void":
        return _pysgpp_swig.HashGridIterator_resetToLevelZero(self)

    def resetToLeftLevelZero(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_resetToLeftLevelZero(self, dim)

    def resetToRightLevelZero(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_resetToRightLevelZero(self, dim)

    def resetToLevelOne(self, d: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_resetToLevelOne(self, d)

    def leftChild(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_leftChild(self, dim)

    def rightChild(self, dim: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_rightChild(self, dim)

    def up(self, d: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_up(self, d)

    def stepLeft(self, d: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_stepLeft(self, d)

    def stepRight(self, d: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_stepRight(self, d)

    def isInnerPoint(self) -> "bool":
        return _pysgpp_swig.HashGridIterator_isInnerPoint(self)

    def hint(self) -> "bool":
        return _pysgpp_swig.HashGridIterator_hint(self)

    def hintLeft(self, d: "size_t") -> "bool":
        return _pysgpp_swig.HashGridIterator_hintLeft(self, d)

    def hintRight(self, d: "size_t") -> "bool":
        return _pysgpp_swig.HashGridIterator_hintRight(self, d)

    def get(self, d: "size_t") -> "void":
        return _pysgpp_swig.HashGridIterator_get(self, d)

    def set(self, *args) -> "void":
        return _pysgpp_swig.HashGridIterator_set(self, *args)

    def push(self, d: "size_t", l: "sgpp::base::HashGridIterator::index_type::level_type", i: "sgpp::base::HashGridIterator::index_type::index_type") -> "void":
        return _pysgpp_swig.HashGridIterator_push(self, d, l, i)

    def seq(self) -> "size_t":
        return _pysgpp_swig.HashGridIterator_seq(self)

    def getGridDepth(self, dim: "size_t") -> "sgpp::base::HashGridIterator::level_t":
        return _pysgpp_swig.HashGridIterator_getGridDepth(self, dim)

    def toString(self) -> "std::string":
        return _pysgpp_swig.HashGridIterator_toString(self)

# Register HashGridIterator in _pysgpp_swig:
_pysgpp_swig.HashGridIterator_swigregister(HashGridIterator)

class RefinementFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_RefinementFunctor

    def __call__(self, storage: "HashGridStorage", seq: "size_t") -> "double":
        return _pysgpp_swig.RefinementFunctor___call__(self, storage, seq)

    def start(self) -> "double":
        return _pysgpp_swig.RefinementFunctor_start(self)

    def getRefinementsNum(self) -> "size_t":
        return _pysgpp_swig.RefinementFunctor_getRefinementsNum(self)

    def getRefinementThreshold(self) -> "double":
        return _pysgpp_swig.RefinementFunctor_getRefinementThreshold(self)

    def getTotalRefinementValue(self, storage: "HashGridStorage") -> "double":
        return _pysgpp_swig.RefinementFunctor_getTotalRefinementValue(self, storage)

# Register RefinementFunctor in _pysgpp_swig:
_pysgpp_swig.RefinementFunctor_swigregister(RefinementFunctor)

class SurplusRefinementFunctor(RefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, alpha: "DataVector", refinements_num: "size_t"=1, threshold: "double"=0.0):
        _pysgpp_swig.SurplusRefinementFunctor_swiginit(self, _pysgpp_swig.new_SurplusRefinementFunctor(alpha, refinements_num, threshold))
    __swig_destroy__ = _pysgpp_swig.delete_SurplusRefinementFunctor

# Register SurplusRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.SurplusRefinementFunctor_swigregister(SurplusRefinementFunctor)

class CoarseningFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_CoarseningFunctor

    def __call__(self, storage: "HashGridStorage", seq: "size_t") -> "double":
        return _pysgpp_swig.CoarseningFunctor___call__(self, storage, seq)

    def start(self) -> "double":
        return _pysgpp_swig.CoarseningFunctor_start(self)

    def getRemovementsNum(self) -> "size_t":
        return _pysgpp_swig.CoarseningFunctor_getRemovementsNum(self)

    def getCoarseningThreshold(self) -> "double":
        return _pysgpp_swig.CoarseningFunctor_getCoarseningThreshold(self)

# Register CoarseningFunctor in _pysgpp_swig:
_pysgpp_swig.CoarseningFunctor_swigregister(CoarseningFunctor)

class GridGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_GridGenerator

    def regular(self, *args) -> "void":
        return _pysgpp_swig.GridGenerator_regular(self, *args)

    def regularInter(self, level: "size_t", terms: "std::set< std::set< size_t > > const &", T: "double") -> "void":
        return _pysgpp_swig.GridGenerator_regularInter(self, level, terms, T)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.GridGenerator_cliques(self, *args)

    def full(self, level: "size_t") -> "void":
        return _pysgpp_swig.GridGenerator_full(self, level)

    def anisotropicFull(self, dimlevels: "SizeVector") -> "void":
        return _pysgpp_swig.GridGenerator_anisotropicFull(self, dimlevels)

    def truncated(self, level: "size_t", l_user: "size_t") -> "void":
        return _pysgpp_swig.GridGenerator_truncated(self, level, l_user)

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.GridGenerator_refine(self, func, addedPoints)

    def refineInter(self, func: "RefinementFunctor", interactions: "std::set< std::set< size_t > > const &") -> "void":
        return _pysgpp_swig.GridGenerator_refineInter(self, func, interactions)

    def coarsen(self, func: "CoarseningFunctor", removedSeq: "SizeVector") -> "void":
        return _pysgpp_swig.GridGenerator_coarsen(self, func, removedSeq)

    def coarsenNFirstOnly(self, func: "CoarseningFunctor", numFirstOnly: "size_t", removedSeq: "SizeVector", minIndexConsidered: "size_t") -> "void":
        return _pysgpp_swig.GridGenerator_coarsenNFirstOnly(self, func, numFirstOnly, removedSeq, minIndexConsidered)

    def getNumberOfRefinablePoints(self) -> "size_t":
        return _pysgpp_swig.GridGenerator_getNumberOfRefinablePoints(self)

    def getNumberOfRemovablePoints(self) -> "size_t":
        return _pysgpp_swig.GridGenerator_getNumberOfRemovablePoints(self)

    def refineMaxLevel(self, func: "RefinementFunctor", maxLevel: "size_t") -> "void":
        return _pysgpp_swig.GridGenerator_refineMaxLevel(self, func, maxLevel)

    def getNumberOfRefinablePointsToMaxLevel(self, maxLevel: "size_t") -> "size_t":
        return _pysgpp_swig.GridGenerator_getNumberOfRefinablePointsToMaxLevel(self, maxLevel)

# Register GridGenerator in _pysgpp_swig:
_pysgpp_swig.GridGenerator_swigregister(GridGenerator)

class OperationMultipleEval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleEval

    def mult(self, *args) -> "void":
        return _pysgpp_swig.OperationMultipleEval_mult(self, *args)

    def multTranspose(self, *args) -> "void":
        return _pysgpp_swig.OperationMultipleEval_multTranspose(self, *args)

    def eval(self, alpha: "DataVector", result: "DataVector") -> "void":
        return _pysgpp_swig.OperationMultipleEval_eval(self, alpha, result)

    def prepare(self) -> "void":
        return _pysgpp_swig.OperationMultipleEval_prepare(self)

    def getDuration(self) -> "double":
        return _pysgpp_swig.OperationMultipleEval_getDuration(self)

    def getImplementationName(self) -> "std::string":
        return _pysgpp_swig.OperationMultipleEval_getImplementationName(self)

# Register OperationMultipleEval in _pysgpp_swig:
_pysgpp_swig.OperationMultipleEval_swigregister(OperationMultipleEval)

class OperationMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMatrix

    def mult(self, alpha: "DataVector", result: "DataVector") -> "void":
        return _pysgpp_swig.OperationMatrix_mult(self, alpha, result)

# Register OperationMatrix in _pysgpp_swig:
_pysgpp_swig.OperationMatrix_swigregister(OperationMatrix)

class OperationIdentity(OperationMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OperationIdentity_swiginit(self, _pysgpp_swig.new_OperationIdentity())
    __swig_destroy__ = _pysgpp_swig.delete_OperationIdentity

# Register OperationIdentity in _pysgpp_swig:
_pysgpp_swig.OperationIdentity_swigregister(OperationIdentity)

class OperationConvert(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationConvert

    def doConvertToLinear(self, alpha: "DataVector") -> "void":
        return _pysgpp_swig.OperationConvert_doConvertToLinear(self, alpha)

    def doConvertFromLinear(self, alpha: "DataVector") -> "void":
        return _pysgpp_swig.OperationConvert_doConvertFromLinear(self, alpha)

# Register OperationConvert in _pysgpp_swig:
_pysgpp_swig.OperationConvert_swigregister(OperationConvert)

class OperationEval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEval

    def eval(self, *args) -> "void":
        return _pysgpp_swig.OperationEval_eval(self, *args)

# Register OperationEval in _pysgpp_swig:
_pysgpp_swig.OperationEval_swigregister(OperationEval)

class OperationEvalGradient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalGradient

    def evalGradient(self, *args) -> "void":
        return _pysgpp_swig.OperationEvalGradient_evalGradient(self, *args)
    pointInUnitCube = property(_pysgpp_swig.OperationEvalGradient_pointInUnitCube_get, _pysgpp_swig.OperationEvalGradient_pointInUnitCube_set)

# Register OperationEvalGradient in _pysgpp_swig:
_pysgpp_swig.OperationEvalGradient_swigregister(OperationEvalGradient)

class OperationEvalHessian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalHessian

    def evalHessian(self, *args) -> "void":
        return _pysgpp_swig.OperationEvalHessian_evalHessian(self, *args)
    pointInUnitCube = property(_pysgpp_swig.OperationEvalHessian_pointInUnitCube_get, _pysgpp_swig.OperationEvalHessian_pointInUnitCube_set)

# Register OperationEvalHessian in _pysgpp_swig:
_pysgpp_swig.OperationEvalHessian_swigregister(OperationEvalHessian)

class OperationEvalPartialDerivative(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalPartialDerivative

    def evalPartialDerivative(self, *args) -> "void":
        return _pysgpp_swig.OperationEvalPartialDerivative_evalPartialDerivative(self, *args)
    pointInUnitCube = property(_pysgpp_swig.OperationEvalPartialDerivative_pointInUnitCube_get, _pysgpp_swig.OperationEvalPartialDerivative_pointInUnitCube_set)

# Register OperationEvalPartialDerivative in _pysgpp_swig:
_pysgpp_swig.OperationEvalPartialDerivative_swigregister(OperationEvalPartialDerivative)

class OperationHierarchisation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationHierarchisation

    def doHierarchisation(self, node_values: "DataVector") -> "void":
        return _pysgpp_swig.OperationHierarchisation_doHierarchisation(self, node_values)

    def doDehierarchisation(self, alpha: "DataVector") -> "void":
        return _pysgpp_swig.OperationHierarchisation_doDehierarchisation(self, alpha)

# Register OperationHierarchisation in _pysgpp_swig:
_pysgpp_swig.OperationHierarchisation_swigregister(OperationHierarchisation)

class OperationQuadrature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationQuadrature

    def doQuadrature(self, alpha: "DataVector") -> "double":
        return _pysgpp_swig.OperationQuadrature_doQuadrature(self, alpha)

# Register OperationQuadrature in _pysgpp_swig:
_pysgpp_swig.OperationQuadrature_swigregister(OperationQuadrature)

class OperationQuadratureMC(OperationQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", mcPaths: "int"):
        _pysgpp_swig.OperationQuadratureMC_swiginit(self, _pysgpp_swig.new_OperationQuadratureMC(grid, mcPaths))
    __swig_destroy__ = _pysgpp_swig.delete_OperationQuadratureMC

    def doQuadratureFunc(self, *args) -> "double":
        return _pysgpp_swig.OperationQuadratureMC_doQuadratureFunc(self, *args)

    def doQuadratureL2Error(self, *args) -> "double":
        return _pysgpp_swig.OperationQuadratureMC_doQuadratureL2Error(self, *args)

# Register OperationQuadratureMC in _pysgpp_swig:
_pysgpp_swig.OperationQuadratureMC_swigregister(OperationQuadratureMC)

class DirichletUpdateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.DirichletUpdateVector_swiginit(self, _pysgpp_swig.new_DirichletUpdateVector(storage))
    __swig_destroy__ = _pysgpp_swig.delete_DirichletUpdateVector

    def applyDirichletConditions(self, updateVector: "DataVector", sourceVector: "DataVector") -> "void":
        return _pysgpp_swig.DirichletUpdateVector_applyDirichletConditions(self, updateVector, sourceVector)

    def setBoundariesToZero(self, updateVector: "DataVector") -> "void":
        return _pysgpp_swig.DirichletUpdateVector_setBoundariesToZero(self, updateVector)

    def setInnerPointsToZero(self, updateVector: "DataVector") -> "void":
        return _pysgpp_swig.DirichletUpdateVector_setInnerPointsToZero(self, updateVector)

    def multiplyBoundaryVector(self, updateVector: "DataVector", factor: "DataVector") -> "void":
        return _pysgpp_swig.DirichletUpdateVector_multiplyBoundaryVector(self, updateVector, factor)

    def multiplyBoundary(self, updateVector: "DataVector", value: "double") -> "void":
        return _pysgpp_swig.DirichletUpdateVector_multiplyBoundary(self, updateVector, value)

    def multiply(self, updateVector: "DataVector", value: "double", predicate: "bool (*)(sgpp::base::GridPoint *,sgpp::base::GridStorage &)") -> "void":
        return _pysgpp_swig.DirichletUpdateVector_multiply(self, updateVector, value, predicate)

# Register DirichletUpdateVector in _pysgpp_swig:
_pysgpp_swig.DirichletUpdateVector_swigregister(DirichletUpdateVector)

class HashGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def regular(self, storage: "HashGridStorage", level: "sgpp::base::level_t", T: "double"=0) -> "void":
        return _pysgpp_swig.HashGenerator_regular(self, storage, level, T)

    def regularInter(self, storage: "HashGridStorage", level: "sgpp::base::level_t", terms: "std::set< std::set< size_t > > const &", T: "double"=0) -> "void":
        return _pysgpp_swig.HashGenerator_regularInter(self, storage, level, terms, T)

    def regular_inter(self, storage: "HashGridStorage", level: "sgpp::base::level_t", terms: "std::unordered_set< std::vector< bool,std::allocator< bool > > > const &", T: "double"=0) -> "void":
        return _pysgpp_swig.HashGenerator_regular_inter(self, storage, level, terms, T)

    def cliques(self, storage: "HashGridStorage", level: "sgpp::base::level_t", clique_size: "size_t", T: "double"=0) -> "void":
        return _pysgpp_swig.HashGenerator_cliques(self, storage, level, clique_size, T)

    def full(self, storage: "HashGridStorage", level: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.HashGenerator_full(self, storage, level)

    def anisotropicFull(self, storage: "HashGridStorage", dimlevels: "SizeVector") -> "void":
        return _pysgpp_swig.HashGenerator_anisotropicFull(self, storage, dimlevels)

    def fullWithBoundary(self, storage: "HashGridStorage", level: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.HashGenerator_fullWithBoundary(self, storage, level)

    def regularWithBoundaries(self, storage: "HashGridStorage", level: "sgpp::base::level_t", boundaryLevel: "sgpp::base::level_t"=1) -> "void":
        return _pysgpp_swig.HashGenerator_regularWithBoundaries(self, storage, level, boundaryLevel)

    def regularWithPeriodicBoundaries(self, storage: "HashGridStorage", level: "sgpp::base::level_t", T: "double"=0) -> "void":
        return _pysgpp_swig.HashGenerator_regularWithPeriodicBoundaries(self, storage, level, T)

    def squareRoot(self, storage: "HashGridStorage", level: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.HashGenerator_squareRoot(self, storage, level)

    def truncated(self, storage: "HashGridStorage", level: "sgpp::base::level_t", k: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.HashGenerator_truncated(self, storage, level, k)

    def __init__(self):
        _pysgpp_swig.HashGenerator_swiginit(self, _pysgpp_swig.new_HashGenerator())
    __swig_destroy__ = _pysgpp_swig.delete_HashGenerator

# Register HashGenerator in _pysgpp_swig:
_pysgpp_swig.HashGenerator_swigregister(HashGenerator)

class AbstractRefinement_refinement_key(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, point: "HashGridPoint", seq: "size_t"):
        _pysgpp_swig.AbstractRefinement_refinement_key_swiginit(self, _pysgpp_swig.new_AbstractRefinement_refinement_key(point, seq))
    __swig_destroy__ = _pysgpp_swig.delete_AbstractRefinement_refinement_key

    def getLevelVector(self) -> "std::vector< sgpp::base::level_t,std::allocator< sgpp::base::level_t > > const":
        return _pysgpp_swig.AbstractRefinement_refinement_key_getLevelVector(self)

    def getPoint(self) -> "sgpp::base::GridPoint &":
        return _pysgpp_swig.AbstractRefinement_refinement_key_getPoint(self)

    def getSeq(self) -> "size_t":
        return _pysgpp_swig.AbstractRefinement_refinement_key_getSeq(self)

# Register AbstractRefinement_refinement_key in _pysgpp_swig:
_pysgpp_swig.AbstractRefinement_refinement_key_swigregister(AbstractRefinement_refinement_key)

class AbstractRefinement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def compare_pairs(lhs: "sgpp::base::AbstractRefinement::refinement_pair_type const &", rhs: "sgpp::base::AbstractRefinement::refinement_pair_type const &") -> "bool":
        return _pysgpp_swig.AbstractRefinement_compare_pairs(lhs, rhs)

    def free_refine(self, storage: "HashGridStorage", functor: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.AbstractRefinement_free_refine(self, storage, functor, addedPoints)

    def getNumberOfRefinablePoints(self, storage: "HashGridStorage") -> "size_t":
        return _pysgpp_swig.AbstractRefinement_getNumberOfRefinablePoints(self, storage)

    def refineGridpoint1D(self, *args) -> "void":
        return _pysgpp_swig.AbstractRefinement_refineGridpoint1D(self, *args)

    def isRefinable(self, storage: "HashGridStorage", point: "HashGridPoint") -> "bool":
        return _pysgpp_swig.AbstractRefinement_isRefinable(self, storage, point)
    __swig_destroy__ = _pysgpp_swig.delete_AbstractRefinement

    def getIndexOfMin(self, array: "sgpp::base::RefinementFunctor::value_type *", length: "size_t") -> "size_t":
        return _pysgpp_swig.AbstractRefinement_getIndexOfMin(self, array, length)

    def refineGridpoint(self, storage: "HashGridStorage", refine_index: "size_t") -> "void":
        return _pysgpp_swig.AbstractRefinement_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.AbstractRefinement_createGridpoint(self, storage, point)

    def createGridpointSubroutine(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.AbstractRefinement_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: "HashGridPoint", d: "size_t", storage: "HashGridStorage", source_index: "sgpp::base::index_t &", source_level: "sgpp::base::level_t &") -> "void":
        return _pysgpp_swig.AbstractRefinement_createGridpoint1D(self, point, d, storage, source_index, source_level)

    def collectRefinablePoints(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.AbstractRefinement_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.AbstractRefinement_refineGridpointsCollection(self, storage, functor, collection)

    def getIndicator(self, storage: "HashGridStorage", iter: "sgpp::base::GridStorage::grid_map_iterator const &", functor: "RefinementFunctor") -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.AbstractRefinement_getIndicator(self, storage, iter, functor)

    def __init__(self):
        if self.__class__ == AbstractRefinement:
            _self = None
        else:
            _self = self
        _pysgpp_swig.AbstractRefinement_swiginit(self, _pysgpp_swig.new_AbstractRefinement(_self, ))
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_AbstractRefinement(self)
        return weakref.proxy(self)

# Register AbstractRefinement in _pysgpp_swig:
_pysgpp_swig.AbstractRefinement_swigregister(AbstractRefinement)

def AbstractRefinement_compare_pairs(lhs: "sgpp::base::AbstractRefinement::refinement_pair_type const &", rhs: "sgpp::base::AbstractRefinement::refinement_pair_type const &") -> "bool":
    return _pysgpp_swig.AbstractRefinement_compare_pairs(lhs, rhs)

class RefinementDecorator(AbstractRefinement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refinement: "AbstractRefinement"):
        if self.__class__ == RefinementDecorator:
            _self = None
        else:
            _self = self
        _pysgpp_swig.RefinementDecorator_swiginit(self, _pysgpp_swig.new_RefinementDecorator(_self, refinement))
    __swig_destroy__ = _pysgpp_swig.delete_RefinementDecorator

    def free_refine(self, storage: "HashGridStorage", functor: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.RefinementDecorator_free_refine(self, storage, functor, addedPoints)

    def getNumberOfRefinablePoints(self, storage: "HashGridStorage") -> "size_t":
        return _pysgpp_swig.RefinementDecorator_getNumberOfRefinablePoints(self, storage)

    def refineGridpoint1D(self, storage: "HashGridStorage", point: "HashGridPoint", d: "size_t") -> "void":
        return _pysgpp_swig.RefinementDecorator_refineGridpoint1D(self, storage, point, d)

    def checkAdmissibility(self, storage: "HashGridStorage", subspace: "HashGridPoint") -> "bool":
        return _pysgpp_swig.RefinementDecorator_checkAdmissibility(self, storage, subspace)

    def refineGridpoint(self, storage: "HashGridStorage", refine_index: "size_t") -> "void":
        return _pysgpp_swig.RefinementDecorator_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.RefinementDecorator_createGridpoint(self, storage, point)

    def collectRefinablePoints(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.RefinementDecorator_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.RefinementDecorator_refineGridpointsCollection(self, storage, functor, collection)

    def getIndicator(self, storage: "HashGridStorage", iter: "sgpp::base::GridStorage::grid_map_iterator const &", functor: "RefinementFunctor") -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.RefinementDecorator_getIndicator(self, storage, iter, functor)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_RefinementDecorator(self)
        return weakref.proxy(self)

    def createGridpointSubroutine(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.RefinementDecorator_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: "HashGridPoint", d: "size_t", storage: "HashGridStorage", source_index: "sgpp::base::index_t &", source_level: "sgpp::base::level_t &") -> "void":
        return _pysgpp_swig.RefinementDecorator_createGridpoint1D(self, point, d, storage, source_index, source_level)

# Register RefinementDecorator in _pysgpp_swig:
_pysgpp_swig.RefinementDecorator_swigregister(RefinementDecorator)

class HashRefinement(AbstractRefinement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def free_refine(self, storage: "HashGridStorage", functor: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.HashRefinement_free_refine(self, storage, functor, addedPoints)

    def getNumberOfRefinablePoints(self, storage: "HashGridStorage") -> "size_t":
        return _pysgpp_swig.HashRefinement_getNumberOfRefinablePoints(self, storage)

    def refineGridpoint1D(self, *args) -> "void":
        return _pysgpp_swig.HashRefinement_refineGridpoint1D(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_HashRefinement

    def refineGridpoint(self, storage: "HashGridStorage", refine_index: "size_t") -> "void":
        return _pysgpp_swig.HashRefinement_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.HashRefinement_createGridpoint(self, storage, point)

    def collectRefinablePoints(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.HashRefinement_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.HashRefinement_refineGridpointsCollection(self, storage, functor, collection)

    def addElementToCollection(self, iter: "sgpp::base::GridStorage::grid_map_iterator const &", current_value_list: "sgpp::base::AbstractRefinement::refinement_list_type", refinements_num: "size_t", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.HashRefinement_addElementToCollection(self, iter, current_value_list, refinements_num, collection)

    def getIndicator(self, storage: "HashGridStorage", iter: "sgpp::base::GridStorage::grid_map_iterator const &", functor: "RefinementFunctor") -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.HashRefinement_getIndicator(self, storage, iter, functor)

    def __init__(self):
        if self.__class__ == HashRefinement:
            _self = None
        else:
            _self = self
        _pysgpp_swig.HashRefinement_swiginit(self, _pysgpp_swig.new_HashRefinement(_self, ))
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_HashRefinement(self)
        return weakref.proxy(self)

    def createGridpointSubroutine(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.HashRefinement_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: "HashGridPoint", d: "size_t", storage: "HashGridStorage", source_index: "sgpp::base::index_t &", source_level: "sgpp::base::level_t &") -> "void":
        return _pysgpp_swig.HashRefinement_createGridpoint1D(self, point, d, storage, source_index, source_level)

# Register HashRefinement in _pysgpp_swig:
_pysgpp_swig.HashRefinement_swigregister(HashRefinement)

class HashCoarsening(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def free_coarsen_NFirstOnly(self, storage: "HashGridStorage", functor: "CoarseningFunctor", numFirstPoints: "size_t", minIndexConsidered: "size_t"=0, removedPoints: "std::vector< sgpp::base::HashGridPoint,std::allocator< sgpp::base::HashGridPoint > > *"=None, removedSeq: "SizeVector"=None) -> "void":
        return _pysgpp_swig.HashCoarsening_free_coarsen_NFirstOnly(self, storage, functor, numFirstPoints, minIndexConsidered, removedPoints, removedSeq)

    def free_coarsen(self, storage: "HashGridStorage", functor: "CoarseningFunctor", removedPoints: "std::vector< sgpp::base::HashGridPoint,std::allocator< sgpp::base::HashGridPoint > > *"=None, removedSeq: "SizeVector"=None) -> "void":
        return _pysgpp_swig.HashCoarsening_free_coarsen(self, storage, functor, removedPoints, removedSeq)

    def getNumberOfRemovablePoints(self, storage: "HashGridStorage") -> "size_t":
        return _pysgpp_swig.HashCoarsening_getNumberOfRemovablePoints(self, storage)

    def __init__(self):
        _pysgpp_swig.HashCoarsening_swiginit(self, _pysgpp_swig.new_HashCoarsening())
    __swig_destroy__ = _pysgpp_swig.delete_HashCoarsening

# Register HashCoarsening in _pysgpp_swig:
_pysgpp_swig.HashCoarsening_swigregister(HashCoarsening)

class HashRefinementBoundaries(AbstractRefinement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def free_refine(self, storage: "HashGridStorage", functor: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.HashRefinementBoundaries_free_refine(self, storage, functor, addedPoints)

    def __init__(self):
        _pysgpp_swig.HashRefinementBoundaries_swiginit(self, _pysgpp_swig.new_HashRefinementBoundaries())
    __swig_destroy__ = _pysgpp_swig.delete_HashRefinementBoundaries

# Register HashRefinementBoundaries in _pysgpp_swig:
_pysgpp_swig.HashRefinementBoundaries_swigregister(HashRefinementBoundaries)

class ANOVAHashRefinement(HashRefinement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def refineGridpoint(self, storage: "HashGridStorage", refine_index: "size_t") -> "void":
        return _pysgpp_swig.ANOVAHashRefinement_refineGridpoint(self, storage, refine_index)

    def __init__(self):
        _pysgpp_swig.ANOVAHashRefinement_swiginit(self, _pysgpp_swig.new_ANOVAHashRefinement())
    __swig_destroy__ = _pysgpp_swig.delete_ANOVAHashRefinement

# Register ANOVAHashRefinement in _pysgpp_swig:
_pysgpp_swig.ANOVAHashRefinement_swigregister(ANOVAHashRefinement)

class SubspaceRefinement(RefinementDecorator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refinement: "AbstractRefinement"):
        if self.__class__ == SubspaceRefinement:
            _self = None
        else:
            _self = self
        _pysgpp_swig.SubspaceRefinement_swiginit(self, _pysgpp_swig.new_SubspaceRefinement(_self, refinement))

    def free_refine(self, storage: "HashGridStorage", functor: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.SubspaceRefinement_free_refine(self, storage, functor, addedPoints)
    __swig_destroy__ = _pysgpp_swig.delete_SubspaceRefinement

    def collectRefinablePoints(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.SubspaceRefinement_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: "HashGridStorage", functor: "RefinementFunctor", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.SubspaceRefinement_refineGridpointsCollection(self, storage, functor, collection)

    def addElementToCollection(self, iter: "sgpp::base::GridStorage::grid_map_iterator const &", current_value_list: "sgpp::base::AbstractRefinement::refinement_list_type", refinement_num: "size_t", collection: "sgpp::base::AbstractRefinement::refinement_container_type &") -> "void":
        return _pysgpp_swig.SubspaceRefinement_addElementToCollection(self, iter, current_value_list, refinement_num, collection)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_SubspaceRefinement(self)
        return weakref.proxy(self)

    def refineGridpoint(self, storage: "HashGridStorage", refine_index: "size_t") -> "void":
        return _pysgpp_swig.SubspaceRefinement_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.SubspaceRefinement_createGridpoint(self, storage, point)

    def createGridpointSubroutine(self, storage: "HashGridStorage", point: "HashGridPoint") -> "void":
        return _pysgpp_swig.SubspaceRefinement_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: "HashGridPoint", d: "size_t", storage: "HashGridStorage", source_index: "sgpp::base::index_t &", source_level: "sgpp::base::level_t &") -> "void":
        return _pysgpp_swig.SubspaceRefinement_createGridpoint1D(self, point, d, storage, source_index, source_level)

    def getIndicator(self, storage: "HashGridStorage", iter: "sgpp::base::GridStorage::grid_map_iterator const &", functor: "RefinementFunctor") -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.SubspaceRefinement_getIndicator(self, storage, iter, functor)

# Register SubspaceRefinement in _pysgpp_swig:
_pysgpp_swig.SubspaceRefinement_swigregister(SubspaceRefinement)

class PredictiveRefinementIndicator(RefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", dataSet: "DataMatrix", errorVector: "DataVector", refinements_num: "size_t"=1, threshold: "double"=0.0, minSupportPoints: "uint64_t"=0):
        _pysgpp_swig.PredictiveRefinementIndicator_swiginit(self, _pysgpp_swig.new_PredictiveRefinementIndicator(grid, dataSet, errorVector, refinements_num, threshold, minSupportPoints))
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinementIndicator

    def runOperator(self, storage: "HashGridStorage", seq: "size_t") -> "double":
        return _pysgpp_swig.PredictiveRefinementIndicator_runOperator(self, storage, seq)

    def getMinSupportPoints(self) -> "uint64_t":
        return _pysgpp_swig.PredictiveRefinementIndicator_getMinSupportPoints(self)

    def setMinSupportPoints(self, minSupportPoints: "uint64_t") -> "void":
        return _pysgpp_swig.PredictiveRefinementIndicator_setMinSupportPoints(self, minSupportPoints)

    def __call__(self, *args) -> "double":
        return _pysgpp_swig.PredictiveRefinementIndicator___call__(self, *args)

# Register PredictiveRefinementIndicator in _pysgpp_swig:
_pysgpp_swig.PredictiveRefinementIndicator_swigregister(PredictiveRefinementIndicator)

class PredictiveRefinement_refinement_key(AbstractRefinement_refinement_key):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, point: "HashGridPoint", seq: "size_t", dim: "size_t"):
        _pysgpp_swig.PredictiveRefinement_refinement_key_swiginit(self, _pysgpp_swig.new_PredictiveRefinement_refinement_key(point, seq, dim))

    def getDim(self) -> "size_t":
        return _pysgpp_swig.PredictiveRefinement_refinement_key_getDim(self)
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinement_refinement_key

# Register PredictiveRefinement_refinement_key in _pysgpp_swig:
_pysgpp_swig.PredictiveRefinement_refinement_key_swigregister(PredictiveRefinement_refinement_key)

class PredictiveRefinement(RefinementDecorator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refinement: "AbstractRefinement"):
        _pysgpp_swig.PredictiveRefinement_swiginit(self, _pysgpp_swig.new_PredictiveRefinement(refinement))

    def free_refine(self, *args) -> "void":
        return _pysgpp_swig.PredictiveRefinement_free_refine(self, *args)

    def setAlpha(self, alpha: "DataVector") -> "void":
        return _pysgpp_swig.PredictiveRefinement_setAlpha(self, alpha)
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinement

# Register PredictiveRefinement in _pysgpp_swig:
_pysgpp_swig.PredictiveRefinement_swigregister(PredictiveRefinement)

class ForwardSelectorRefinementIndicator(RefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", svs: "DataMatrix", alphas: "DataVector", w1: "DataVector", w2: "DataVector", beta: "double", threshold: "double"=0.0, refinementsNum: "size_t"=1, performUpdate: "bool"=True):
        _pysgpp_swig.ForwardSelectorRefinementIndicator_swiginit(self, _pysgpp_swig.new_ForwardSelectorRefinementIndicator(grid, svs, alphas, w1, w2, beta, threshold, refinementsNum, performUpdate))

    def runOperator(self, storage: "HashGridStorage", seq: "size_t") -> "double":
        return _pysgpp_swig.ForwardSelectorRefinementIndicator_runOperator(self, storage, seq)

    def __call__(self, *args) -> "double":
        return _pysgpp_swig.ForwardSelectorRefinementIndicator___call__(self, *args)

    def update(self, point: "HashGridPoint") -> "void":
        return _pysgpp_swig.ForwardSelectorRefinementIndicator_update(self, point)
    __swig_destroy__ = _pysgpp_swig.delete_ForwardSelectorRefinementIndicator

# Register ForwardSelectorRefinementIndicator in _pysgpp_swig:
_pysgpp_swig.ForwardSelectorRefinementIndicator_swigregister(ForwardSelectorRefinementIndicator)

class ForwardSelectorRefinement_refinement_key(AbstractRefinement_refinement_key):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, point: "HashGridPoint", seq: "size_t", dim: "size_t"):
        _pysgpp_swig.ForwardSelectorRefinement_refinement_key_swiginit(self, _pysgpp_swig.new_ForwardSelectorRefinement_refinement_key(point, seq, dim))

    def getDim(self) -> "size_t":
        return _pysgpp_swig.ForwardSelectorRefinement_refinement_key_getDim(self)
    __swig_destroy__ = _pysgpp_swig.delete_ForwardSelectorRefinement_refinement_key

# Register ForwardSelectorRefinement_refinement_key in _pysgpp_swig:
_pysgpp_swig.ForwardSelectorRefinement_refinement_key_swigregister(ForwardSelectorRefinement_refinement_key)

class ForwardSelectorRefinement(RefinementDecorator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refinement: "AbstractRefinement"):
        _pysgpp_swig.ForwardSelectorRefinement_swiginit(self, _pysgpp_swig.new_ForwardSelectorRefinement(refinement))

    def free_refine(self, *args) -> "void":
        return _pysgpp_swig.ForwardSelectorRefinement_free_refine(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ForwardSelectorRefinement

# Register ForwardSelectorRefinement in _pysgpp_swig:
_pysgpp_swig.ForwardSelectorRefinement_swigregister(ForwardSelectorRefinement)

class ImpurityRefinementIndicator(RefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", dataset: "DataMatrix", alphas: "DataVector", w1: "DataVector", w2: "DataVector", classesComputed: "DataVector", threshold: "double"=0.0, refinementsNum: "size_t"=1):
        _pysgpp_swig.ImpurityRefinementIndicator_swiginit(self, _pysgpp_swig.new_ImpurityRefinementIndicator(grid, dataset, alphas, w1, w2, classesComputed, threshold, refinementsNum))

    def __call__(self, *args) -> "double":
        return _pysgpp_swig.ImpurityRefinementIndicator___call__(self, *args)

    def update(self, point: "HashGridPoint") -> "void":
        return _pysgpp_swig.ImpurityRefinementIndicator_update(self, point)
    alphas = property(_pysgpp_swig.ImpurityRefinementIndicator_alphas_get, _pysgpp_swig.ImpurityRefinementIndicator_alphas_set)
    w1 = property(_pysgpp_swig.ImpurityRefinementIndicator_w1_get, _pysgpp_swig.ImpurityRefinementIndicator_w1_set)
    w2 = property(_pysgpp_swig.ImpurityRefinementIndicator_w2_get, _pysgpp_swig.ImpurityRefinementIndicator_w2_set)
    __swig_destroy__ = _pysgpp_swig.delete_ImpurityRefinementIndicator

# Register ImpurityRefinementIndicator in _pysgpp_swig:
_pysgpp_swig.ImpurityRefinementIndicator_swigregister(ImpurityRefinementIndicator)

class ImpurityRefinement_refinement_key(AbstractRefinement_refinement_key):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, point: "HashGridPoint", seq: "size_t", dim: "size_t"):
        _pysgpp_swig.ImpurityRefinement_refinement_key_swiginit(self, _pysgpp_swig.new_ImpurityRefinement_refinement_key(point, seq, dim))

    def getDim(self) -> "size_t":
        return _pysgpp_swig.ImpurityRefinement_refinement_key_getDim(self)
    __swig_destroy__ = _pysgpp_swig.delete_ImpurityRefinement_refinement_key

# Register ImpurityRefinement_refinement_key in _pysgpp_swig:
_pysgpp_swig.ImpurityRefinement_refinement_key_swigregister(ImpurityRefinement_refinement_key)

class ImpurityRefinement(RefinementDecorator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refinement: "AbstractRefinement"):
        _pysgpp_swig.ImpurityRefinement_swiginit(self, _pysgpp_swig.new_ImpurityRefinement(refinement))

    def free_refine(self, *args) -> "void":
        return _pysgpp_swig.ImpurityRefinement_free_refine(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ImpurityRefinement

# Register ImpurityRefinement in _pysgpp_swig:
_pysgpp_swig.ImpurityRefinement_swigregister(ImpurityRefinement)

class StandardGridGenerator(GridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.StandardGridGenerator_swiginit(self, _pysgpp_swig.new_StandardGridGenerator(storage))
    __swig_destroy__ = _pysgpp_swig.delete_StandardGridGenerator

    def regular(self, *args) -> "void":
        return _pysgpp_swig.StandardGridGenerator_regular(self, *args)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.StandardGridGenerator_cliques(self, *args)

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.StandardGridGenerator_refine(self, func, addedPoints)

    def refineInter(self, *args) -> "void":
        return _pysgpp_swig.StandardGridGenerator_refineInter(self, *args)

# Register StandardGridGenerator in _pysgpp_swig:
_pysgpp_swig.StandardGridGenerator_swigregister(StandardGridGenerator)

class L0BoundaryGridGenerator(GridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.L0BoundaryGridGenerator_swiginit(self, _pysgpp_swig.new_L0BoundaryGridGenerator(storage))
    __swig_destroy__ = _pysgpp_swig.delete_L0BoundaryGridGenerator

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.L0BoundaryGridGenerator_refine(self, func, addedPoints)

# Register L0BoundaryGridGenerator in _pysgpp_swig:
_pysgpp_swig.L0BoundaryGridGenerator_swigregister(L0BoundaryGridGenerator)

class PrewaveletGridGenerator(GridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage", shadowstorage: "HashGridStorage"):
        _pysgpp_swig.PrewaveletGridGenerator_swiginit(self, _pysgpp_swig.new_PrewaveletGridGenerator(storage, shadowstorage))
    __swig_destroy__ = _pysgpp_swig.delete_PrewaveletGridGenerator

    def regular(self, *args) -> "void":
        return _pysgpp_swig.PrewaveletGridGenerator_regular(self, *args)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.PrewaveletGridGenerator_cliques(self, *args)

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.PrewaveletGridGenerator_refine(self, func, addedPoints)

# Register PrewaveletGridGenerator in _pysgpp_swig:
_pysgpp_swig.PrewaveletGridGenerator_swigregister(PrewaveletGridGenerator)

class PeriodicGridGenerator(GridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.PeriodicGridGenerator_swiginit(self, _pysgpp_swig.new_PeriodicGridGenerator(storage))
    __swig_destroy__ = _pysgpp_swig.delete_PeriodicGridGenerator

    def regular(self, *args) -> "void":
        return _pysgpp_swig.PeriodicGridGenerator_regular(self, *args)

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.PeriodicGridGenerator_refine(self, func, addedPoints)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.PeriodicGridGenerator_cliques(self, *args)

# Register PeriodicGridGenerator in _pysgpp_swig:
_pysgpp_swig.PeriodicGridGenerator_swigregister(PeriodicGridGenerator)

class StretchedBoundaryGridGenerator(GridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.StretchedBoundaryGridGenerator_swiginit(self, _pysgpp_swig.new_StretchedBoundaryGridGenerator(storage))
    __swig_destroy__ = _pysgpp_swig.delete_StretchedBoundaryGridGenerator

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.StretchedBoundaryGridGenerator_refine(self, func, addedPoints)

# Register StretchedBoundaryGridGenerator in _pysgpp_swig:
_pysgpp_swig.StretchedBoundaryGridGenerator_swigregister(StretchedBoundaryGridGenerator)

class BoundaryGridGenerator(GridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage", boundaryLevel: "sgpp::base::level_t"=1):
        _pysgpp_swig.BoundaryGridGenerator_swiginit(self, _pysgpp_swig.new_BoundaryGridGenerator(storage, boundaryLevel))
    __swig_destroy__ = _pysgpp_swig.delete_BoundaryGridGenerator

    def getBoundaryLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.BoundaryGridGenerator_getBoundaryLevel(self)

    def setBoundaryLevel(self, boundaryLevel: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.BoundaryGridGenerator_setBoundaryLevel(self, boundaryLevel)

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.BoundaryGridGenerator_refine(self, func, addedPoints)

# Register BoundaryGridGenerator in _pysgpp_swig:
_pysgpp_swig.BoundaryGridGenerator_swigregister(BoundaryGridGenerator)

class SquareRootGridGenerator(GridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.SquareRootGridGenerator_swiginit(self, _pysgpp_swig.new_SquareRootGridGenerator(storage))
    __swig_destroy__ = _pysgpp_swig.delete_SquareRootGridGenerator

    def refine(self, func: "RefinementFunctor", addedPoints: "SizeVector"=None) -> "void":
        return _pysgpp_swig.SquareRootGridGenerator_refine(self, func, addedPoints)

# Register SquareRootGridGenerator in _pysgpp_swig:
_pysgpp_swig.SquareRootGridGenerator_swigregister(SquareRootGridGenerator)

class SurplusVolumeRefinementFunctor(RefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, alpha: "DataVector", refinements_num: "size_t"=1, threshold: "double"=0.0):
        _pysgpp_swig.SurplusVolumeRefinementFunctor_swiginit(self, _pysgpp_swig.new_SurplusVolumeRefinementFunctor(alpha, refinements_num, threshold))
    __swig_destroy__ = _pysgpp_swig.delete_SurplusVolumeRefinementFunctor

# Register SurplusVolumeRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.SurplusVolumeRefinementFunctor_swigregister(SurplusVolumeRefinementFunctor)

class GridDataBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ascii = _pysgpp_swig.GridDataBase_ascii
    binary = _pysgpp_swig.GridDataBase_binary

    def __init__(self, *args):
        _pysgpp_swig.GridDataBase_swiginit(self, _pysgpp_swig.new_GridDataBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_GridDataBase

    def clear(self) -> "void":
        return _pysgpp_swig.GridDataBase_clear(self)

    def toString(self) -> "std::string":
        return _pysgpp_swig.GridDataBase_toString(self)

    def hasKey(self, gi: "HashGridPoint") -> "bool":
        return _pysgpp_swig.GridDataBase_hasKey(self, gi)

    def set(self, gi: "HashGridPoint", value: "double") -> "void":
        return _pysgpp_swig.GridDataBase_set(self, gi, value)

    def setValuesFor(self, grid: "Grid", values: "DataVector") -> "void":
        return _pysgpp_swig.GridDataBase_setValuesFor(self, grid, values)

    def size(self) -> "size_t":
        return _pysgpp_swig.GridDataBase_size(self)

    def dim(self) -> "size_t":
        return _pysgpp_swig.GridDataBase_dim(self)

    def get(self, gi: "HashGridPoint") -> "double":
        return _pysgpp_swig.GridDataBase_get(self, gi)

    def remove(self, gi: "HashGridPoint") -> "void":
        return _pysgpp_swig.GridDataBase_remove(self, gi)

    def save(self, *args) -> "void":
        return _pysgpp_swig.GridDataBase_save(self, *args)

    def load(self, filename: "std::string const") -> "void":
        return _pysgpp_swig.GridDataBase_load(self, filename)

    def begin(self) -> "sgpp::base::GridDataBase::grid_map_iterator":
        return _pysgpp_swig.GridDataBase_begin(self)

    def end(self) -> "sgpp::base::GridDataBase::grid_map_iterator":
        return _pysgpp_swig.GridDataBase_end(self)

# Register GridDataBase in _pysgpp_swig:
_pysgpp_swig.GridDataBase_swigregister(GridDataBase)

class GridTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::base::GridType":
        return _pysgpp_swig.GridTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::base::GridType") -> "std::string const &":
        return _pysgpp_swig.GridTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.GridTypeParser_swiginit(self, _pysgpp_swig.new_GridTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_GridTypeParser

# Register GridTypeParser in _pysgpp_swig:
_pysgpp_swig.GridTypeParser_swigregister(GridTypeParser)

def GridTypeParser_parse(input: "std::string const &") -> "sgpp::base::GridType":
    return _pysgpp_swig.GridTypeParser_parse(input)

def GridTypeParser_toString(type: "sgpp::base::GridType") -> "std::string const &":
    return _pysgpp_swig.GridTypeParser_toString(type)

class GeneralGridTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::base::GeneralGridType":
        return _pysgpp_swig.GeneralGridTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::base::GeneralGridType") -> "std::string const &":
        return _pysgpp_swig.GeneralGridTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.GeneralGridTypeParser_swiginit(self, _pysgpp_swig.new_GeneralGridTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_GeneralGridTypeParser

# Register GeneralGridTypeParser in _pysgpp_swig:
_pysgpp_swig.GeneralGridTypeParser_swigregister(GeneralGridTypeParser)

def GeneralGridTypeParser_parse(input: "std::string const &") -> "sgpp::base::GeneralGridType":
    return _pysgpp_swig.GeneralGridTypeParser_parse(input)

def GeneralGridTypeParser_toString(type: "sgpp::base::GeneralGridType") -> "std::string const &":
    return _pysgpp_swig.GeneralGridTypeParser_toString(type)

RefinementFunctorType_Surplus = _pysgpp_swig.RefinementFunctorType_Surplus
RefinementFunctorType_SurplusVolume = _pysgpp_swig.RefinementFunctorType_SurplusVolume
RefinementFunctorType_DataBased = _pysgpp_swig.RefinementFunctorType_DataBased
RefinementFunctorType_ZeroCrossing = _pysgpp_swig.RefinementFunctorType_ZeroCrossing
RefinementFunctorType_GridPointBased = _pysgpp_swig.RefinementFunctorType_GridPointBased
RefinementFunctorType_MultipleClass = _pysgpp_swig.RefinementFunctorType_MultipleClass
RefinementFunctorType_Classification = _pysgpp_swig.RefinementFunctorType_Classification
class RefinementFunctorTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::base::RefinementFunctorType":
        return _pysgpp_swig.RefinementFunctorTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::base::RefinementFunctorType") -> "std::string const &":
        return _pysgpp_swig.RefinementFunctorTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.RefinementFunctorTypeParser_swiginit(self, _pysgpp_swig.new_RefinementFunctorTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_RefinementFunctorTypeParser

# Register RefinementFunctorTypeParser in _pysgpp_swig:
_pysgpp_swig.RefinementFunctorTypeParser_swigregister(RefinementFunctorTypeParser)

def RefinementFunctorTypeParser_parse(input: "std::string const &") -> "sgpp::base::RefinementFunctorType":
    return _pysgpp_swig.RefinementFunctorTypeParser_parse(input)

def RefinementFunctorTypeParser_toString(type: "sgpp::base::RefinementFunctorType") -> "std::string const &":
    return _pysgpp_swig.RefinementFunctorTypeParser_toString(type)

class ScreenOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.ScreenOutput_swiginit(self, _pysgpp_swig.new_ScreenOutput())
    __swig_destroy__ = _pysgpp_swig.delete_ScreenOutput

    def update(self, progress: "size_t", status: "std::string") -> "void":
        return _pysgpp_swig.ScreenOutput_update(self, progress, status)

    def writeTitle(self, appTitle: "std::string", appAuthor: "std::string") -> "void":
        return _pysgpp_swig.ScreenOutput_writeTitle(self, appTitle, appAuthor)

    def writeHelp(self, helpText: "std::string") -> "void":
        return _pysgpp_swig.ScreenOutput_writeHelp(self, helpText)

    def writeStartSolve(self, text: "std::string") -> "void":
        return _pysgpp_swig.ScreenOutput_writeStartSolve(self, text)

    def writeEmptyLines(self, numLines: "size_t") -> "void":
        return _pysgpp_swig.ScreenOutput_writeEmptyLines(self, numLines)

# Register ScreenOutput in _pysgpp_swig:
_pysgpp_swig.ScreenOutput_swigregister(ScreenOutput)

class OperationEvalPeriodic(OperationEval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.OperationEvalPeriodic_swiginit(self, _pysgpp_swig.new_OperationEvalPeriodic(storage))
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalPeriodic

# Register OperationEvalPeriodic in _pysgpp_swig:
_pysgpp_swig.OperationEvalPeriodic_swigregister(OperationEvalPeriodic)

class OperationMultipleEvalPeriodic(OperationMultipleEval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", dataset: "DataMatrix"):
        _pysgpp_swig.OperationMultipleEvalPeriodic_swiginit(self, _pysgpp_swig.new_OperationMultipleEvalPeriodic(grid, dataset))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleEvalPeriodic

# Register OperationMultipleEvalPeriodic in _pysgpp_swig:
_pysgpp_swig.OperationMultipleEvalPeriodic_swigregister(OperationMultipleEvalPeriodic)

class QuadRule1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.QuadRule1D_swiginit(self, _pysgpp_swig.new_QuadRule1D())
    __swig_destroy__ = _pysgpp_swig.delete_QuadRule1D

    def getMaxSupportedLevel(self) -> "size_t":
        return _pysgpp_swig.QuadRule1D_getMaxSupportedLevel(self)

    def getLevelPointsAndWeights(self, level: "size_t", coordinates: "DataVector", weights: "DataVector") -> "void":
        return _pysgpp_swig.QuadRule1D_getLevelPointsAndWeights(self, level, coordinates, weights)
    coordinatesWeights = property(_pysgpp_swig.QuadRule1D_coordinatesWeights_get, _pysgpp_swig.QuadRule1D_coordinatesWeights_set)

# Register QuadRule1D in _pysgpp_swig:
_pysgpp_swig.QuadRule1D_swigregister(QuadRule1D)

class GaussLegendreQuadRule1D(QuadRule1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.GaussLegendreQuadRule1D_swiginit(self, _pysgpp_swig.new_GaussLegendreQuadRule1D())
    __swig_destroy__ = _pysgpp_swig.delete_GaussLegendreQuadRule1D

    def getLevelPointsAndWeightsNormalized(self, level: "size_t", coordinates: "DataVector", weights: "DataVector") -> "void":
        return _pysgpp_swig.GaussLegendreQuadRule1D_getLevelPointsAndWeightsNormalized(self, level, coordinates, weights)

    @staticmethod
    def getInstance() -> "sgpp::base::GaussLegendreQuadRule1D &":
        return _pysgpp_swig.GaussLegendreQuadRule1D_getInstance()

# Register GaussLegendreQuadRule1D in _pysgpp_swig:
_pysgpp_swig.GaussLegendreQuadRule1D_swigregister(GaussLegendreQuadRule1D)

def GaussLegendreQuadRule1D_getInstance() -> "sgpp::base::GaussLegendreQuadRule1D &":
    return _pysgpp_swig.GaussLegendreQuadRule1D_getInstance()

class GaussHermiteQuadRule1D(QuadRule1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.GaussHermiteQuadRule1D_swiginit(self, _pysgpp_swig.new_GaussHermiteQuadRule1D())
    __swig_destroy__ = _pysgpp_swig.delete_GaussHermiteQuadRule1D

    def getLevelPointsAndWeightsNormalized(self, level: "size_t", coordinates: "DataVector", weights: "DataVector", mean: "double"=0.0, stdd: "double"=1.0) -> "void":
        return _pysgpp_swig.GaussHermiteQuadRule1D_getLevelPointsAndWeightsNormalized(self, level, coordinates, weights, mean, stdd)

    @staticmethod
    def getInstance() -> "sgpp::base::GaussHermiteQuadRule1D &":
        return _pysgpp_swig.GaussHermiteQuadRule1D_getInstance()

# Register GaussHermiteQuadRule1D in _pysgpp_swig:
_pysgpp_swig.GaussHermiteQuadRule1D_swigregister(GaussHermiteQuadRule1D)

def GaussHermiteQuadRule1D_getInstance() -> "sgpp::base::GaussHermiteQuadRule1D &":
    return _pysgpp_swig.GaussHermiteQuadRule1D_getInstance()

class OperationFirstMoment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationFirstMoment

    def doQuadrature(self, alpha: "DataVector", bounds: "DataMatrix"=None) -> "double":
        return _pysgpp_swig.OperationFirstMoment_doQuadrature(self, alpha, bounds)

# Register OperationFirstMoment in _pysgpp_swig:
_pysgpp_swig.OperationFirstMoment_swigregister(OperationFirstMoment)

class OperationSecondMoment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationSecondMoment

    def doQuadrature(self, alpha: "DataVector", bounds: "DataMatrix"=None) -> "double":
        return _pysgpp_swig.OperationSecondMoment_doQuadrature(self, alpha, bounds)

# Register OperationSecondMoment in _pysgpp_swig:
_pysgpp_swig.OperationSecondMoment_swigregister(OperationSecondMoment)

class RandomNumberGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getInstance() -> "sgpp::base::RandomNumberGenerator &":
        return _pysgpp_swig.RandomNumberGenerator_getInstance()

    def getUniformRN(self, a: "double"=0.0, b: "double"=1.0) -> "double":
        return _pysgpp_swig.RandomNumberGenerator_getUniformRN(self, a, b)

    def getUniformRV(self, vector: "DataVector", a: "double"=0.0, b: "double"=1.0) -> "void":
        return _pysgpp_swig.RandomNumberGenerator_getUniformRV(self, vector, a, b)

    def getUniformIndexRN(self, size: "size_t") -> "size_t":
        return _pysgpp_swig.RandomNumberGenerator_getUniformIndexRN(self, size)

    def getGaussianRN(self, mean: "double"=0.0, stdDev: "double"=1.0) -> "double":
        return _pysgpp_swig.RandomNumberGenerator_getGaussianRN(self, mean, stdDev)

    def getGaussianRV(self, vector: "DataVector", mean: "double"=0.0, stdDev: "double"=1.0) -> "void":
        return _pysgpp_swig.RandomNumberGenerator_getGaussianRV(self, vector, mean, stdDev)

    def getSeed(self) -> "sgpp::base::RandomNumberGenerator::SeedType":
        return _pysgpp_swig.RandomNumberGenerator_getSeed(self)

    def setSeed(self, *args) -> "void":
        return _pysgpp_swig.RandomNumberGenerator_setSeed(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_RandomNumberGenerator

# Register RandomNumberGenerator in _pysgpp_swig:
_pysgpp_swig.RandomNumberGenerator_swigregister(RandomNumberGenerator)

def RandomNumberGenerator_getInstance() -> "sgpp::base::RandomNumberGenerator &":
    return _pysgpp_swig.RandomNumberGenerator_getInstance()

class SLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLE

    def isMatrixEntryNonZero(self, i: "size_t", j: "size_t") -> "bool":
        return _pysgpp_swig.SLE_isMatrixEntryNonZero(self, i, j)

    def getMatrixEntry(self, i: "size_t", j: "size_t") -> "double":
        return _pysgpp_swig.SLE_getMatrixEntry(self, i, j)

    def matrixVectorMultiplication(self, x: "DataVector", y: "DataVector") -> "void":
        return _pysgpp_swig.SLE_matrixVectorMultiplication(self, x, y)

    def countNNZ(self) -> "size_t":
        return _pysgpp_swig.SLE_countNNZ(self)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.SLE_getDimension(self)

    def isCloneable(self) -> "bool":
        return _pysgpp_swig.SLE_isCloneable(self)

# Register SLE in _pysgpp_swig:
_pysgpp_swig.SLE_swigregister(SLE)
cvar = _pysgpp_swig.cvar
ARMADILLO_ENABLED = cvar.ARMADILLO_ENABLED
EIGEN_ENABLED = cvar.EIGEN_ENABLED
GMMPP_ENABLED = cvar.GMMPP_ENABLED
UMFPACK_ENABLED = cvar.UMFPACK_ENABLED

class CloneableSLE(SLE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_CloneableSLE

    def clone(self, clone: "std::unique_ptr< sgpp::base::CloneableSLE > &") -> "void":
        return _pysgpp_swig.CloneableSLE_clone(self, clone)

# Register CloneableSLE in _pysgpp_swig:
_pysgpp_swig.CloneableSLE_swigregister(CloneableSLE)

class FullSLE(CloneableSLE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A: "DataMatrix"):
        _pysgpp_swig.FullSLE_swiginit(self, _pysgpp_swig.new_FullSLE(A))
    __swig_destroy__ = _pysgpp_swig.delete_FullSLE

    def getA(self) -> "sgpp::base::DataMatrix &":
        return _pysgpp_swig.FullSLE_getA(self)

# Register FullSLE in _pysgpp_swig:
_pysgpp_swig.FullSLE_swigregister(FullSLE)

class HierarchisationSLE(CloneableSLE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.HierarchisationSLE_swiginit(self, _pysgpp_swig.new_HierarchisationSLE(*args))

    def getGrid(self) -> "sgpp::base::Grid &":
        return _pysgpp_swig.HierarchisationSLE_getGrid(self)

    def getGridStorage(self) -> "sgpp::base::GridStorage &":
        return _pysgpp_swig.HierarchisationSLE_getGridStorage(self)
    __swig_destroy__ = _pysgpp_swig.delete_HierarchisationSLE

# Register HierarchisationSLE in _pysgpp_swig:
_pysgpp_swig.HierarchisationSLE_swigregister(HierarchisationSLE)

class SLESolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLESolver

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.SLESolver_solve(self, *args)

# Register SLESolver in _pysgpp_swig:
_pysgpp_swig.SLESolver_swigregister(SLESolver)

class Armadillo(SLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_Armadillo

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.Armadillo_solve(self, *args)

    def __init__(self):
        _pysgpp_swig.Armadillo_swiginit(self, _pysgpp_swig.new_Armadillo())

# Register Armadillo in _pysgpp_swig:
_pysgpp_swig.Armadillo_swigregister(Armadillo)

class AutoSLESolver(SLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MAX_DIM_FOR_FULL = _pysgpp_swig.AutoSLESolver_MAX_DIM_FOR_FULL
    MAX_DIM_FOR_GAUSSIAN = _pysgpp_swig.AutoSLESolver_MAX_DIM_FOR_GAUSSIAN
    MAX_NNZ_RATIO_FOR_SPARSE = _pysgpp_swig.AutoSLESolver_MAX_NNZ_RATIO_FOR_SPARSE
    ESTIMATE_NNZ_ROWS_SAMPLE_SIZE = _pysgpp_swig.AutoSLESolver_ESTIMATE_NNZ_ROWS_SAMPLE_SIZE
    __swig_destroy__ = _pysgpp_swig.delete_AutoSLESolver

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.AutoSLESolver_solve(self, *args)

    def __init__(self):
        _pysgpp_swig.AutoSLESolver_swiginit(self, _pysgpp_swig.new_AutoSLESolver())

# Register AutoSLESolver in _pysgpp_swig:
_pysgpp_swig.AutoSLESolver_swigregister(AutoSLESolver)

class BiCGStab(SLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_MAX_IT_COUNT = _pysgpp_swig.BiCGStab_DEFAULT_MAX_IT_COUNT
    DEFAULT_TOLERANCE = _pysgpp_swig.BiCGStab_DEFAULT_TOLERANCE

    def __init__(self, *args):
        _pysgpp_swig.BiCGStab_swiginit(self, _pysgpp_swig.new_BiCGStab(*args))
    __swig_destroy__ = _pysgpp_swig.delete_BiCGStab

    def getMaxItCount(self) -> "size_t":
        return _pysgpp_swig.BiCGStab_getMaxItCount(self)

    def setMaxItCount(self, maxItCount: "size_t") -> "void":
        return _pysgpp_swig.BiCGStab_setMaxItCount(self, maxItCount)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.BiCGStab_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.BiCGStab_setTolerance(self, tolerance)

    def getStartingPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.BiCGStab_getStartingPoint(self)

    def setStartingPoint(self, startingPoint: "DataVector") -> "void":
        return _pysgpp_swig.BiCGStab_setStartingPoint(self, startingPoint)

# Register BiCGStab in _pysgpp_swig:
_pysgpp_swig.BiCGStab_swigregister(BiCGStab)

class Eigen(SLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_Eigen

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.Eigen_solve(self, *args)

    def __init__(self):
        _pysgpp_swig.Eigen_swiginit(self, _pysgpp_swig.new_Eigen())

# Register Eigen in _pysgpp_swig:
_pysgpp_swig.Eigen_swigregister(Eigen)

class GaussianElimination(SLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_GaussianElimination

    def __init__(self):
        _pysgpp_swig.GaussianElimination_swiginit(self, _pysgpp_swig.new_GaussianElimination())

# Register GaussianElimination in _pysgpp_swig:
_pysgpp_swig.GaussianElimination_swigregister(GaussianElimination)

class Gmmpp(SLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_Gmmpp

    def __init__(self):
        _pysgpp_swig.Gmmpp_swiginit(self, _pysgpp_swig.new_Gmmpp())

# Register Gmmpp in _pysgpp_swig:
_pysgpp_swig.Gmmpp_swigregister(Gmmpp)

class UMFPACK(SLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_UMFPACK

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.UMFPACK_solve(self, *args)

    def __init__(self):
        _pysgpp_swig.UMFPACK_swiginit(self, _pysgpp_swig.new_UMFPACK())

# Register UMFPACK in _pysgpp_swig:
_pysgpp_swig.UMFPACK_swigregister(UMFPACK)

class MutexType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def lock(self) -> "void":
        return _pysgpp_swig.MutexType_lock(self)

    def unlock(self) -> "void":
        return _pysgpp_swig.MutexType_unlock(self)

    def __init__(self):
        _pysgpp_swig.MutexType_swiginit(self, _pysgpp_swig.new_MutexType())
    __swig_destroy__ = _pysgpp_swig.delete_MutexType

# Register MutexType in _pysgpp_swig:
_pysgpp_swig.MutexType_swigregister(MutexType)


def __lshift__(*args) -> "std::ostream &":
    return _pysgpp_swig.__lshift__(*args)
class Printer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DEFAULT_VERBOSITY = _pysgpp_swig.Printer_DEFAULT_VERBOSITY

    @staticmethod
    def getInstance() -> "sgpp::base::Printer &":
        return _pysgpp_swig.Printer_getInstance()

    def printStatusBegin(self, msg: "std::string const &") -> "void":
        return _pysgpp_swig.Printer_printStatusBegin(self, msg)

    def printStatusUpdate(self, msg: "std::string const &") -> "void":
        return _pysgpp_swig.Printer_printStatusUpdate(self, msg)

    def printStatusNewLine(self) -> "void":
        return _pysgpp_swig.Printer_printStatusNewLine(self)

    def printStatusIdentation(self) -> "void":
        return _pysgpp_swig.Printer_printStatusIdentation(self)

    def printStatusEnd(self, *args) -> "void":
        return _pysgpp_swig.Printer_printStatusEnd(self, *args)

    def enableStatusPrinting(self) -> "void":
        return _pysgpp_swig.Printer_enableStatusPrinting(self)

    def disableStatusPrinting(self) -> "void":
        return _pysgpp_swig.Printer_disableStatusPrinting(self)

    def isStatusPrintingEnabled(self) -> "bool":
        return _pysgpp_swig.Printer_isStatusPrintingEnabled(self)

    def getVerbosity(self) -> "int":
        return _pysgpp_swig.Printer_getVerbosity(self)

    def setVerbosity(self, level: "int") -> "void":
        return _pysgpp_swig.Printer_setVerbosity(self, level)

    def getLastDurationSecs(self) -> "double":
        return _pysgpp_swig.Printer_getLastDurationSecs(self)

    def getMutex(self) -> "sgpp::base::MutexType &":
        return _pysgpp_swig.Printer_getMutex(self)

    def getStream(self) -> "std::ostream *":
        return _pysgpp_swig.Printer_getStream(self)

    def setStream(self, stream: "std::ostream *") -> "void":
        return _pysgpp_swig.Printer_setStream(self, stream)

    def getLineLengthLimit(self) -> "size_t":
        return _pysgpp_swig.Printer_getLineLengthLimit(self)

    def setLineLengthLimit(self, lineLengthLimit: "size_t") -> "void":
        return _pysgpp_swig.Printer_setLineLengthLimit(self, lineLengthLimit)

    def printSLE(self, system: "SLE") -> "void":
        return _pysgpp_swig.Printer_printSLE(self, system)
    __swig_destroy__ = _pysgpp_swig.delete_Printer

# Register Printer in _pysgpp_swig:
_pysgpp_swig.Printer_swigregister(Printer)

def Printer_getInstance() -> "sgpp::base::Printer &":
    return _pysgpp_swig.Printer_getInstance()

class SLinearBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearBase

    def __init__(self):
        _pysgpp_swig.SLinearBase_swiginit(self, _pysgpp_swig.new_SLinearBase())

# Register SLinearBase in _pysgpp_swig:
_pysgpp_swig.SLinearBase_swigregister(SLinearBase)

class SLinearBoundaryBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearBoundaryBase

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearBoundaryBase_eval(self, *args)

    def __init__(self):
        _pysgpp_swig.SLinearBoundaryBase_swiginit(self, _pysgpp_swig.new_SLinearBoundaryBase())

# Register SLinearBoundaryBase in _pysgpp_swig:
_pysgpp_swig.SLinearBoundaryBase_swigregister(SLinearBoundaryBase)

class SLinearClenshawCurtisBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.SLinearClenshawCurtisBase_swiginit(self, _pysgpp_swig.new_SLinearClenshawCurtisBase())
    __swig_destroy__ = _pysgpp_swig.delete_SLinearClenshawCurtisBase

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearClenshawCurtisBase_eval(self, *args)

# Register SLinearClenshawCurtisBase in _pysgpp_swig:
_pysgpp_swig.SLinearClenshawCurtisBase_swigregister(SLinearClenshawCurtisBase)

class SLinearClenshawCurtisBoundaryBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.SLinearClenshawCurtisBoundaryBase_swiginit(self, _pysgpp_swig.new_SLinearClenshawCurtisBoundaryBase())
    __swig_destroy__ = _pysgpp_swig.delete_SLinearClenshawCurtisBoundaryBase

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearClenshawCurtisBoundaryBase_eval(self, *args)

# Register SLinearClenshawCurtisBoundaryBase in _pysgpp_swig:
_pysgpp_swig.SLinearClenshawCurtisBoundaryBase_swigregister(SLinearClenshawCurtisBoundaryBase)

class SLinearModifiedClenshawCurtisBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.SLinearModifiedClenshawCurtisBase_swiginit(self, _pysgpp_swig.new_SLinearModifiedClenshawCurtisBase())
    __swig_destroy__ = _pysgpp_swig.delete_SLinearModifiedClenshawCurtisBase

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearModifiedClenshawCurtisBase_eval(self, *args)

    def evalHierToTop(self, level: "unsigned int", index: "unsigned int", coeffs: "DataVector", pos: "double") -> "double":
        return _pysgpp_swig.SLinearModifiedClenshawCurtisBase_evalHierToTop(self, level, index, coeffs, pos)

# Register SLinearModifiedClenshawCurtisBase in _pysgpp_swig:
_pysgpp_swig.SLinearModifiedClenshawCurtisBase_swigregister(SLinearModifiedClenshawCurtisBase)

class SLinearStretchedBase(SLinearBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearStretchedBase

    def stretchedEval(self, p: "double", pos0: "double", pos1: "double") -> "double":
        return _pysgpp_swig.SLinearStretchedBase_stretchedEval(self, p, pos0, pos1)

    def __init__(self):
        _pysgpp_swig.SLinearStretchedBase_swiginit(self, _pysgpp_swig.new_SLinearStretchedBase())

# Register SLinearStretchedBase in _pysgpp_swig:
_pysgpp_swig.SLinearStretchedBase_swigregister(SLinearStretchedBase)

class SLinearStretchedBoundaryBase(SLinearBoundaryBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearStretchedBoundaryBase

    def stretchedEval(self, p: "double", pos0: "double", pos1: "double") -> "double":
        return _pysgpp_swig.SLinearStretchedBoundaryBase_stretchedEval(self, p, pos0, pos1)

    def __init__(self):
        _pysgpp_swig.SLinearStretchedBoundaryBase_swiginit(self, _pysgpp_swig.new_SLinearStretchedBoundaryBase())

# Register SLinearStretchedBoundaryBase in _pysgpp_swig:
_pysgpp_swig.SLinearStretchedBoundaryBase_swigregister(SLinearStretchedBoundaryBase)

class SLinearModifiedBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearModifiedBase

    def __init__(self):
        _pysgpp_swig.SLinearModifiedBase_swiginit(self, _pysgpp_swig.new_SLinearModifiedBase())

# Register SLinearModifiedBase in _pysgpp_swig:
_pysgpp_swig.SLinearModifiedBase_swigregister(SLinearModifiedBase)

class SPolyBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, degree: "size_t"):
        _pysgpp_swig.SPolyBase_swiginit(self, _pysgpp_swig.new_SPolyBase(degree))
    __swig_destroy__ = _pysgpp_swig.delete_SPolyBase

    def evalHierToTop(self, level: "unsigned int", index: "unsigned int", coeffs: "DataVector", pos: "double") -> "double":
        return _pysgpp_swig.SPolyBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: "unsigned int", index: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SPolyBase_evalDx(self, level, index, x)

    def evalBasis(self, level: "unsigned int", index: "unsigned int", p: "double") -> "double":
        return _pysgpp_swig.SPolyBase_evalBasis(self, level, index, p)

# Register SPolyBase in _pysgpp_swig:
_pysgpp_swig.SPolyBase_swigregister(SPolyBase)

class SPolyBoundaryBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, degree: "size_t"):
        _pysgpp_swig.SPolyBoundaryBase_swiginit(self, _pysgpp_swig.new_SPolyBoundaryBase(degree))
    __swig_destroy__ = _pysgpp_swig.delete_SPolyBoundaryBase

    def evalHierToTop(self, level: "unsigned int", index: "unsigned int", coeffs: "DataVector", pos: "double") -> "double":
        return _pysgpp_swig.SPolyBoundaryBase_evalHierToTop(self, level, index, coeffs, pos)

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyBoundaryBase_eval(self, *args)

    def evalDx(self, level: "unsigned int", index: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SPolyBoundaryBase_evalDx(self, level, index, x)

# Register SPolyBoundaryBase in _pysgpp_swig:
_pysgpp_swig.SPolyBoundaryBase_swigregister(SPolyBoundaryBase)

class SPolyModifiedBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, degree: "size_t"):
        _pysgpp_swig.SPolyModifiedBase_swiginit(self, _pysgpp_swig.new_SPolyModifiedBase(degree))
    __swig_destroy__ = _pysgpp_swig.delete_SPolyModifiedBase

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyModifiedBase_eval(self, *args)

    def evalDx(self, level: "unsigned int", index: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SPolyModifiedBase_evalDx(self, level, index, x)

    def evalHierToTop(self, level: "unsigned int", index: "unsigned int", coeffs: "DataVector", pos: "double") -> "double":
        return _pysgpp_swig.SPolyModifiedBase_evalHierToTop(self, level, index, coeffs, pos)

# Register SPolyModifiedBase in _pysgpp_swig:
_pysgpp_swig.SPolyModifiedBase_swigregister(SPolyModifiedBase)

class SPolyClenshawCurtisBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, degree: "size_t"):
        _pysgpp_swig.SPolyClenshawCurtisBase_swiginit(self, _pysgpp_swig.new_SPolyClenshawCurtisBase(degree))
    __swig_destroy__ = _pysgpp_swig.delete_SPolyClenshawCurtisBase

    def evalHierToTop(self, level: "unsigned int", index: "unsigned int", coeffs: "DataVector", pos: "double") -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: "unsigned int", index: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBase_evalDx(self, level, index, x)

    def evalBasis(self, level: "unsigned int", index: "unsigned int", p: "double") -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBase_evalBasis(self, level, index, p)

# Register SPolyClenshawCurtisBase in _pysgpp_swig:
_pysgpp_swig.SPolyClenshawCurtisBase_swigregister(SPolyClenshawCurtisBase)

class SPolyClenshawCurtisBoundaryBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, degree: "size_t"):
        _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_swiginit(self, _pysgpp_swig.new_SPolyClenshawCurtisBoundaryBase(degree))
    __swig_destroy__ = _pysgpp_swig.delete_SPolyClenshawCurtisBoundaryBase

    def evalHierToTop(self, level: "unsigned int", index: "unsigned int", coeffs: "DataVector", pos: "double") -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: "unsigned int", index: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_evalDx(self, level, index, x)

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_eval(self, *args)

# Register SPolyClenshawCurtisBoundaryBase in _pysgpp_swig:
_pysgpp_swig.SPolyClenshawCurtisBoundaryBase_swigregister(SPolyClenshawCurtisBoundaryBase)

class SPolyModifiedClenshawCurtisBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, degree: "size_t"):
        _pysgpp_swig.SPolyModifiedClenshawCurtisBase_swiginit(self, _pysgpp_swig.new_SPolyModifiedClenshawCurtisBase(degree))
    __swig_destroy__ = _pysgpp_swig.delete_SPolyModifiedClenshawCurtisBase

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyModifiedClenshawCurtisBase_eval(self, *args)

    def evalHierToTop(self, level: "unsigned int", index: "unsigned int", coeffs: "DataVector", pos: "double") -> "double":
        return _pysgpp_swig.SPolyModifiedClenshawCurtisBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: "unsigned int", index: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SPolyModifiedClenshawCurtisBase_evalDx(self, level, index, x)

# Register SPolyModifiedClenshawCurtisBase in _pysgpp_swig:
_pysgpp_swig.SPolyModifiedClenshawCurtisBase_swigregister(SPolyModifiedClenshawCurtisBase)

class SWaveletBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletBase

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SWaveletBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SWaveletBase_evalDxDx(self, l, i, x)

    def __init__(self):
        _pysgpp_swig.SWaveletBase_swiginit(self, _pysgpp_swig.new_SWaveletBase())

# Register SWaveletBase in _pysgpp_swig:
_pysgpp_swig.SWaveletBase_swigregister(SWaveletBase)

class SWaveletBoundaryBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletBoundaryBase

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SWaveletBoundaryBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SWaveletBoundaryBase_evalDxDx(self, l, i, x)

    def __init__(self):
        _pysgpp_swig.SWaveletBoundaryBase_swiginit(self, _pysgpp_swig.new_SWaveletBoundaryBase())

# Register SWaveletBoundaryBase in _pysgpp_swig:
_pysgpp_swig.SWaveletBoundaryBase_swigregister(SWaveletBoundaryBase)

class SWaveletModifiedBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletModifiedBase

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SWaveletModifiedBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SWaveletModifiedBase_evalDxDx(self, l, i, x)

    def __init__(self):
        _pysgpp_swig.SWaveletModifiedBase_swiginit(self, _pysgpp_swig.new_SWaveletModifiedBase())

# Register SWaveletModifiedBase in _pysgpp_swig:
_pysgpp_swig.SWaveletModifiedBase_swigregister(SWaveletModifiedBase)

class SBsplineBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SBsplineBase_swiginit(self, _pysgpp_swig.new_SBsplineBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineBase

    def uniformBSpline(self, x: "double", p: "size_t") -> "double":
        return _pysgpp_swig.SBsplineBase_uniformBSpline(self, x, p)

    def uniformBSplineDx(self, x: "double", p: "size_t") -> "double":
        return _pysgpp_swig.SBsplineBase_uniformBSplineDx(self, x, p)

    def uniformBSplineDxDx(self, x: "double", p: "size_t") -> "double":
        return _pysgpp_swig.SBsplineBase_uniformBSplineDxDx(self, x, p)

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineBase_evalDxDx(self, l, i, x)

# Register SBsplineBase in _pysgpp_swig:
_pysgpp_swig.SBsplineBase_swigregister(SBsplineBase)

class SBsplineBoundaryBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SBsplineBoundaryBase_swiginit(self, _pysgpp_swig.new_SBsplineBoundaryBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineBoundaryBase

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineBoundaryBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineBoundaryBase_evalDxDx(self, l, i, x)

# Register SBsplineBoundaryBase in _pysgpp_swig:
_pysgpp_swig.SBsplineBoundaryBase_swigregister(SBsplineBoundaryBase)

class SBsplineClenshawCurtisBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SBsplineClenshawCurtisBase_swiginit(self, _pysgpp_swig.new_SBsplineClenshawCurtisBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineClenshawCurtisBase

    def nonUniformBSpline(self, x: "double", p: "size_t", k: "size_t") -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSpline(self, x, p, k)

    def nonUniformBSplineDx(self, x: "double", p: "size_t", k: "size_t") -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSplineDx(self, x, p, k)

    def nonUniformBSplineDxDx(self, x: "double", p: "size_t", k: "size_t") -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSplineDxDx(self, x, p, k)

    def clenshawCurtisPoint(self, l: "unsigned int", i: "unsigned int") -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_clenshawCurtisPoint(self, l, i)

    def constructKnots(self, l: "unsigned int", i: "unsigned int") -> "void":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_constructKnots(self, l, i)

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_evalDxDx(self, l, i, x)

# Register SBsplineClenshawCurtisBase in _pysgpp_swig:
_pysgpp_swig.SBsplineClenshawCurtisBase_swigregister(SBsplineClenshawCurtisBase)

class SBsplineModifiedBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SBsplineModifiedBase_swiginit(self, _pysgpp_swig.new_SBsplineModifiedBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineModifiedBase

    def modifiedBSpline(self, x: "double", p: "size_t") -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSpline(self, x, p)

    def modifiedBSplineDx(self, x: "double", p: "size_t") -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSplineDx(self, x, p)

    def modifiedBSplineDxDx(self, x: "double", p: "size_t") -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSplineDxDx(self, x, p)

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_evalDxDx(self, l, i, x)

# Register SBsplineModifiedBase in _pysgpp_swig:
_pysgpp_swig.SBsplineModifiedBase_swigregister(SBsplineModifiedBase)

class SBsplineModifiedClenshawCurtisBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_swiginit(self, _pysgpp_swig.new_SBsplineModifiedClenshawCurtisBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineModifiedClenshawCurtisBase

    def clenshawCurtisPoint(self, l: "unsigned int", i: "unsigned int") -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_clenshawCurtisPoint(self, l, i)

    def clenshawCurtisPointNegativeIndex(self, l: "unsigned int", ni: "unsigned int") -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_clenshawCurtisPointNegativeIndex(self, l, ni)

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_evalDxDx(self, l, i, x)

# Register SBsplineModifiedClenshawCurtisBase in _pysgpp_swig:
_pysgpp_swig.SBsplineModifiedClenshawCurtisBase_swigregister(SBsplineModifiedClenshawCurtisBase)

class SFundamentalNakSplineBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SFundamentalNakSplineBase_swiginit(self, _pysgpp_swig.new_SFundamentalNakSplineBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalNakSplineBase

    def getCoefficients(self, l: "unsigned int", i: "unsigned int", coefficients: "DoubleVector") -> "int":
        return _pysgpp_swig.SFundamentalNakSplineBase_getCoefficients(self, l, i, coefficients)

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SFundamentalNakSplineBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SFundamentalNakSplineBase_evalDxDx(self, l, i, x)

# Register SFundamentalNakSplineBase in _pysgpp_swig:
_pysgpp_swig.SFundamentalNakSplineBase_swigregister(SFundamentalNakSplineBase)

class SFundamentalSplineBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SFundamentalSplineBase_swiginit(self, _pysgpp_swig.new_SFundamentalSplineBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalSplineBase

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SFundamentalSplineBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SFundamentalSplineBase_evalDxDx(self, l, i, x)

# Register SFundamentalSplineBase in _pysgpp_swig:
_pysgpp_swig.SFundamentalSplineBase_swigregister(SFundamentalSplineBase)

class SFundamentalSplineModifiedBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SFundamentalSplineModifiedBase_swiginit(self, _pysgpp_swig.new_SFundamentalSplineModifiedBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalSplineModifiedBase

    def evalDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SFundamentalSplineModifiedBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: "unsigned int", i: "unsigned int", x: "double") -> "double":
        return _pysgpp_swig.SFundamentalSplineModifiedBase_evalDxDx(self, l, i, x)

# Register SFundamentalSplineModifiedBase in _pysgpp_swig:
_pysgpp_swig.SFundamentalSplineModifiedBase_swigregister(SFundamentalSplineModifiedBase)

class SWeaklyFundamentalSplineBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SWeaklyFundamentalSplineBase_swiginit(self, _pysgpp_swig.new_SWeaklyFundamentalSplineBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalSplineBase

# Register SWeaklyFundamentalSplineBase in _pysgpp_swig:
_pysgpp_swig.SWeaklyFundamentalSplineBase_swigregister(SWeaklyFundamentalSplineBase)

class SWeaklyFundamentalSplineBaseDeriv1(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SWeaklyFundamentalSplineBaseDeriv1_swiginit(self, _pysgpp_swig.new_SWeaklyFundamentalSplineBaseDeriv1(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalSplineBaseDeriv1

# Register SWeaklyFundamentalSplineBaseDeriv1 in _pysgpp_swig:
_pysgpp_swig.SWeaklyFundamentalSplineBaseDeriv1_swigregister(SWeaklyFundamentalSplineBaseDeriv1)

class SWeaklyFundamentalSplineBaseDeriv2(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SWeaklyFundamentalSplineBaseDeriv2_swiginit(self, _pysgpp_swig.new_SWeaklyFundamentalSplineBaseDeriv2(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalSplineBaseDeriv2

# Register SWeaklyFundamentalSplineBaseDeriv2 in _pysgpp_swig:
_pysgpp_swig.SWeaklyFundamentalSplineBaseDeriv2_swigregister(SWeaklyFundamentalSplineBaseDeriv2)

class SWeaklyFundamentalNakSplineBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SWeaklyFundamentalNakSplineBase_swiginit(self, _pysgpp_swig.new_SWeaklyFundamentalNakSplineBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalNakSplineBase

# Register SWeaklyFundamentalNakSplineBase in _pysgpp_swig:
_pysgpp_swig.SWeaklyFundamentalNakSplineBase_swigregister(SWeaklyFundamentalNakSplineBase)

class SWeaklyFundamentalNakSplineBaseDeriv1(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SWeaklyFundamentalNakSplineBaseDeriv1_swiginit(self, _pysgpp_swig.new_SWeaklyFundamentalNakSplineBaseDeriv1(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalNakSplineBaseDeriv1

# Register SWeaklyFundamentalNakSplineBaseDeriv1 in _pysgpp_swig:
_pysgpp_swig.SWeaklyFundamentalNakSplineBaseDeriv1_swigregister(SWeaklyFundamentalNakSplineBaseDeriv1)

class SWeaklyFundamentalNakSplineBaseDeriv2(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SWeaklyFundamentalNakSplineBaseDeriv2_swiginit(self, _pysgpp_swig.new_SWeaklyFundamentalNakSplineBaseDeriv2(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalNakSplineBaseDeriv2

# Register SWeaklyFundamentalNakSplineBaseDeriv2 in _pysgpp_swig:
_pysgpp_swig.SWeaklyFundamentalNakSplineBaseDeriv2_swigregister(SWeaklyFundamentalNakSplineBaseDeriv2)

class SNaturalBsplineBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNaturalBsplineBase_swiginit(self, _pysgpp_swig.new_SNaturalBsplineBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNaturalBsplineBase

# Register SNaturalBsplineBase in _pysgpp_swig:
_pysgpp_swig.SNaturalBsplineBase_swigregister(SNaturalBsplineBase)

class SNakBsplineBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNakBsplineBase_swiginit(self, _pysgpp_swig.new_SNakBsplineBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineBase

# Register SNakBsplineBase in _pysgpp_swig:
_pysgpp_swig.SNakBsplineBase_swigregister(SNakBsplineBase)

class SNakBsplineBaseDeriv1(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNakBsplineBaseDeriv1_swiginit(self, _pysgpp_swig.new_SNakBsplineBaseDeriv1(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineBaseDeriv1

# Register SNakBsplineBaseDeriv1 in _pysgpp_swig:
_pysgpp_swig.SNakBsplineBaseDeriv1_swigregister(SNakBsplineBaseDeriv1)

class SNakBsplineBaseDeriv2(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNakBsplineBaseDeriv2_swiginit(self, _pysgpp_swig.new_SNakBsplineBaseDeriv2(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineBaseDeriv2

# Register SNakBsplineBaseDeriv2 in _pysgpp_swig:
_pysgpp_swig.SNakBsplineBaseDeriv2_swigregister(SNakBsplineBaseDeriv2)

class SNakBsplineModifiedBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNakBsplineModifiedBase_swiginit(self, _pysgpp_swig.new_SNakBsplineModifiedBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineModifiedBase

# Register SNakBsplineModifiedBase in _pysgpp_swig:
_pysgpp_swig.SNakBsplineModifiedBase_swigregister(SNakBsplineModifiedBase)

class SNakBsplineModifiedBaseDeriv1(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNakBsplineModifiedBaseDeriv1_swiginit(self, _pysgpp_swig.new_SNakBsplineModifiedBaseDeriv1(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineModifiedBaseDeriv1

# Register SNakBsplineModifiedBaseDeriv1 in _pysgpp_swig:
_pysgpp_swig.SNakBsplineModifiedBaseDeriv1_swigregister(SNakBsplineModifiedBaseDeriv1)

class SNakBsplineModifiedBaseDeriv2(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNakBsplineModifiedBaseDeriv2_swiginit(self, _pysgpp_swig.new_SNakBsplineModifiedBaseDeriv2(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineModifiedBaseDeriv2

# Register SNakBsplineModifiedBaseDeriv2 in _pysgpp_swig:
_pysgpp_swig.SNakBsplineModifiedBaseDeriv2_swigregister(SNakBsplineModifiedBaseDeriv2)

class SPrewaveletBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SPrewaveletBase

    def __init__(self):
        _pysgpp_swig.SPrewaveletBase_swiginit(self, _pysgpp_swig.new_SPrewaveletBase())

# Register SPrewaveletBase in _pysgpp_swig:
_pysgpp_swig.SPrewaveletBase_swigregister(SPrewaveletBase)

class SNakBsplineBoundaryCombigridBase(SBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SNakBsplineBoundaryCombigridBase_swiginit(self, _pysgpp_swig.new_SNakBsplineBoundaryCombigridBase(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineBoundaryCombigridBase

# Register SNakBsplineBoundaryCombigridBase in _pysgpp_swig:
_pysgpp_swig.SNakBsplineBoundaryCombigridBase_swigregister(SNakBsplineBoundaryCombigridBase)

class SGetAffectedBasisFunctions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.SGetAffectedBasisFunctions_swiginit(self, _pysgpp_swig.new_SGetAffectedBasisFunctions(storage))
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctions

    def __call__(self, basis: "SLinearBase", point: "DataVector") -> "void":
        return _pysgpp_swig.SGetAffectedBasisFunctions___call__(self, basis, point)

# Register SGetAffectedBasisFunctions in _pysgpp_swig:
_pysgpp_swig.SGetAffectedBasisFunctions_swigregister(SGetAffectedBasisFunctions)

class SAlgorithmEvaluation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.SAlgorithmEvaluation_swiginit(self, _pysgpp_swig.new_SAlgorithmEvaluation(storage))
    __swig_destroy__ = _pysgpp_swig.delete_SAlgorithmEvaluation

    def __call__(self, basis: "SLinearBase", point: "DataVector", alpha: "DataVector") -> "double":
        return _pysgpp_swig.SAlgorithmEvaluation___call__(self, basis, point, alpha)

# Register SAlgorithmEvaluation in _pysgpp_swig:
_pysgpp_swig.SAlgorithmEvaluation_swigregister(SAlgorithmEvaluation)

class SGetAffectedBasisFunctionsBoundaries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.SGetAffectedBasisFunctionsBoundaries_swiginit(self, _pysgpp_swig.new_SGetAffectedBasisFunctionsBoundaries(storage))
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctionsBoundaries

    def __call__(self, basis: "SLinearBoundaryBase", point: "DataVector") -> "void":
        return _pysgpp_swig.SGetAffectedBasisFunctionsBoundaries___call__(self, basis, point)

# Register SGetAffectedBasisFunctionsBoundaries in _pysgpp_swig:
_pysgpp_swig.SGetAffectedBasisFunctionsBoundaries_swigregister(SGetAffectedBasisFunctionsBoundaries)

class SGetAffectedBasisFunctionsLinearStretchedBoundaries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage: "HashGridStorage"):
        _pysgpp_swig.SGetAffectedBasisFunctionsLinearStretchedBoundaries_swiginit(self, _pysgpp_swig.new_SGetAffectedBasisFunctionsLinearStretchedBoundaries(storage))
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctionsLinearStretchedBoundaries

    def __call__(self, basis: "SLinearStretchedBoundaryBase", point: "DataVector") -> "void":
        return _pysgpp_swig.SGetAffectedBasisFunctionsLinearStretchedBoundaries___call__(self, basis, point)

# Register SGetAffectedBasisFunctionsLinearStretchedBoundaries in _pysgpp_swig:
_pysgpp_swig.SGetAffectedBasisFunctionsLinearStretchedBoundaries_swigregister(SGetAffectedBasisFunctionsLinearStretchedBoundaries)

class BoundingBox1DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.BoundingBox1DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.BoundingBox1DVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.BoundingBox1DVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::BoundingBox1D >::size_type":
        return _pysgpp_swig.BoundingBox1DVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::base::BoundingBox1D >::difference_type", j: "std::vector< sgpp::base::BoundingBox1D >::difference_type") -> "std::vector< sgpp::base::BoundingBox1D,std::allocator< sgpp::base::BoundingBox1D > > *":
        return _pysgpp_swig.BoundingBox1DVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::base::BoundingBox1D >::difference_type", j: "std::vector< sgpp::base::BoundingBox1D >::difference_type") -> "void":
        return _pysgpp_swig.BoundingBox1DVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::BoundingBox1D >::value_type const &":
        return _pysgpp_swig.BoundingBox1DVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::BoundingBox1D >::value_type":
        return _pysgpp_swig.BoundingBox1DVector_pop(self)

    def append(self, x: "BoundingBox1D") -> "void":
        return _pysgpp_swig.BoundingBox1DVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.BoundingBox1DVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::BoundingBox1D >::size_type":
        return _pysgpp_swig.BoundingBox1DVector_size(self)

    def swap(self, v: "BoundingBox1DVector") -> "void":
        return _pysgpp_swig.BoundingBox1DVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::BoundingBox1D >::iterator":
        return _pysgpp_swig.BoundingBox1DVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::BoundingBox1D >::iterator":
        return _pysgpp_swig.BoundingBox1DVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::BoundingBox1D >::reverse_iterator":
        return _pysgpp_swig.BoundingBox1DVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::BoundingBox1D >::reverse_iterator":
        return _pysgpp_swig.BoundingBox1DVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::BoundingBox1D >::allocator_type":
        return _pysgpp_swig.BoundingBox1DVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::BoundingBox1D >::iterator":
        return _pysgpp_swig.BoundingBox1DVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.BoundingBox1DVector_swiginit(self, _pysgpp_swig.new_BoundingBox1DVector(*args))

    def push_back(self, x: "BoundingBox1D") -> "void":
        return _pysgpp_swig.BoundingBox1DVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::BoundingBox1D >::value_type const &":
        return _pysgpp_swig.BoundingBox1DVector_front(self)

    def back(self) -> "std::vector< sgpp::base::BoundingBox1D >::value_type const &":
        return _pysgpp_swig.BoundingBox1DVector_back(self)

    def assign(self, n: "std::vector< sgpp::base::BoundingBox1D >::size_type", x: "BoundingBox1D") -> "void":
        return _pysgpp_swig.BoundingBox1DVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::base::BoundingBox1D >::size_type") -> "void":
        return _pysgpp_swig.BoundingBox1DVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::BoundingBox1D >::size_type":
        return _pysgpp_swig.BoundingBox1DVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_BoundingBox1DVector

# Register BoundingBox1DVector in _pysgpp_swig:
_pysgpp_swig.BoundingBox1DVector_swigregister(BoundingBox1DVector)

class Stretching1DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.Stretching1DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.Stretching1DVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.Stretching1DVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::Stretching1D >::size_type":
        return _pysgpp_swig.Stretching1DVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::base::Stretching1D >::difference_type", j: "std::vector< sgpp::base::Stretching1D >::difference_type") -> "std::vector< sgpp::base::Stretching1D,std::allocator< sgpp::base::Stretching1D > > *":
        return _pysgpp_swig.Stretching1DVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::base::Stretching1D >::difference_type", j: "std::vector< sgpp::base::Stretching1D >::difference_type") -> "void":
        return _pysgpp_swig.Stretching1DVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::Stretching1D >::value_type const &":
        return _pysgpp_swig.Stretching1DVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::Stretching1D >::value_type":
        return _pysgpp_swig.Stretching1DVector_pop(self)

    def append(self, x: "Stretching1D") -> "void":
        return _pysgpp_swig.Stretching1DVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.Stretching1DVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::Stretching1D >::size_type":
        return _pysgpp_swig.Stretching1DVector_size(self)

    def swap(self, v: "Stretching1DVector") -> "void":
        return _pysgpp_swig.Stretching1DVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::Stretching1D >::iterator":
        return _pysgpp_swig.Stretching1DVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::Stretching1D >::iterator":
        return _pysgpp_swig.Stretching1DVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::Stretching1D >::reverse_iterator":
        return _pysgpp_swig.Stretching1DVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::Stretching1D >::reverse_iterator":
        return _pysgpp_swig.Stretching1DVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.Stretching1DVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::Stretching1D >::allocator_type":
        return _pysgpp_swig.Stretching1DVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.Stretching1DVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::Stretching1D >::iterator":
        return _pysgpp_swig.Stretching1DVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.Stretching1DVector_swiginit(self, _pysgpp_swig.new_Stretching1DVector(*args))

    def push_back(self, x: "Stretching1D") -> "void":
        return _pysgpp_swig.Stretching1DVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::Stretching1D >::value_type const &":
        return _pysgpp_swig.Stretching1DVector_front(self)

    def back(self) -> "std::vector< sgpp::base::Stretching1D >::value_type const &":
        return _pysgpp_swig.Stretching1DVector_back(self)

    def assign(self, n: "std::vector< sgpp::base::Stretching1D >::size_type", x: "Stretching1D") -> "void":
        return _pysgpp_swig.Stretching1DVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::base::Stretching1D >::size_type") -> "void":
        return _pysgpp_swig.Stretching1DVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::Stretching1D >::size_type":
        return _pysgpp_swig.Stretching1DVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_Stretching1DVector

# Register Stretching1DVector in _pysgpp_swig:
_pysgpp_swig.Stretching1DVector_swigregister(Stretching1DVector)

class ScalarFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        if self.__class__ == ScalarFunction:
            _self = None
        else:
            _self = self
        _pysgpp_swig.ScalarFunction_swiginit(self, _pysgpp_swig.new_ScalarFunction(_self, d))
    __swig_destroy__ = _pysgpp_swig.delete_ScalarFunction

    def eval(self, *args) -> "void":
        return _pysgpp_swig.ScalarFunction_eval(self, *args)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.ScalarFunction_getNumberOfParameters(self)

    def clone(self, clone: "std::unique_ptr< sgpp::base::ScalarFunction > &") -> "void":
        return _pysgpp_swig.ScalarFunction_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_ScalarFunction(self)
        return weakref.proxy(self)

# Register ScalarFunction in _pysgpp_swig:
_pysgpp_swig.ScalarFunction_swigregister(ScalarFunction)

class ScalarFunctionGradient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        if self.__class__ == ScalarFunctionGradient:
            _self = None
        else:
            _self = self
        _pysgpp_swig.ScalarFunctionGradient_swiginit(self, _pysgpp_swig.new_ScalarFunctionGradient(_self, d))
    __swig_destroy__ = _pysgpp_swig.delete_ScalarFunctionGradient

    def eval(self, *args) -> "void":
        return _pysgpp_swig.ScalarFunctionGradient_eval(self, *args)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.ScalarFunctionGradient_getNumberOfParameters(self)

    def clone(self, clone: "std::unique_ptr< sgpp::base::ScalarFunctionGradient > &") -> "void":
        return _pysgpp_swig.ScalarFunctionGradient_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_ScalarFunctionGradient(self)
        return weakref.proxy(self)

# Register ScalarFunctionGradient in _pysgpp_swig:
_pysgpp_swig.ScalarFunctionGradient_swigregister(ScalarFunctionGradient)

class ScalarFunctionHessian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        if self.__class__ == ScalarFunctionHessian:
            _self = None
        else:
            _self = self
        _pysgpp_swig.ScalarFunctionHessian_swiginit(self, _pysgpp_swig.new_ScalarFunctionHessian(_self, d))
    __swig_destroy__ = _pysgpp_swig.delete_ScalarFunctionHessian

    def eval(self, *args) -> "void":
        return _pysgpp_swig.ScalarFunctionHessian_eval(self, *args)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.ScalarFunctionHessian_getNumberOfParameters(self)

    def clone(self, clone: "std::unique_ptr< sgpp::base::ScalarFunctionHessian > &") -> "void":
        return _pysgpp_swig.ScalarFunctionHessian_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_ScalarFunctionHessian(self)
        return weakref.proxy(self)

# Register ScalarFunctionHessian in _pysgpp_swig:
_pysgpp_swig.ScalarFunctionHessian_swigregister(ScalarFunctionHessian)

class InterpolantScalarFunction(ScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", alpha: "DataVector"):
        _pysgpp_swig.InterpolantScalarFunction_swiginit(self, _pysgpp_swig.new_InterpolantScalarFunction(grid, alpha))
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantScalarFunction

    def getAlpha(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.InterpolantScalarFunction_getAlpha(self)

    def setAlpha(self, alpha: "DataVector") -> "void":
        return _pysgpp_swig.InterpolantScalarFunction_setAlpha(self, alpha)

# Register InterpolantScalarFunction in _pysgpp_swig:
_pysgpp_swig.InterpolantScalarFunction_swigregister(InterpolantScalarFunction)

class InterpolantScalarFunctionGradient(ScalarFunctionGradient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", alpha: "DataVector"):
        _pysgpp_swig.InterpolantScalarFunctionGradient_swiginit(self, _pysgpp_swig.new_InterpolantScalarFunctionGradient(grid, alpha))
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantScalarFunctionGradient

    def getAlpha(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.InterpolantScalarFunctionGradient_getAlpha(self)

    def setAlpha(self, alpha: "DataVector") -> "void":
        return _pysgpp_swig.InterpolantScalarFunctionGradient_setAlpha(self, alpha)

# Register InterpolantScalarFunctionGradient in _pysgpp_swig:
_pysgpp_swig.InterpolantScalarFunctionGradient_swigregister(InterpolantScalarFunctionGradient)

class InterpolantScalarFunctionHessian(ScalarFunctionHessian):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", alpha: "DataVector"):
        _pysgpp_swig.InterpolantScalarFunctionHessian_swiginit(self, _pysgpp_swig.new_InterpolantScalarFunctionHessian(grid, alpha))
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantScalarFunctionHessian

    def getAlpha(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.InterpolantScalarFunctionHessian_getAlpha(self)

    def setAlpha(self, alpha: "DataVector") -> "void":
        return _pysgpp_swig.InterpolantScalarFunctionHessian_setAlpha(self, alpha)

# Register InterpolantScalarFunctionHessian in _pysgpp_swig:
_pysgpp_swig.InterpolantScalarFunctionHessian_swigregister(InterpolantScalarFunctionHessian)

class VectorFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", m: "size_t"):
        if self.__class__ == VectorFunction:
            _self = None
        else:
            _self = self
        _pysgpp_swig.VectorFunction_swiginit(self, _pysgpp_swig.new_VectorFunction(_self, d, m))
    __swig_destroy__ = _pysgpp_swig.delete_VectorFunction

    def eval(self, *args) -> "void":
        return _pysgpp_swig.VectorFunction_eval(self, *args)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.VectorFunction_getNumberOfParameters(self)

    def getNumberOfComponents(self) -> "size_t":
        return _pysgpp_swig.VectorFunction_getNumberOfComponents(self)

    def clone(self, clone: "std::unique_ptr< sgpp::base::VectorFunction > &") -> "void":
        return _pysgpp_swig.VectorFunction_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_VectorFunction(self)
        return weakref.proxy(self)

# Register VectorFunction in _pysgpp_swig:
_pysgpp_swig.VectorFunction_swigregister(VectorFunction)

class VectorFunctionGradient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", m: "size_t"):
        if self.__class__ == VectorFunctionGradient:
            _self = None
        else:
            _self = self
        _pysgpp_swig.VectorFunctionGradient_swiginit(self, _pysgpp_swig.new_VectorFunctionGradient(_self, d, m))
    __swig_destroy__ = _pysgpp_swig.delete_VectorFunctionGradient

    def eval(self, x: "DataVector", value: "DataVector", gradient: "DataMatrix") -> "void":
        return _pysgpp_swig.VectorFunctionGradient_eval(self, x, value, gradient)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.VectorFunctionGradient_getNumberOfParameters(self)

    def getNumberOfComponents(self) -> "size_t":
        return _pysgpp_swig.VectorFunctionGradient_getNumberOfComponents(self)

    def clone(self, clone: "std::unique_ptr< sgpp::base::VectorFunctionGradient > &") -> "void":
        return _pysgpp_swig.VectorFunctionGradient_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_VectorFunctionGradient(self)
        return weakref.proxy(self)

# Register VectorFunctionGradient in _pysgpp_swig:
_pysgpp_swig.VectorFunctionGradient_swigregister(VectorFunctionGradient)

class VectorFunctionHessian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", m: "size_t"):
        if self.__class__ == VectorFunctionHessian:
            _self = None
        else:
            _self = self
        _pysgpp_swig.VectorFunctionHessian_swiginit(self, _pysgpp_swig.new_VectorFunctionHessian(_self, d, m))
    __swig_destroy__ = _pysgpp_swig.delete_VectorFunctionHessian

    def eval(self, x: "DataVector", value: "DataVector", gradient: "DataMatrix", hessian: "DataMatrixVector") -> "void":
        return _pysgpp_swig.VectorFunctionHessian_eval(self, x, value, gradient, hessian)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.VectorFunctionHessian_getNumberOfParameters(self)

    def getNumberOfComponents(self) -> "size_t":
        return _pysgpp_swig.VectorFunctionHessian_getNumberOfComponents(self)

    def clone(self, clone: "std::unique_ptr< sgpp::base::VectorFunctionHessian > &") -> "void":
        return _pysgpp_swig.VectorFunctionHessian_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_VectorFunctionHessian(self)
        return weakref.proxy(self)

# Register VectorFunctionHessian in _pysgpp_swig:
_pysgpp_swig.VectorFunctionHessian_swigregister(VectorFunctionHessian)

class InterpolantVectorFunction(VectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", alpha: "DataMatrix"):
        _pysgpp_swig.InterpolantVectorFunction_swiginit(self, _pysgpp_swig.new_InterpolantVectorFunction(grid, alpha))
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantVectorFunction

    def getAlpha(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.InterpolantVectorFunction_getAlpha(self)

    def setAlpha(self, alpha: "DataMatrix") -> "void":
        return _pysgpp_swig.InterpolantVectorFunction_setAlpha(self, alpha)

# Register InterpolantVectorFunction in _pysgpp_swig:
_pysgpp_swig.InterpolantVectorFunction_swigregister(InterpolantVectorFunction)

class InterpolantVectorFunctionGradient(VectorFunctionGradient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", alpha: "DataMatrix"):
        _pysgpp_swig.InterpolantVectorFunctionGradient_swiginit(self, _pysgpp_swig.new_InterpolantVectorFunctionGradient(grid, alpha))
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantVectorFunctionGradient

    def getAlpha(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.InterpolantVectorFunctionGradient_getAlpha(self)

    def setAlpha(self, alpha: "DataMatrix") -> "void":
        return _pysgpp_swig.InterpolantVectorFunctionGradient_setAlpha(self, alpha)

# Register InterpolantVectorFunctionGradient in _pysgpp_swig:
_pysgpp_swig.InterpolantVectorFunctionGradient_swigregister(InterpolantVectorFunctionGradient)

class InterpolantVectorFunctionHessian(VectorFunctionHessian):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", alpha: "DataMatrix"):
        _pysgpp_swig.InterpolantVectorFunctionHessian_swiginit(self, _pysgpp_swig.new_InterpolantVectorFunctionHessian(grid, alpha))
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantVectorFunctionHessian

    def getAlpha(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.InterpolantVectorFunctionHessian_getAlpha(self)

    def setAlpha(self, alpha: "DataMatrix") -> "void":
        return _pysgpp_swig.InterpolantVectorFunctionHessian_setAlpha(self, alpha)

# Register InterpolantVectorFunctionHessian in _pysgpp_swig:
_pysgpp_swig.InterpolantVectorFunctionHessian_swigregister(InterpolantVectorFunctionHessian)

class ComponentScalarFunction(ScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.ComponentScalarFunction_swiginit(self, _pysgpp_swig.new_ComponentScalarFunction(*args))
    __swig_destroy__ = _pysgpp_swig.delete_ComponentScalarFunction

# Register ComponentScalarFunction in _pysgpp_swig:
_pysgpp_swig.ComponentScalarFunction_swigregister(ComponentScalarFunction)

class ComponentScalarFunctionGradient(ScalarFunctionGradient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.ComponentScalarFunctionGradient_swiginit(self, _pysgpp_swig.new_ComponentScalarFunctionGradient(*args))
    __swig_destroy__ = _pysgpp_swig.delete_ComponentScalarFunctionGradient

# Register ComponentScalarFunctionGradient in _pysgpp_swig:
_pysgpp_swig.ComponentScalarFunctionGradient_swigregister(ComponentScalarFunctionGradient)

class ComponentScalarFunctionHessian(ScalarFunctionHessian):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.ComponentScalarFunctionHessian_swiginit(self, _pysgpp_swig.new_ComponentScalarFunctionHessian(*args))
    __swig_destroy__ = _pysgpp_swig.delete_ComponentScalarFunctionHessian

# Register ComponentScalarFunctionHessian in _pysgpp_swig:
_pysgpp_swig.ComponentScalarFunctionHessian_swigregister(ComponentScalarFunctionHessian)

class WrapperScalarFunction(ScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", f: "sgpp::base::WrapperScalarFunction::FunctionEvalType"):
        _pysgpp_swig.WrapperScalarFunction_swiginit(self, _pysgpp_swig.new_WrapperScalarFunction(d, f))
    __swig_destroy__ = _pysgpp_swig.delete_WrapperScalarFunction

# Register WrapperScalarFunction in _pysgpp_swig:
_pysgpp_swig.WrapperScalarFunction_swigregister(WrapperScalarFunction)

class WrapperScalarFunctionGradient(ScalarFunctionGradient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", fGradient: "sgpp::base::WrapperScalarFunctionGradient::FunctionGradientEvalType"):
        _pysgpp_swig.WrapperScalarFunctionGradient_swiginit(self, _pysgpp_swig.new_WrapperScalarFunctionGradient(d, fGradient))
    __swig_destroy__ = _pysgpp_swig.delete_WrapperScalarFunctionGradient

# Register WrapperScalarFunctionGradient in _pysgpp_swig:
_pysgpp_swig.WrapperScalarFunctionGradient_swigregister(WrapperScalarFunctionGradient)

class WrapperScalarFunctionHessian(ScalarFunctionHessian):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", fHessian: "sgpp::base::WrapperScalarFunctionHessian::FunctionHessianEvalType"):
        _pysgpp_swig.WrapperScalarFunctionHessian_swiginit(self, _pysgpp_swig.new_WrapperScalarFunctionHessian(d, fHessian))
    __swig_destroy__ = _pysgpp_swig.delete_WrapperScalarFunctionHessian

# Register WrapperScalarFunctionHessian in _pysgpp_swig:
_pysgpp_swig.WrapperScalarFunctionHessian_swigregister(WrapperScalarFunctionHessian)

class WrapperVectorFunction(VectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", m: "size_t", f: "sgpp::base::WrapperVectorFunction::FunctionEvalType"):
        _pysgpp_swig.WrapperVectorFunction_swiginit(self, _pysgpp_swig.new_WrapperVectorFunction(d, m, f))
    __swig_destroy__ = _pysgpp_swig.delete_WrapperVectorFunction

# Register WrapperVectorFunction in _pysgpp_swig:
_pysgpp_swig.WrapperVectorFunction_swigregister(WrapperVectorFunction)

class WrapperVectorFunctionGradient(VectorFunctionGradient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", m: "size_t", fGradient: "sgpp::base::WrapperVectorFunctionGradient::FunctionGradientEvalType"):
        _pysgpp_swig.WrapperVectorFunctionGradient_swiginit(self, _pysgpp_swig.new_WrapperVectorFunctionGradient(d, m, fGradient))
    __swig_destroy__ = _pysgpp_swig.delete_WrapperVectorFunctionGradient

# Register WrapperVectorFunctionGradient in _pysgpp_swig:
_pysgpp_swig.WrapperVectorFunctionGradient_swigregister(WrapperVectorFunctionGradient)

class WrapperVectorFunctionHessian(VectorFunctionHessian):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", m: "size_t", fHessian: "sgpp::base::WrapperVectorFunctionHessian::FunctionHessianEvalType"):
        _pysgpp_swig.WrapperVectorFunctionHessian_swiginit(self, _pysgpp_swig.new_WrapperVectorFunctionHessian(d, m, fHessian))
    __swig_destroy__ = _pysgpp_swig.delete_WrapperVectorFunctionHessian

# Register WrapperVectorFunctionHessian in _pysgpp_swig:
_pysgpp_swig.WrapperVectorFunctionHessian_swigregister(WrapperVectorFunctionHessian)

class EmptyVectorFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getInstance() -> "sgpp::base::WrapperVectorFunction &":
        return _pysgpp_swig.EmptyVectorFunction_getInstance()
    __swig_destroy__ = _pysgpp_swig.delete_EmptyVectorFunction

# Register EmptyVectorFunction in _pysgpp_swig:
_pysgpp_swig.EmptyVectorFunction_swigregister(EmptyVectorFunction)

def EmptyVectorFunction_getInstance() -> "sgpp::base::WrapperVectorFunction &":
    return _pysgpp_swig.EmptyVectorFunction_getInstance()

class EmptyVectorFunctionGradient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getInstance() -> "sgpp::base::WrapperVectorFunctionGradient &":
        return _pysgpp_swig.EmptyVectorFunctionGradient_getInstance()
    __swig_destroy__ = _pysgpp_swig.delete_EmptyVectorFunctionGradient

# Register EmptyVectorFunctionGradient in _pysgpp_swig:
_pysgpp_swig.EmptyVectorFunctionGradient_swigregister(EmptyVectorFunctionGradient)

def EmptyVectorFunctionGradient_getInstance() -> "sgpp::base::WrapperVectorFunctionGradient &":
    return _pysgpp_swig.EmptyVectorFunctionGradient_getInstance()

class OperationParabolicPDESolverSystem(OperationMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationParabolicPDESolverSystem

    def generateRHS(self) -> "sgpp::base::DataVector *":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_generateRHS(self)

    def finishTimestep(self) -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_finishTimestep(self)

    def coarsenAndRefine(self, isLastTimestep: "bool"=False) -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_coarsenAndRefine(self, isLastTimestep)

    def startTimestep(self) -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_startTimestep(self)

    def getGrid(self) -> "sgpp::base::Grid *":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGrid(self)

    def getGridCoefficientsForCG(self) -> "sgpp::base::DataVector *":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridCoefficientsForCG(self)

    def getGridCoefficients(self) -> "sgpp::base::DataVector *":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridCoefficients(self)

    def setODESolver(self, ode: "std::string") -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_setODESolver(self, ode)

    def getODESolver(self) -> "std::string":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getODESolver(self)

    def getSumGridPointsComplete(self) -> "size_t":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getSumGridPointsComplete(self)

    def getSumGridPointsInner(self) -> "size_t":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getSumGridPointsInner(self)

    def setTimestepSize(self, newTimestepSize: "double") -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_setTimestepSize(self, newTimestepSize)

    def abortTimestep(self) -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_abortTimestep(self)

    def saveAlpha(self) -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_saveAlpha(self)

    def getGridCoefficientsForSC(self, Values: "DataVector") -> "void":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridCoefficientsForSC(self, Values)

    def getGridStorage(self) -> "sgpp::base::GridStorage *":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridStorage(self)

    def getOldGridStorage(self) -> "sgpp::base::GridStorage *":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getOldGridStorage(self)

    def getSecondGridStorage(self) -> "sgpp::base::GridStorage *":
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getSecondGridStorage(self)

# Register OperationParabolicPDESolverSystem in _pysgpp_swig:
_pysgpp_swig.OperationParabolicPDESolverSystem_swigregister(OperationParabolicPDESolverSystem)

class OperationParabolicPDESolverSystemDirichlet(OperationParabolicPDESolverSystem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationParabolicPDESolverSystemDirichlet

# Register OperationParabolicPDESolverSystemDirichlet in _pysgpp_swig:
_pysgpp_swig.OperationParabolicPDESolverSystemDirichlet_swigregister(OperationParabolicPDESolverSystemDirichlet)

class HeatEquationParabolicPDESolverSystem(OperationParabolicPDESolverSystemDirichlet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.HeatEquationParabolicPDESolverSystem_swiginit(self, _pysgpp_swig.new_HeatEquationParabolicPDESolverSystem(*args))
    __swig_destroy__ = _pysgpp_swig.delete_HeatEquationParabolicPDESolverSystem

    def coarsenAndRefine(self, isLastTimestep: "bool"=False) -> "void":
        return _pysgpp_swig.HeatEquationParabolicPDESolverSystem_coarsenAndRefine(self, isLastTimestep)

# Register HeatEquationParabolicPDESolverSystem in _pysgpp_swig:
_pysgpp_swig.HeatEquationParabolicPDESolverSystem_swigregister(HeatEquationParabolicPDESolverSystem)

class PDESolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_PDESolver

    def constructGrid(self, myBoundingBox: "BoundingBox", level: "size_t") -> "void":
        return _pysgpp_swig.PDESolver_constructGrid(self, myBoundingBox, level)

    def setGrid(self, serializedGrid: "std::string const &") -> "void":
        return _pysgpp_swig.PDESolver_setGrid(self, serializedGrid)

    def getGrid(self) -> "std::string":
        return _pysgpp_swig.PDESolver_getGrid(self)

    def deleteGrid(self) -> "void":
        return _pysgpp_swig.PDESolver_deleteGrid(self)

    def refineInitialGridSurplus(self, alpha: "DataVector", numRefinePoints: "int", dThreshold: "double") -> "void":
        return _pysgpp_swig.PDESolver_refineInitialGridSurplus(self, alpha, numRefinePoints, dThreshold)

    def refineInitialGridSurplusToMaxLevel(self, alpha: "DataVector", dThreshold: "double", maxLevel: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.PDESolver_refineInitialGridSurplusToMaxLevel(self, alpha, dThreshold, maxLevel)

    def refineInitialGridSurplusSubDomain(self, alpha: "DataVector", numRefinePoints: "int", dThreshold: "double", norm_mu: "DoubleVector", norm_sigma: "DoubleVector") -> "void":
        return _pysgpp_swig.PDESolver_refineInitialGridSurplusSubDomain(self, alpha, numRefinePoints, dThreshold, norm_mu, norm_sigma)

    def refineInitialGridSurplusToMaxLevelSubDomain(self, alpha: "DataVector", dThreshold: "double", maxLevel: "sgpp::base::level_t", norm_mu: "DoubleVector", norm_sigma: "DoubleVector") -> "void":
        return _pysgpp_swig.PDESolver_refineInitialGridSurplusToMaxLevelSubDomain(self, alpha, dThreshold, maxLevel, norm_mu, norm_sigma)

    def coarsenInitialGridSurplus(self, alpha: "DataVector", dThreshold: "double") -> "void":
        return _pysgpp_swig.PDESolver_coarsenInitialGridSurplus(self, alpha, dThreshold)

    def evaluatePoint(self, evalPoint: "DataVector", alpha: "DataVector") -> "double":
        return _pysgpp_swig.PDESolver_evaluatePoint(self, evalPoint, alpha)

    def evaluateCuboid(self, alpha: "DataVector", FunctionValues: "DataVector", EvaluationPoints: "DataMatrix") -> "void":
        return _pysgpp_swig.PDESolver_evaluateCuboid(self, alpha, FunctionValues, EvaluationPoints)

    def printLevelIndexGrid(self, tfilename: "std::string") -> "void":
        return _pysgpp_swig.PDESolver_printLevelIndexGrid(self, tfilename)

    def printGrid(self, alpha: "DataVector", PointesPerDimension: "size_t", tfilename: "std::string") -> "void":
        return _pysgpp_swig.PDESolver_printGrid(self, alpha, PointesPerDimension, tfilename)

    def printGridDomain(self, alpha: "DataVector", PointesPerDimension: "size_t", GridArea: "BoundingBox", tfilename: "std::string") -> "void":
        return _pysgpp_swig.PDESolver_printGridDomain(self, alpha, PointesPerDimension, GridArea, tfilename)

    def printSparseGrid(self, alpha: "DataVector", tfilename: "std::string", bSurplus: "bool") -> "void":
        return _pysgpp_swig.PDESolver_printSparseGrid(self, alpha, tfilename, bSurplus)

    def printSparseGridExpTransform(self, alpha: "DataVector", tfilename: "std::string", bSurplus: "bool") -> "void":
        return _pysgpp_swig.PDESolver_printSparseGridExpTransform(self, alpha, tfilename, bSurplus)

    def getNumberGridPoints(self) -> "size_t":
        return _pysgpp_swig.PDESolver_getNumberGridPoints(self)

    def getNumberInnerGridPoints(self) -> "size_t":
        return _pysgpp_swig.PDESolver_getNumberInnerGridPoints(self)

    def getNumberDimensions(self) -> "size_t":
        return _pysgpp_swig.PDESolver_getNumberDimensions(self)

# Register PDESolver in _pysgpp_swig:
_pysgpp_swig.PDESolver_swigregister(PDESolver)

class ParabolicPDESolver(PDESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_ParabolicPDESolver

    def solveImplicitEuler(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", verbose: "bool"=False, generateAnimation: "bool"=False) -> "void":
        return _pysgpp_swig.ParabolicPDESolver_solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose, generateAnimation)

    def solveExplicitEuler(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", verbose: "bool"=False, generateAnimation: "bool"=False) -> "void":
        return _pysgpp_swig.ParabolicPDESolver_solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose, generateAnimation)

    def solveCrankNicolson(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", NumImEul: "size_t"=0) -> "void":
        return _pysgpp_swig.ParabolicPDESolver_solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, NumImEul)

# Register ParabolicPDESolver in _pysgpp_swig:
_pysgpp_swig.ParabolicPDESolver_swigregister(ParabolicPDESolver)

class HeatEquationSolver(ParabolicPDESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.HeatEquationSolver_swiginit(self, _pysgpp_swig.new_HeatEquationSolver())
    __swig_destroy__ = _pysgpp_swig.delete_HeatEquationSolver

    def solveExplicitEuler(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", verbose: "bool"=False, generateAnimation: "bool"=False) -> "void":
        return _pysgpp_swig.HeatEquationSolver_solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose, generateAnimation)

    def solveImplicitEuler(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", verbose: "bool"=False, generateAnimation: "bool"=False) -> "void":
        return _pysgpp_swig.HeatEquationSolver_solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose, generateAnimation)

    def solveCrankNicolson(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", NumImEul: "size_t"=0) -> "void":
        return _pysgpp_swig.HeatEquationSolver_solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, NumImEul)

    def setHeatCoefficient(self, a: "double") -> "void":
        return _pysgpp_swig.HeatEquationSolver_setHeatCoefficient(self, a)

    def initGridWithSmoothHeat(self, alpha: "DataVector", mu: "double", sigma: "double", factor: "double") -> "void":
        return _pysgpp_swig.HeatEquationSolver_initGridWithSmoothHeat(self, alpha, mu, sigma, factor)

    def initScreen(self) -> "void":
        return _pysgpp_swig.HeatEquationSolver_initScreen(self)

    def storeInnerRHS(self, alpha: "DataVector", tFilename: "std::string", timestepsize: "double") -> "void":
        return _pysgpp_swig.HeatEquationSolver_storeInnerRHS(self, alpha, tFilename, timestepsize)

    def storeInnerSolution(self, alpha: "DataVector", numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", tFilename: "std::string") -> "void":
        return _pysgpp_swig.HeatEquationSolver_storeInnerSolution(self, alpha, numTimesteps, timestepsize, maxCGIterations, epsilonCG, tFilename)

# Register HeatEquationSolver in _pysgpp_swig:
_pysgpp_swig.HeatEquationSolver_swigregister(HeatEquationSolver)

class HeatEquationSolverWithStretching(ParabolicPDESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.HeatEquationSolverWithStretching_swiginit(self, _pysgpp_swig.new_HeatEquationSolverWithStretching())
    __swig_destroy__ = _pysgpp_swig.delete_HeatEquationSolverWithStretching

    def constructGrid(self, *args) -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_constructGrid(self, *args)

    def solveExplicitEuler(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", verbose: "bool"=False, generateAnimation: "bool"=False) -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose, generateAnimation)

    def solveImplicitEuler(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", verbose: "bool"=False, generateAnimation: "bool"=False) -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose, generateAnimation)

    def solveCrankNicolson(self, numTimesteps: "size_t", timestepsize: "double", maxCGIterations: "size_t", epsilonCG: "double", alpha: "DataVector", NumImEul: "size_t"=0) -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, NumImEul)

    def setHeatCoefficient(self, a: "double") -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_setHeatCoefficient(self, a)

    def initGridWithSmoothHeat(self, alpha: "DataVector", mu: "double", sigma: "double", factor: "double") -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_initGridWithSmoothHeat(self, alpha, mu, sigma, factor)

    def initScreen(self) -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_initScreen(self)

    def printGridDomainStretching(self, alpha: "DataVector", PointesPerDimension: "size_t", GridArea: "Stretching", tfilename: "std::string") -> "void":
        return _pysgpp_swig.HeatEquationSolverWithStretching_printGridDomainStretching(self, alpha, PointesPerDimension, GridArea, tfilename)

# Register HeatEquationSolverWithStretching in _pysgpp_swig:
_pysgpp_swig.HeatEquationSolverWithStretching_swigregister(HeatEquationSolverWithStretching)

class EllipticPDESolver(PDESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_EllipticPDESolver

    def solvePDE(self, alpha: "DataVector", rhs: "DataVector", maxCGIterations: "size_t", epsilonCG: "double", verbose: "bool"=False) -> "void":
        return _pysgpp_swig.EllipticPDESolver_solvePDE(self, alpha, rhs, maxCGIterations, epsilonCG, verbose)

# Register EllipticPDESolver in _pysgpp_swig:
_pysgpp_swig.EllipticPDESolver_swigregister(EllipticPDESolver)

class PoissonEquationSolver(EllipticPDESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.PoissonEquationSolver_swiginit(self, _pysgpp_swig.new_PoissonEquationSolver())
    __swig_destroy__ = _pysgpp_swig.delete_PoissonEquationSolver

    def solvePDE(self, alpha: "DataVector", rhs: "DataVector", maxCGIterations: "size_t", epsilonCG: "double", verbose: "bool"=False) -> "void":
        return _pysgpp_swig.PoissonEquationSolver_solvePDE(self, alpha, rhs, maxCGIterations, epsilonCG, verbose)

    def initGridWithSmoothHeat(self, alpha: "DataVector", mu: "double", sigma: "double", factor: "double") -> "void":
        return _pysgpp_swig.PoissonEquationSolver_initGridWithSmoothHeat(self, alpha, mu, sigma, factor)

    def initGridWithSmoothHeatFullDomain(self, alpha: "DataVector", mu: "double", sigma: "double", factor: "double") -> "void":
        return _pysgpp_swig.PoissonEquationSolver_initGridWithSmoothHeatFullDomain(self, alpha, mu, sigma, factor)

    def initGridWithExpHeat(self, alpha: "DataVector", factor: "double"=1.0) -> "void":
        return _pysgpp_swig.PoissonEquationSolver_initGridWithExpHeat(self, alpha, factor)

    def initGridWithExpHeatFullDomain(self, alpha: "DataVector", factor: "double"=1.0) -> "void":
        return _pysgpp_swig.PoissonEquationSolver_initGridWithExpHeatFullDomain(self, alpha, factor)

    def storeInnerRHS(self, alpha: "DataVector", tFilename: "std::string") -> "void":
        return _pysgpp_swig.PoissonEquationSolver_storeInnerRHS(self, alpha, tFilename)

    def storeInnerSolution(self, alpha: "DataVector", maxCGIterations: "size_t", epsilonCG: "double", tFilename: "std::string") -> "void":
        return _pysgpp_swig.PoissonEquationSolver_storeInnerSolution(self, alpha, maxCGIterations, epsilonCG, tFilename)

    def initScreen(self) -> "void":
        return _pysgpp_swig.PoissonEquationSolver_initScreen(self)

# Register PoissonEquationSolver in _pysgpp_swig:
_pysgpp_swig.PoissonEquationSolver_swigregister(PoissonEquationSolver)


def createOperationLaplace(*args) -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationLaplace(*args)

def createOperationLaplaceExplicit(*args) -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationLaplaceExplicit(*args)

def createOperationLTwoDotProduct(grid: "Grid") -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationLTwoDotProduct(grid)

def createOperationLTwoDotExplicit(*args) -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationLTwoDotExplicit(*args)

def createOperationLaplaceEnhanced(*args) -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationLaplaceEnhanced(*args)
class OperationParabolicPDESolverSystemFreeBoundaries(OperationParabolicPDESolverSystem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationParabolicPDESolverSystemFreeBoundaries

# Register OperationParabolicPDESolverSystemFreeBoundaries in _pysgpp_swig:
_pysgpp_swig.OperationParabolicPDESolverSystemFreeBoundaries_swigregister(OperationParabolicPDESolverSystemFreeBoundaries)

class OperationMatrixLTwoDotExplicitPeriodic(OperationMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationMatrixLTwoDotExplicitPeriodic_swiginit(self, _pysgpp_swig.new_OperationMatrixLTwoDotExplicitPeriodic(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMatrixLTwoDotExplicitPeriodic

# Register OperationMatrixLTwoDotExplicitPeriodic in _pysgpp_swig:
_pysgpp_swig.OperationMatrixLTwoDotExplicitPeriodic_swigregister(OperationMatrixLTwoDotExplicitPeriodic)

class OperationMatrixLTwoDotPeriodic(OperationMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridStorage: "HashGridStorage"):
        _pysgpp_swig.OperationMatrixLTwoDotPeriodic_swiginit(self, _pysgpp_swig.new_OperationMatrixLTwoDotPeriodic(gridStorage))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMatrixLTwoDotPeriodic

# Register OperationMatrixLTwoDotPeriodic in _pysgpp_swig:
_pysgpp_swig.OperationMatrixLTwoDotPeriodic_swigregister(OperationMatrixLTwoDotPeriodic)

class SGSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nMaximumIterations: "size_t", epsilon: "double"):
        _pysgpp_swig.SGSolver_swiginit(self, _pysgpp_swig.new_SGSolver(nMaximumIterations, epsilon))
    __swig_destroy__ = _pysgpp_swig.delete_SGSolver

    def getNumberIterations(self) -> "size_t":
        return _pysgpp_swig.SGSolver_getNumberIterations(self)

    def getResiduum(self) -> "double":
        return _pysgpp_swig.SGSolver_getResiduum(self)

    def setMaxIterations(self, nIterations: "size_t") -> "void":
        return _pysgpp_swig.SGSolver_setMaxIterations(self, nIterations)

    def setEpsilon(self, eps: "double") -> "void":
        return _pysgpp_swig.SGSolver_setEpsilon(self, eps)

    def getEpsilon(self) -> "double":
        return _pysgpp_swig.SGSolver_getEpsilon(self)

# Register SGSolver in _pysgpp_swig:
_pysgpp_swig.SGSolver_swigregister(SGSolver)

DEFAULT_RES_THRESHOLD = _pysgpp_swig.DEFAULT_RES_THRESHOLD
class SolverModuleSLESolver(SGSolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SolverModuleSLESolver

    def solve(self, SystemMatrix: "OperationMatrix", alpha: "DataVector", b: "DataVector", reuse: "bool"=False, verbose: "bool"=False, max_threshold: "double"=-1.0) -> "void":
        return _pysgpp_swig.SolverModuleSLESolver_solve(self, SystemMatrix, alpha, b, reuse, verbose, max_threshold)

# Register SolverModuleSLESolver in _pysgpp_swig:
_pysgpp_swig.SolverModuleSLESolver_swigregister(SolverModuleSLESolver)

class ODESolver(SGSolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_ODESolver

    def solve(self, LinearSystemSolver: "SolverModuleSLESolver", System: "OperationParabolicPDESolverSystem", bIdentifyLastStep: "bool"=False, verbose: "bool"=False) -> "void":
        return _pysgpp_swig.ODESolver_solve(self, LinearSystemSolver, System, bIdentifyLastStep, verbose)

# Register ODESolver in _pysgpp_swig:
_pysgpp_swig.ODESolver_swigregister(ODESolver)

class ConjugateGradients(SolverModuleSLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, imax: "size_t", epsilon: "double"):
        if self.__class__ == ConjugateGradients:
            _self = None
        else:
            _self = self
        _pysgpp_swig.ConjugateGradients_swiginit(self, _pysgpp_swig.new_ConjugateGradients(_self, imax, epsilon))
    __swig_destroy__ = _pysgpp_swig.delete_ConjugateGradients

    def solve(self, SystemMatrix: "OperationMatrix", alpha: "DataVector", b: "DataVector", reuse: "bool"=False, verbose: "bool"=False, max_threshold: "double"=-1.0) -> "void":
        return _pysgpp_swig.ConjugateGradients_solve(self, SystemMatrix, alpha, b, reuse, verbose, max_threshold)

    def starting(self) -> "void":
        return _pysgpp_swig.ConjugateGradients_starting(self)

    def calcStarting(self) -> "void":
        return _pysgpp_swig.ConjugateGradients_calcStarting(self)

    def iterationComplete(self) -> "void":
        return _pysgpp_swig.ConjugateGradients_iterationComplete(self)

    def complete(self) -> "void":
        return _pysgpp_swig.ConjugateGradients_complete(self)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_ConjugateGradients(self)
        return weakref.proxy(self)

# Register ConjugateGradients in _pysgpp_swig:
_pysgpp_swig.ConjugateGradients_swigregister(ConjugateGradients)

class SolverModuleBiCGStab(SolverModuleSLESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, imax: "size_t", epsilon: "double"):
        _pysgpp_swig.SolverModuleBiCGStab_swiginit(self, _pysgpp_swig.new_SolverModuleBiCGStab(imax, epsilon))
    __swig_destroy__ = _pysgpp_swig.delete_SolverModuleBiCGStab

    def solve(self, SystemMatrix: "OperationMatrix", alpha: "DataVector", b: "DataVector", reuse: "bool"=False, verbose: "bool"=False, max_threshold: "double"=-1.0) -> "void":
        return _pysgpp_swig.SolverModuleBiCGStab_solve(self, SystemMatrix, alpha, b, reuse, verbose, max_threshold)

# Register SolverModuleBiCGStab in _pysgpp_swig:
_pysgpp_swig.SolverModuleBiCGStab_swigregister(SolverModuleBiCGStab)

class Euler(ODESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Mode: "std::string", imax: "size_t", timestepSize: "double", generateAnimation: "bool"=False, screen: "ScreenOutput"=None):
        _pysgpp_swig.Euler_swiginit(self, _pysgpp_swig.new_Euler(Mode, imax, timestepSize, generateAnimation, screen))
    __swig_destroy__ = _pysgpp_swig.delete_Euler

    def solve(self, LinearSystemSolver: "SolverModuleSLESolver", System: "OperationParabolicPDESolverSystem", bIdentifyLastStep: "bool"=False, verbose: "bool"=False) -> "void":
        return _pysgpp_swig.Euler_solve(self, LinearSystemSolver, System, bIdentifyLastStep, verbose)

# Register Euler in _pysgpp_swig:
_pysgpp_swig.Euler_swigregister(Euler)

class CrankNicolson(ODESolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nTimesteps: "size_t", timestepSize: "double", screen: "ScreenOutput"=None):
        _pysgpp_swig.CrankNicolson_swiginit(self, _pysgpp_swig.new_CrankNicolson(nTimesteps, timestepSize, screen))
    __swig_destroy__ = _pysgpp_swig.delete_CrankNicolson

    def solve(self, LinearSystemSolver: "SolverModuleSLESolver", System: "OperationParabolicPDESolverSystem", bIdentifyLastStep: "bool"=False, verbose: "bool"=False) -> "void":
        return _pysgpp_swig.CrankNicolson_solve(self, LinearSystemSolver, System, bIdentifyLastStep, verbose)

# Register CrankNicolson in _pysgpp_swig:
_pysgpp_swig.CrankNicolson_swigregister(CrankNicolson)

SLESolverType_CG = _pysgpp_swig.SLESolverType_CG
SLESolverType_BiCGSTAB = _pysgpp_swig.SLESolverType_BiCGSTAB
SLESolverType_FISTA = _pysgpp_swig.SLESolverType_FISTA
class SLESolverConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_ = property(_pysgpp_swig.SLESolverConfiguration_type__get, _pysgpp_swig.SLESolverConfiguration_type__set)
    eps_ = property(_pysgpp_swig.SLESolverConfiguration_eps__get, _pysgpp_swig.SLESolverConfiguration_eps__set)
    maxIterations_ = property(_pysgpp_swig.SLESolverConfiguration_maxIterations__get, _pysgpp_swig.SLESolverConfiguration_maxIterations__set)
    threshold_ = property(_pysgpp_swig.SLESolverConfiguration_threshold__get, _pysgpp_swig.SLESolverConfiguration_threshold__set)
    verbose_ = property(_pysgpp_swig.SLESolverConfiguration_verbose__get, _pysgpp_swig.SLESolverConfiguration_verbose__set)

    def __init__(self):
        _pysgpp_swig.SLESolverConfiguration_swiginit(self, _pysgpp_swig.new_SLESolverConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_SLESolverConfiguration

# Register SLESolverConfiguration in _pysgpp_swig:
_pysgpp_swig.SLESolverConfiguration_swigregister(SLESolverConfiguration)

class SLESolverSPConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_ = property(_pysgpp_swig.SLESolverSPConfiguration_type__get, _pysgpp_swig.SLESolverSPConfiguration_type__set)
    eps_ = property(_pysgpp_swig.SLESolverSPConfiguration_eps__get, _pysgpp_swig.SLESolverSPConfiguration_eps__set)
    maxIterations_ = property(_pysgpp_swig.SLESolverSPConfiguration_maxIterations__get, _pysgpp_swig.SLESolverSPConfiguration_maxIterations__set)
    threshold_ = property(_pysgpp_swig.SLESolverSPConfiguration_threshold__get, _pysgpp_swig.SLESolverSPConfiguration_threshold__set)

    def __init__(self):
        _pysgpp_swig.SLESolverSPConfiguration_swiginit(self, _pysgpp_swig.new_SLESolverSPConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_SLESolverSPConfiguration

# Register SLESolverSPConfiguration in _pysgpp_swig:
_pysgpp_swig.SLESolverSPConfiguration_swigregister(SLESolverSPConfiguration)

class SLESolverTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::solver::SLESolverType":
        return _pysgpp_swig.SLESolverTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::solver::SLESolverType") -> "std::string const &":
        return _pysgpp_swig.SLESolverTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.SLESolverTypeParser_swiginit(self, _pysgpp_swig.new_SLESolverTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_SLESolverTypeParser

# Register SLESolverTypeParser in _pysgpp_swig:
_pysgpp_swig.SLESolverTypeParser_swigregister(SLESolverTypeParser)

def SLESolverTypeParser_parse(input: "std::string const &") -> "sgpp::solver::SLESolverType":
    return _pysgpp_swig.SLESolverTypeParser_parse(input)

def SLESolverTypeParser_toString(type: "sgpp::solver::SLESolverType") -> "std::string const &":
    return _pysgpp_swig.SLESolverTypeParser_toString(type)

class Random(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def seed(*args) -> "void":
        return _pysgpp_swig.Random_seed(*args)

    @staticmethod
    def random_uint64() -> "std::uint64_t":
        return _pysgpp_swig.Random_random_uint64()

    @staticmethod
    def random_double() -> "double":
        return _pysgpp_swig.Random_random_double()

    def __init__(self):
        _pysgpp_swig.Random_swiginit(self, _pysgpp_swig.new_Random())
    __swig_destroy__ = _pysgpp_swig.delete_Random

# Register Random in _pysgpp_swig:
_pysgpp_swig.Random_swigregister(Random)

def Random_seed(*args) -> "void":
    return _pysgpp_swig.Random_seed(*args)

def Random_random_uint64() -> "std::uint64_t":
    return _pysgpp_swig.Random_random_uint64()

def Random_random_double() -> "double":
    return _pysgpp_swig.Random_random_double()

class SampleGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SampleGenerator_swiginit(self, _pysgpp_swig.new_SampleGenerator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SampleGenerator

    def getSample(self, sample: "DataVector") -> "void":
        return _pysgpp_swig.SampleGenerator_getSample(self, sample)

    def getSamples(self, samples: "DataMatrix") -> "void":
        return _pysgpp_swig.SampleGenerator_getSamples(self, samples)

    def getDimensions(self) -> "size_t":
        return _pysgpp_swig.SampleGenerator_getDimensions(self)

    def setDimensions(self, dimensions: "size_t") -> "void":
        return _pysgpp_swig.SampleGenerator_setDimensions(self, dimensions)

# Register SampleGenerator in _pysgpp_swig:
_pysgpp_swig.SampleGenerator_swigregister(SampleGenerator)

class NaiveSampleGenerator(SampleGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.NaiveSampleGenerator_swiginit(self, _pysgpp_swig.new_NaiveSampleGenerator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_NaiveSampleGenerator

# Register NaiveSampleGenerator in _pysgpp_swig:
_pysgpp_swig.NaiveSampleGenerator_swigregister(NaiveSampleGenerator)

class LatinHypercubeSampleGenerator(SampleGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.LatinHypercubeSampleGenerator_swiginit(self, _pysgpp_swig.new_LatinHypercubeSampleGenerator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_LatinHypercubeSampleGenerator

# Register LatinHypercubeSampleGenerator in _pysgpp_swig:
_pysgpp_swig.LatinHypercubeSampleGenerator_swigregister(LatinHypercubeSampleGenerator)

class StratifiedSampleGenerator(SampleGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.StratifiedSampleGenerator_swiginit(self, _pysgpp_swig.new_StratifiedSampleGenerator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_StratifiedSampleGenerator

# Register StratifiedSampleGenerator in _pysgpp_swig:
_pysgpp_swig.StratifiedSampleGenerator_swigregister(StratifiedSampleGenerator)

class HaltonSampleGenerator(SampleGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.HaltonSampleGenerator_swiginit(self, _pysgpp_swig.new_HaltonSampleGenerator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_HaltonSampleGenerator

# Register HaltonSampleGenerator in _pysgpp_swig:
_pysgpp_swig.HaltonSampleGenerator_swigregister(HaltonSampleGenerator)


def createOperationQuadratureMCAdvanced(*args) -> "sgpp::quadrature::OperationQuadratureMCAdvanced *":
    return _pysgpp_swig.createOperationQuadratureMCAdvanced(*args)

def omp_set_num_threads(num_threads: "int") -> "void":
    return _pysgpp_swig.omp_set_num_threads(num_threads)
class OptFuzzyInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NormMode_ViaMembershipFunction = _pysgpp_swig.OptFuzzyInterval_NormMode_ViaMembershipFunction
    NormMode_ViaConfidenceInterval = _pysgpp_swig.OptFuzzyInterval_NormMode_ViaConfidenceInterval
    DEFAULT_NUMBER_OF_INTEGRAL_SAMPLES = _pysgpp_swig.OptFuzzyInterval_DEFAULT_NUMBER_OF_INTEGRAL_SAMPLES

    def __init__(self, *args):
        if self.__class__ == OptFuzzyInterval:
            _self = None
        else:
            _self = self
        _pysgpp_swig.OptFuzzyInterval_swiginit(self, _pysgpp_swig.new_OptFuzzyInterval(_self, *args))
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyInterval

    def evaluateMembershipFunction(self, x: "double") -> "double":
        return _pysgpp_swig.OptFuzzyInterval_evaluateMembershipFunction(self, x)

    def evaluateConfidenceIntervalLowerBound(self, alpha: "double") -> "double":
        return _pysgpp_swig.OptFuzzyInterval_evaluateConfidenceIntervalLowerBound(self, alpha)

    def evaluateConfidenceIntervalUpperBound(self, alpha: "double") -> "double":
        return _pysgpp_swig.OptFuzzyInterval_evaluateConfidenceIntervalUpperBound(self, alpha)

    def computeL1Norm(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeL1Norm(self, *args)

    def computeL2Norm(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeL2Norm(self, *args)

    def computeLinfNorm(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeLinfNorm(self, *args)

    def computeL1Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeL1Error(self, *args)

    def computeL2Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeL2Error(self, *args)

    def computeLinfError(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeLinfError(self, *args)

    def computeRelativeL1Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeRelativeL1Error(self, *args)

    def computeRelativeL2Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeRelativeL2Error(self, *args)

    def computeRelativeLinfError(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_computeRelativeLinfError(self, *args)

    def getSupportLowerBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_getSupportLowerBound(self)

    def getSupportUpperBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_getSupportUpperBound(self)

    def getNumberOfIntegralSamples(self) -> "size_t":
        return _pysgpp_swig.OptFuzzyInterval_getNumberOfIntegralSamples(self)

    def setNumberOfIntegralSamples(self, numberOfIntegralSamples: "size_t") -> "void":
        return _pysgpp_swig.OptFuzzyInterval_setNumberOfIntegralSamples(self, numberOfIntegralSamples)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptFuzzyInterval(self)
        return weakref.proxy(self)

# Register OptFuzzyInterval in _pysgpp_swig:
_pysgpp_swig.OptFuzzyInterval_swigregister(OptFuzzyInterval)

class OptHashRefinementMultiple(HashRefinement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHashRefinementMultiple_swiginit(self, _pysgpp_swig.new_OptHashRefinementMultiple())
    __swig_destroy__ = _pysgpp_swig.delete_OptHashRefinementMultiple

# Register OptHashRefinementMultiple in _pysgpp_swig:
_pysgpp_swig.OptHashRefinementMultiple_swigregister(OptHashRefinementMultiple)

class OptIterativeGridGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f: "ScalarFunction", grid: "Grid", N: "size_t"):
        if self.__class__ == OptIterativeGridGenerator:
            _self = None
        else:
            _self = self
        _pysgpp_swig.OptIterativeGridGenerator_swiginit(self, _pysgpp_swig.new_OptIterativeGridGenerator(_self, f, grid, N))
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGenerator

    def generate(self) -> "bool":
        return _pysgpp_swig.OptIterativeGridGenerator_generate(self)

    def getGrid(self) -> "sgpp::base::Grid &":
        return _pysgpp_swig.OptIterativeGridGenerator_getGrid(self)

    def getFunctionValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptIterativeGridGenerator_getFunctionValues(self)

    def printIterativeGridGenerator(self) -> "void":
        return _pysgpp_swig.OptIterativeGridGenerator_printIterativeGridGenerator(self)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptIterativeGridGenerator(self)
        return weakref.proxy(self)

# Register OptIterativeGridGenerator in _pysgpp_swig:
_pysgpp_swig.OptIterativeGridGenerator_swigregister(OptIterativeGridGenerator)

class OptIterativeGridGeneratorRitterNovak(OptIterativeGridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_ADAPTIVITY
    DEFAULT_INITIAL_LEVEL = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_INITIAL_LEVEL
    DEFAULT_MAX_LEVEL = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_MAX_LEVEL
    PowMethod_STD_POW = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_PowMethod_STD_POW
    PowMethod_FAST_POW = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_PowMethod_FAST_POW

    def __init__(self, *args):
        _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_swiginit(self, _pysgpp_swig.new_OptIterativeGridGeneratorRitterNovak(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorRitterNovak

    def getAdaptivity(self) -> "double":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getAdaptivity(self)

    def setAdaptivity(self, adaptivity: "double") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setAdaptivity(self, adaptivity)

    def getInitialLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getInitialLevel(self)

    def setInitialLevel(self, initialLevel: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setInitialLevel(self, initialLevel)

    def getMaxLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getMaxLevel(self)

    def setMaxLevel(self, maxLevel: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setMaxLevel(self, maxLevel)

    def getPowMethod(self) -> "sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getPowMethod(self)

    def setPowMethod(self, powMethod: "sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setPowMethod(self, powMethod)

# Register OptIterativeGridGeneratorRitterNovak in _pysgpp_swig:
_pysgpp_swig.OptIterativeGridGeneratorRitterNovak_swigregister(OptIterativeGridGeneratorRitterNovak)

class OptIterativeGridGeneratorFuzzyRitterNovak(OptIterativeGridGeneratorRitterNovak):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_NUMBER_OF_ALPHA_SEGMENTS = _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_DEFAULT_NUMBER_OF_ALPHA_SEGMENTS

    def __init__(self, *args):
        _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_swiginit(self, _pysgpp_swig.new_OptIterativeGridGeneratorFuzzyRitterNovak(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorFuzzyRitterNovak

    def getXFuzzy(self) -> "std::vector< sgpp::optimization::FuzzyInterval const *,std::allocator< sgpp::optimization::FuzzyInterval const * > > const &":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_getXFuzzy(self)

    def setXFuzzy(self, xFuzzy: "OptFuzzyIntervalVector") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_setXFuzzy(self, xFuzzy)

    def getNumberOfAlphaSegments(self) -> "size_t":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_getNumberOfAlphaSegments(self)

    def setNumberOfAlphaSegments(self, numberOfAlphaSegments: "size_t") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_setNumberOfAlphaSegments(self, numberOfAlphaSegments)

# Register OptIterativeGridGeneratorFuzzyRitterNovak in _pysgpp_swig:
_pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_swigregister(OptIterativeGridGeneratorFuzzyRitterNovak)

class OptIterativeGridGeneratorLinearSurplus(OptIterativeGridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_DEFAULT_ADAPTIVITY
    DEFAULT_INITIAL_LEVEL = _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_DEFAULT_INITIAL_LEVEL

    def __init__(self, *args):
        _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_swiginit(self, _pysgpp_swig.new_OptIterativeGridGeneratorLinearSurplus(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorLinearSurplus

    def getAdaptivity(self) -> "double":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_getAdaptivity(self)

    def setAdaptivity(self, adaptivity: "double") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_setAdaptivity(self, adaptivity)

    def getInitialLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_getInitialLevel(self)

    def setInitialLevel(self, initialLevel: "sgpp::base::level_t") -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_setInitialLevel(self, initialLevel)

# Register OptIterativeGridGeneratorLinearSurplus in _pysgpp_swig:
_pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_swigregister(OptIterativeGridGeneratorLinearSurplus)

class OptIterativeGridGeneratorSOO(OptIterativeGridGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorSOO_DEFAULT_ADAPTIVITY

    def __init__(self, *args):
        _pysgpp_swig.OptIterativeGridGeneratorSOO_swiginit(self, _pysgpp_swig.new_OptIterativeGridGeneratorSOO(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorSOO

    def getAdaptivity(self) -> "sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction":
        return _pysgpp_swig.OptIterativeGridGeneratorSOO_getAdaptivity(self)

    def setAdaptivity(self, *args) -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorSOO_setAdaptivity(self, *args)

# Register OptIterativeGridGeneratorSOO in _pysgpp_swig:
_pysgpp_swig.OptIterativeGridGeneratorSOO_swigregister(OptIterativeGridGeneratorSOO)

class OperationMultipleHierarchisation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleHierarchisation

    def doHierarchisation(self, *args) -> "bool":
        return _pysgpp_swig.OperationMultipleHierarchisation_doHierarchisation(self, *args)

    def doDehierarchisation(self, *args) -> "void":
        return _pysgpp_swig.OperationMultipleHierarchisation_doDehierarchisation(self, *args)

# Register OperationMultipleHierarchisation in _pysgpp_swig:
_pysgpp_swig.OperationMultipleHierarchisation_swigregister(OperationMultipleHierarchisation)

class OptUnconstrainedOptimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_N = _pysgpp_swig.OptUnconstrainedOptimizer_DEFAULT_N
    __swig_destroy__ = _pysgpp_swig.delete_OptUnconstrainedOptimizer

    def optimize(self) -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_optimize(self)

    def getObjectiveFunction(self) -> "sgpp::base::ScalarFunction &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getObjectiveFunction(self)

    def setObjectiveFunction(self, f: "ScalarFunction") -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setObjectiveFunction(self, f)

    def getObjectiveGradient(self) -> "sgpp::base::ScalarFunctionGradient *":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getObjectiveGradient(self)

    def setObjectiveGradient(self, fGradient: "ScalarFunctionGradient") -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setObjectiveGradient(self, fGradient)

    def getObjectiveHessian(self) -> "sgpp::base::ScalarFunctionHessian *":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getObjectiveHessian(self)

    def setObjectiveHessian(self, fHessian: "ScalarFunctionHessian") -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setObjectiveHessian(self, fHessian)

    def getN(self) -> "size_t":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getN(self)

    def setN(self, N: "size_t") -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setN(self, N)

    def getStartingPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getStartingPoint(self)

    def setStartingPoint(self, startingPoint: "DataVector") -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setStartingPoint(self, startingPoint)

    def getOptimalPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getOptimalPoint(self)

    def getOptimalValue(self) -> "double":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getOptimalValue(self)

    def getHistoryOfOptimalPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getHistoryOfOptimalPoints(self)

    def getHistoryOfOptimalValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getHistoryOfOptimalValues(self)

    def clone(self, clone: "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > &") -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_clone(self, clone)

# Register OptUnconstrainedOptimizer in _pysgpp_swig:
_pysgpp_swig.OptUnconstrainedOptimizer_swigregister(OptUnconstrainedOptimizer)

class OptAdaptiveGradientDescent(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_LINE_SEARCH_ACCURACY

    def __init__(self, *args):
        _pysgpp_swig.OptAdaptiveGradientDescent_swiginit(self, _pysgpp_swig.new_OptAdaptiveGradientDescent(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptAdaptiveGradientDescent

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setTolerance(self, tolerance)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

    def getLineSearchAccuracy(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, lineSearchAccuracy: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setLineSearchAccuracy(self, lineSearchAccuracy)

# Register OptAdaptiveGradientDescent in _pysgpp_swig:
_pysgpp_swig.OptAdaptiveGradientDescent_swigregister(OptAdaptiveGradientDescent)

class OptAdaptiveNewton(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_DAMPING_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_DAMPING_INCREASE_FACTOR
    DEFAULT_DAMPING_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_DAMPING_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_LINE_SEARCH_ACCURACY

    def __init__(self, *args):
        _pysgpp_swig.OptAdaptiveNewton_swiginit(self, _pysgpp_swig.new_OptAdaptiveNewton(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptAdaptiveNewton

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setTolerance(self, tolerance)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

    def getDampingIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getDampingIncreaseFactor(self)

    def setDampingIncreaseFactor(self, dampingIncreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setDampingIncreaseFactor(self, dampingIncreaseFactor)

    def getDampingDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getDampingDecreaseFactor(self)

    def setDampingDecreaseFactor(self, dampingDecreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setDampingDecreaseFactor(self, dampingDecreaseFactor)

    def getLineSearchAccuracy(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, lineSearchAccuracy: "double") -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setLineSearchAccuracy(self, lineSearchAccuracy)

# Register OptAdaptiveNewton in _pysgpp_swig:
_pysgpp_swig.OptAdaptiveNewton_swigregister(OptAdaptiveNewton)

class OptBFGS(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptBFGS_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptBFGS_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptBFGS_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptBFGS_DEFAULT_LINE_SEARCH_ACCURACY

    def __init__(self, *args):
        _pysgpp_swig.OptBFGS_swiginit(self, _pysgpp_swig.new_OptBFGS(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptBFGS

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptBFGS_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptBFGS_setTolerance(self, tolerance)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptBFGS_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptBFGS_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptBFGS_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptBFGS_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

    def getLineSearchAccuracy(self) -> "double":
        return _pysgpp_swig.OptBFGS_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, lineSearchAccuracy: "double") -> "void":
        return _pysgpp_swig.OptBFGS_setLineSearchAccuracy(self, lineSearchAccuracy)

# Register OptBFGS in _pysgpp_swig:
_pysgpp_swig.OptBFGS_swigregister(OptBFGS)

class OptCMAES(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptCMAES_DEFAULT_MAX_FCN_EVAL_COUNT

    def __init__(self, *args):
        _pysgpp_swig.OptCMAES_swiginit(self, _pysgpp_swig.new_OptCMAES(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptCMAES

# Register OptCMAES in _pysgpp_swig:
_pysgpp_swig.OptCMAES_swigregister(OptCMAES)

class OptDifferentialEvolution(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_CROSSOVER_PROBABILITY = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_CROSSOVER_PROBABILITY
    DEFAULT_SCALING_FACTOR = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_SCALING_FACTOR
    DEFAULT_IDLE_GENERATIONS_COUNT = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_IDLE_GENERATIONS_COUNT
    DEFAULT_AVG_IMPROVEMENT_THRESHOLD = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_AVG_IMPROVEMENT_THRESHOLD
    DEFAULT_MAX_DISTANCE_THRESHOLD = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_MAX_DISTANCE_THRESHOLD

    def __init__(self, *args):
        _pysgpp_swig.OptDifferentialEvolution_swiginit(self, _pysgpp_swig.new_OptDifferentialEvolution(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptDifferentialEvolution

    def getPopulationSize(self) -> "size_t":
        return _pysgpp_swig.OptDifferentialEvolution_getPopulationSize(self)

    def setPopulationSize(self, populationSize: "size_t") -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setPopulationSize(self, populationSize)

    def getCrossoverProbability(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getCrossoverProbability(self)

    def setCrossoverProbability(self, crossoverProbability: "double") -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setCrossoverProbability(self, crossoverProbability)

    def getScalingFactor(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getScalingFactor(self)

    def setScalingFactor(self, scalingFactor: "double") -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setScalingFactor(self, scalingFactor)

    def getIdleGenerationsCount(self) -> "size_t":
        return _pysgpp_swig.OptDifferentialEvolution_getIdleGenerationsCount(self)

    def setIdleGenerationsCount(self, idleGenerationsCount: "size_t") -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setIdleGenerationsCount(self, idleGenerationsCount)

    def getAvgImprovementThreshold(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getAvgImprovementThreshold(self)

    def setAvgImprovementThreshold(self, avgImprovementThreshold: "double") -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setAvgImprovementThreshold(self, avgImprovementThreshold)

    def getMaxDistanceThreshold(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getMaxDistanceThreshold(self)

    def setMaxDistanceThreshold(self, maxDistanceThreshold: "double") -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setMaxDistanceThreshold(self, maxDistanceThreshold)

# Register OptDifferentialEvolution in _pysgpp_swig:
_pysgpp_swig.OptDifferentialEvolution_swigregister(OptDifferentialEvolution)

class OptGradientDescent(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_MAX_IT_COUNT = _pysgpp_swig.OptGradientDescent_DEFAULT_MAX_IT_COUNT
    DEFAULT_BETA = _pysgpp_swig.OptGradientDescent_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptGradientDescent_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptGradientDescent_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptGradientDescent_DEFAULT_EPSILON

    def __init__(self, *args):
        _pysgpp_swig.OptGradientDescent_swiginit(self, _pysgpp_swig.new_OptGradientDescent(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptGradientDescent

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getBeta(self)

    def setBeta(self, beta: "double") -> "void":
        return _pysgpp_swig.OptGradientDescent_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getGamma(self)

    def setGamma(self, gamma: "double") -> "void":
        return _pysgpp_swig.OptGradientDescent_setGamma(self, gamma)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptGradientDescent_setTolerance(self, tolerance)

    def getEpsilon(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getEpsilon(self)

    def setEpsilon(self, epsilon: "double") -> "void":
        return _pysgpp_swig.OptGradientDescent_setEpsilon(self, epsilon)

# Register OptGradientDescent in _pysgpp_swig:
_pysgpp_swig.OptGradientDescent_swigregister(OptGradientDescent)

class OptMultiStart(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptMultiStart_DEFAULT_MAX_FCN_EVAL_COUNT

    def __init__(self, *args):
        _pysgpp_swig.OptMultiStart_swiginit(self, _pysgpp_swig.new_OptMultiStart(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptMultiStart

    def getPopulationSize(self) -> "size_t":
        return _pysgpp_swig.OptMultiStart_getPopulationSize(self)

    def setPopulationSize(self, populationSize: "size_t") -> "void":
        return _pysgpp_swig.OptMultiStart_setPopulationSize(self, populationSize)

    def getHistoryOfInnerIterations(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptMultiStart_getHistoryOfInnerIterations(self)

# Register OptMultiStart in _pysgpp_swig:
_pysgpp_swig.OptMultiStart_swigregister(OptMultiStart)

class OptNelderMead(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_ALPHA = _pysgpp_swig.OptNelderMead_DEFAULT_ALPHA
    DEFAULT_BETA = _pysgpp_swig.OptNelderMead_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNelderMead_DEFAULT_GAMMA
    DEFAULT_DELTA = _pysgpp_swig.OptNelderMead_DEFAULT_DELTA
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptNelderMead_DEFAULT_MAX_FCN_EVAL_COUNT
    STARTING_SIMPLEX_EDGE_LENGTH = _pysgpp_swig.OptNelderMead_STARTING_SIMPLEX_EDGE_LENGTH

    def __init__(self, *args):
        _pysgpp_swig.OptNelderMead_swiginit(self, _pysgpp_swig.new_OptNelderMead(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptNelderMead

    def getAlpha(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getAlpha(self)

    def setAlpha(self, alpha: "double") -> "void":
        return _pysgpp_swig.OptNelderMead_setAlpha(self, alpha)

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getBeta(self)

    def setBeta(self, beta: "double") -> "void":
        return _pysgpp_swig.OptNelderMead_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getGamma(self)

    def setGamma(self, gamma: "double") -> "void":
        return _pysgpp_swig.OptNelderMead_setGamma(self, gamma)

    def getDelta(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getDelta(self)

    def setDelta(self, delta: "double") -> "void":
        return _pysgpp_swig.OptNelderMead_setDelta(self, delta)

# Register OptNelderMead in _pysgpp_swig:
_pysgpp_swig.OptNelderMead_swigregister(OptNelderMead)

class OptNewton(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_BETA = _pysgpp_swig.OptNewton_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNewton_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptNewton_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptNewton_DEFAULT_EPSILON
    DEFAULT_ALPHA1 = _pysgpp_swig.OptNewton_DEFAULT_ALPHA1
    DEFAULT_ALPHA2 = _pysgpp_swig.OptNewton_DEFAULT_ALPHA2
    DEFAULT_P = _pysgpp_swig.OptNewton_DEFAULT_P

    def __init__(self, *args):
        _pysgpp_swig.OptNewton_swiginit(self, _pysgpp_swig.new_OptNewton(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptNewton

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptNewton_getBeta(self)

    def setBeta(self, beta: "double") -> "void":
        return _pysgpp_swig.OptNewton_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptNewton_getGamma(self)

    def setGamma(self, gamma: "double") -> "void":
        return _pysgpp_swig.OptNewton_setGamma(self, gamma)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptNewton_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptNewton_setTolerance(self, tolerance)

    def getEpsilon(self) -> "double":
        return _pysgpp_swig.OptNewton_getEpsilon(self)

    def setEpsilon(self, epsilon: "double") -> "void":
        return _pysgpp_swig.OptNewton_setEpsilon(self, epsilon)

    def getAlpha1(self) -> "double":
        return _pysgpp_swig.OptNewton_getAlpha1(self)

    def setAlpha1(self, alpha1: "double") -> "void":
        return _pysgpp_swig.OptNewton_setAlpha1(self, alpha1)

    def getAlpha2(self) -> "double":
        return _pysgpp_swig.OptNewton_getAlpha2(self)

    def setAlpha2(self, alpha2: "double") -> "void":
        return _pysgpp_swig.OptNewton_setAlpha2(self, alpha2)

    def getP(self) -> "double":
        return _pysgpp_swig.OptNewton_getP(self)

    def setP(self, p: "double") -> "void":
        return _pysgpp_swig.OptNewton_setP(self, p)

# Register OptNewton in _pysgpp_swig:
_pysgpp_swig.OptNewton_swigregister(OptNewton)

class OptNLCG(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_BETA = _pysgpp_swig.OptNLCG_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNLCG_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptNLCG_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptNLCG_DEFAULT_EPSILON
    DEFAULT_RESTART_THRESHOLD = _pysgpp_swig.OptNLCG_DEFAULT_RESTART_THRESHOLD

    def __init__(self, *args):
        _pysgpp_swig.OptNLCG_swiginit(self, _pysgpp_swig.new_OptNLCG(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptNLCG

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptNLCG_getBeta(self)

    def setBeta(self, beta: "double") -> "void":
        return _pysgpp_swig.OptNLCG_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptNLCG_getGamma(self)

    def setGamma(self, gamma: "double") -> "void":
        return _pysgpp_swig.OptNLCG_setGamma(self, gamma)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptNLCG_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptNLCG_setTolerance(self, tolerance)

    def getEpsilon(self) -> "double":
        return _pysgpp_swig.OptNLCG_getEpsilon(self)

    def setEpsilon(self, epsilon: "double") -> "void":
        return _pysgpp_swig.OptNLCG_setEpsilon(self, epsilon)

    def getRestartThreshold(self) -> "double":
        return _pysgpp_swig.OptNLCG_getRestartThreshold(self)

    def setRestartThreshold(self, restartThreshold: "double") -> "void":
        return _pysgpp_swig.OptNLCG_setRestartThreshold(self, restartThreshold)

# Register OptNLCG in _pysgpp_swig:
_pysgpp_swig.OptNLCG_swigregister(OptNLCG)

class OptRprop(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptRprop_DEFAULT_TOLERANCE
    DEFAULT_INITIAL_STEP_SIZE = _pysgpp_swig.OptRprop_DEFAULT_INITIAL_STEP_SIZE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptRprop_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptRprop_DEFAULT_STEP_SIZE_DECREASE_FACTOR

    def __init__(self, *args):
        _pysgpp_swig.OptRprop_swiginit(self, _pysgpp_swig.new_OptRprop(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptRprop

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptRprop_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptRprop_setTolerance(self, tolerance)

    def getInitialStepSize(self) -> "double":
        return _pysgpp_swig.OptRprop_getInitialStepSize(self)

    def setInitialStepSize(self, initialStepSize: "double") -> "void":
        return _pysgpp_swig.OptRprop_setInitialStepSize(self, initialStepSize)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptRprop_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptRprop_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptRprop_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptRprop_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

# Register OptRprop in _pysgpp_swig:
_pysgpp_swig.OptRprop_swigregister(OptRprop)

class OptLeastSquaresOptimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_N = _pysgpp_swig.OptLeastSquaresOptimizer_DEFAULT_N
    __swig_destroy__ = _pysgpp_swig.delete_OptLeastSquaresOptimizer

    def optimize(self) -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_optimize(self)

    def getPhiFunction(self) -> "sgpp::base::VectorFunction &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getPhiFunction(self)

    def setPhiFunction(self, phi: "VectorFunction") -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_setPhiFunction(self, phi)

    def getN(self) -> "size_t":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getN(self)

    def setN(self, N: "size_t") -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_setN(self, N)

    def getStartingPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getStartingPoint(self)

    def setStartingPoint(self, startingPoint: "DataVector") -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_setStartingPoint(self, startingPoint)

    def getOptimalPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getOptimalPoint(self)

    def getOptimalValue(self) -> "double":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getOptimalValue(self)

    def getHistoryOfOptimalPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getHistoryOfOptimalPoints(self)

    def getHistoryOfOptimalValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getHistoryOfOptimalValues(self)

    def clone(self, clone: "std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > &") -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_clone(self, clone)

# Register OptLeastSquaresOptimizer in _pysgpp_swig:
_pysgpp_swig.OptLeastSquaresOptimizer_swigregister(OptLeastSquaresOptimizer)

class OptLevenbergMarquardt(OptLeastSquaresOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_TOLERANCE
    DEFAULT_INITIAL_DAMPING = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_INITIAL_DAMPING
    DEFAULT_ACCEPTANCE_THRESHOLD = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_ACCEPTANCE_THRESHOLD
    DEFAULT_EFFECTIVENESS_THRESHOLD = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_EFFECTIVENESS_THRESHOLD

    def __init__(self, *args):
        _pysgpp_swig.OptLevenbergMarquardt_swiginit(self, _pysgpp_swig.new_OptLevenbergMarquardt(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptLevenbergMarquardt

    def getPhiGradient(self) -> "sgpp::base::VectorFunctionGradient &":
        return _pysgpp_swig.OptLevenbergMarquardt_getPhiGradient(self)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setTolerance(self, tolerance)

    def getInitialDamping(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getInitialDamping(self)

    def setInitialDamping(self, initialDamping: "double") -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setInitialDamping(self, initialDamping)

    def getAcceptanceThreshold(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getAcceptanceThreshold(self)

    def setAcceptanceThreshold(self, acceptanceThreshold: "double") -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setAcceptanceThreshold(self, acceptanceThreshold)

    def getEffectivenessThreshold(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getEffectivenessThreshold(self)

    def setEffectivenessThreshold(self, effectivenessThreshold: "double") -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setEffectivenessThreshold(self, effectivenessThreshold)

# Register OptLevenbergMarquardt in _pysgpp_swig:
_pysgpp_swig.OptLevenbergMarquardt_swigregister(OptLevenbergMarquardt)

class OptConstrainedOptimizer(OptUnconstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptConstrainedOptimizer

    def getInequalityConstraintFunction(self) -> "sgpp::base::VectorFunction &":
        return _pysgpp_swig.OptConstrainedOptimizer_getInequalityConstraintFunction(self)

    def setInequalityConstraintFunction(self, g: "VectorFunction") -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setInequalityConstraintFunction(self, g)

    def getInequalityConstraintGradient(self) -> "sgpp::base::VectorFunctionGradient *":
        return _pysgpp_swig.OptConstrainedOptimizer_getInequalityConstraintGradient(self)

    def setInequalityConstraintGradient(self, gGradient: "VectorFunctionGradient") -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setInequalityConstraintGradient(self, gGradient)

    def getEqualityConstraintFunction(self) -> "sgpp::base::VectorFunction &":
        return _pysgpp_swig.OptConstrainedOptimizer_getEqualityConstraintFunction(self)

    def setEqualityConstraintFunction(self, h: "VectorFunction") -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setEqualityConstraintFunction(self, h)

    def getEqualityConstraintGradient(self) -> "sgpp::base::VectorFunctionGradient *":
        return _pysgpp_swig.OptConstrainedOptimizer_getEqualityConstraintGradient(self)

    def setEqualityConstraintGradient(self, hGradient: "VectorFunctionGradient") -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setEqualityConstraintGradient(self, hGradient)

# Register OptConstrainedOptimizer in _pysgpp_swig:
_pysgpp_swig.OptConstrainedOptimizer_swigregister(OptConstrainedOptimizer)

class OptAugmentedLagrangian(OptConstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_X_TOLERANCE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_X_TOLERANCE
    DEFAULT_CONSTRAINT_TOLERANCE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_CONSTRAINT_TOLERANCE
    DEFAULT_PENALTY_START_VALUE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_PENALTY_START_VALUE
    DEFAULT_PENALTY_INCREASE_FACTOR = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_PENALTY_INCREASE_FACTOR

    def __init__(self, *args):
        _pysgpp_swig.OptAugmentedLagrangian_swiginit(self, _pysgpp_swig.new_OptAugmentedLagrangian(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptAugmentedLagrangian

    def findFeasiblePoint(self) -> "sgpp::base::DataVector":
        return _pysgpp_swig.OptAugmentedLagrangian_findFeasiblePoint(self)

    def getXTolerance(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getXTolerance(self)

    def setXTolerance(self, xTolerance: "double") -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setXTolerance(self, xTolerance)

    def getConstraintTolerance(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getConstraintTolerance(self)

    def setConstraintTolerance(self, constraintTolerance: "double") -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setConstraintTolerance(self, constraintTolerance)

    def getPenaltyStartValue(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getPenaltyStartValue(self)

    def setPenaltyStartValue(self, penaltyStartValue: "double") -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setPenaltyStartValue(self, penaltyStartValue)

    def getPenaltyIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getPenaltyIncreaseFactor(self)

    def setPenaltyIncreaseFactor(self, penaltyIncreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setPenaltyIncreaseFactor(self, penaltyIncreaseFactor)

    def getHistoryOfInnerIterationPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptAugmentedLagrangian_getHistoryOfInnerIterationPoints(self)

    def getHistoryOfInnerIterationNumbers(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptAugmentedLagrangian_getHistoryOfInnerIterationNumbers(self)

# Register OptAugmentedLagrangian in _pysgpp_swig:
_pysgpp_swig.OptAugmentedLagrangian_swigregister(OptAugmentedLagrangian)

class OptLogBarrier(OptConstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptLogBarrier_DEFAULT_TOLERANCE
    DEFAULT_BARRIER_START_VALUE = _pysgpp_swig.OptLogBarrier_DEFAULT_BARRIER_START_VALUE
    DEFAULT_BARRIER_DECREASE_FACTOR = _pysgpp_swig.OptLogBarrier_DEFAULT_BARRIER_DECREASE_FACTOR

    def __init__(self, *args):
        _pysgpp_swig.OptLogBarrier_swiginit(self, _pysgpp_swig.new_OptLogBarrier(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptLogBarrier

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptLogBarrier_getTolerance(self)

    def setTolerance(self, tolerance: "double") -> "void":
        return _pysgpp_swig.OptLogBarrier_setTolerance(self, tolerance)

    def getBarrierStartValue(self) -> "double":
        return _pysgpp_swig.OptLogBarrier_getBarrierStartValue(self)

    def setBarrierStartValue(self, barrierStartValue: "double") -> "void":
        return _pysgpp_swig.OptLogBarrier_setBarrierStartValue(self, barrierStartValue)

    def getBarrierDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptLogBarrier_getBarrierDecreaseFactor(self)

    def setBarrierDecreaseFactor(self, barrierDecreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptLogBarrier_setBarrierDecreaseFactor(self, barrierDecreaseFactor)

    def getHistoryOfInnerIterationPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptLogBarrier_getHistoryOfInnerIterationPoints(self)

    def getHistoryOfInnerIterationNumbers(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptLogBarrier_getHistoryOfInnerIterationNumbers(self)

# Register OptLogBarrier in _pysgpp_swig:
_pysgpp_swig.OptLogBarrier_swigregister(OptLogBarrier)

class OptSquaredPenalty(OptConstrainedOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_X_TOLERANCE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_X_TOLERANCE
    DEFAULT_CONSTRAINT_TOLERANCE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_CONSTRAINT_TOLERANCE
    DEFAULT_PENALTY_START_VALUE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_PENALTY_START_VALUE
    DEFAULT_PENALTY_INCREASE_FACTOR = _pysgpp_swig.OptSquaredPenalty_DEFAULT_PENALTY_INCREASE_FACTOR

    def __init__(self, *args):
        _pysgpp_swig.OptSquaredPenalty_swiginit(self, _pysgpp_swig.new_OptSquaredPenalty(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptSquaredPenalty

    def getXTolerance(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getXTolerance(self)

    def setXTolerance(self, xTolerance: "double") -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setXTolerance(self, xTolerance)

    def getConstraintTolerance(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getConstraintTolerance(self)

    def setConstraintTolerance(self, constraintTolerance: "double") -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setConstraintTolerance(self, constraintTolerance)

    def getPenaltyStartValue(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getPenaltyStartValue(self)

    def setPenaltyStartValue(self, penaltyStartValue: "double") -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setPenaltyStartValue(self, penaltyStartValue)

    def getPenaltyIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getPenaltyIncreaseFactor(self)

    def setPenaltyIncreaseFactor(self, penaltyIncreaseFactor: "double") -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setPenaltyIncreaseFactor(self, penaltyIncreaseFactor)

    def getHistoryOfInnerIterationPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptSquaredPenalty_getHistoryOfInnerIterationPoints(self)

    def getHistoryOfInnerIterationNumbers(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptSquaredPenalty_getHistoryOfInnerIterationNumbers(self)

# Register OptSquaredPenalty in _pysgpp_swig:
_pysgpp_swig.OptSquaredPenalty_swigregister(OptSquaredPenalty)

class OptFuzzyExtensionPrinciple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_NUMBER_OF_ALPHA_SEGMENTS = _pysgpp_swig.OptFuzzyExtensionPrinciple_DEFAULT_NUMBER_OF_ALPHA_SEGMENTS
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrinciple

    def apply(self, xFuzzy: "OptFuzzyIntervalVector") -> "sgpp::optimization::FuzzyInterval *":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_apply(self, xFuzzy)

    def getNumberOfAlphaSegments(self) -> "size_t":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getNumberOfAlphaSegments(self)

    def setNumberOfAlphaSegments(self, numberOfAlphaSegments: "size_t") -> "void":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_setNumberOfAlphaSegments(self, numberOfAlphaSegments)

    def getAlphaLevels(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getAlphaLevels(self)

    def getOptimizationDomainsLowerBounds(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getOptimizationDomainsLowerBounds(self)

    def getOptimizationDomainsUpperBounds(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getOptimizationDomainsUpperBounds(self)

    def getMinimumPoints(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMinimumPoints(self)

    def getMinimumValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMinimumValues(self)

    def getMaximumPoints(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMaximumPoints(self)

    def getMaximumValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMaximumValues(self)

    def clone(self, clone: "std::unique_ptr< sgpp::optimization::FuzzyExtensionPrinciple > &") -> "void":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_clone(self, clone)

# Register OptFuzzyExtensionPrinciple in _pysgpp_swig:
_pysgpp_swig.OptFuzzyExtensionPrinciple_swigregister(OptFuzzyExtensionPrinciple)

class OptFuzzyExtensionPrincipleViaOptimization(OptFuzzyExtensionPrinciple):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OptFuzzyExtensionPrincipleViaOptimization_swiginit(self, _pysgpp_swig.new_OptFuzzyExtensionPrincipleViaOptimization(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrincipleViaOptimization

# Register OptFuzzyExtensionPrincipleViaOptimization in _pysgpp_swig:
_pysgpp_swig.OptFuzzyExtensionPrincipleViaOptimization_swigregister(OptFuzzyExtensionPrincipleViaOptimization)

class OptFuzzyExtensionPrincipleViaTransformation(OptFuzzyExtensionPrincipleViaOptimization):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OptFuzzyExtensionPrincipleViaTransformation_swiginit(self, _pysgpp_swig.new_OptFuzzyExtensionPrincipleViaTransformation(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrincipleViaTransformation

# Register OptFuzzyExtensionPrincipleViaTransformation in _pysgpp_swig:
_pysgpp_swig.OptFuzzyExtensionPrincipleViaTransformation_swigregister(OptFuzzyExtensionPrincipleViaTransformation)

class OptFuzzyExtensionPrincipleViaVertexMethod(OptFuzzyExtensionPrincipleViaOptimization):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OptFuzzyExtensionPrincipleViaVertexMethod_swiginit(self, _pysgpp_swig.new_OptFuzzyExtensionPrincipleViaVertexMethod(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrincipleViaVertexMethod

# Register OptFuzzyExtensionPrincipleViaVertexMethod in _pysgpp_swig:
_pysgpp_swig.OptFuzzyExtensionPrincipleViaVertexMethod_swigregister(OptFuzzyExtensionPrincipleViaVertexMethod)

class OptFuzzyIntervalViaConfidenceInterval(OptFuzzyInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_BINARY_SEARCH_TOLERANCE = _pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_DEFAULT_BINARY_SEARCH_TOLERANCE

    def __init__(self, *args):
        if self.__class__ == OptFuzzyIntervalViaConfidenceInterval:
            _self = None
        else:
            _self = self
        _pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_swiginit(self, _pysgpp_swig.new_OptFuzzyIntervalViaConfidenceInterval(_self, *args))
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyIntervalViaConfidenceInterval

    def evaluateMembershipFunction(self, x: "double") -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_evaluateMembershipFunction(self, x)

    def getBinarySearchTolerance(self) -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_getBinarySearchTolerance(self)

    def setBinarySearchTolerance(self, binarySearchTolerance: "double") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_setBinarySearchTolerance(self, binarySearchTolerance)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptFuzzyIntervalViaConfidenceInterval(self)
        return weakref.proxy(self)

# Register OptFuzzyIntervalViaConfidenceInterval in _pysgpp_swig:
_pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_swigregister(OptFuzzyIntervalViaConfidenceInterval)

class OptFuzzyIntervalViaMembershipFunction(OptFuzzyInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_BINARY_SEARCH_TOLERANCE = _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_DEFAULT_BINARY_SEARCH_TOLERANCE

    def __init__(self, *args):
        if self.__class__ == OptFuzzyIntervalViaMembershipFunction:
            _self = None
        else:
            _self = self
        _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_swiginit(self, _pysgpp_swig.new_OptFuzzyIntervalViaMembershipFunction(_self, *args))
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyIntervalViaMembershipFunction

    def evaluateConfidenceIntervalLowerBound(self, alpha: "double") -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_evaluateConfidenceIntervalLowerBound(self, alpha)

    def evaluateConfidenceIntervalUpperBound(self, alpha: "double") -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_evaluateConfidenceIntervalUpperBound(self, alpha)

    def getCoreLowerBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_getCoreLowerBound(self)

    def getCoreUpperBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_getCoreUpperBound(self)

    def getBinarySearchTolerance(self) -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_getBinarySearchTolerance(self)

    def setBinarySearchTolerance(self, binarySearchTolerance: "double") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_setBinarySearchTolerance(self, binarySearchTolerance)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptFuzzyIntervalViaMembershipFunction(self)
        return weakref.proxy(self)

# Register OptFuzzyIntervalViaMembershipFunction in _pysgpp_swig:
_pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_swigregister(OptFuzzyIntervalViaMembershipFunction)

class OptInterpolatedFuzzyInterval(OptFuzzyIntervalViaMembershipFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getCoreLowerBound(xData: "DataVector", alphaData: "DataVector") -> "double":
        return _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreLowerBound(xData, alphaData)

    @staticmethod
    def getCoreUpperBound(xData: "DataVector", alphaData: "DataVector") -> "double":
        return _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreUpperBound(xData, alphaData)

    @staticmethod
    def tryDowncast(fuzzyInterval: "OptFuzzyInterval") -> "sgpp::optimization::InterpolatedFuzzyInterval *":
        return _pysgpp_swig.OptInterpolatedFuzzyInterval_tryDowncast(fuzzyInterval)

    def __init__(self, *args):
        _pysgpp_swig.OptInterpolatedFuzzyInterval_swiginit(self, _pysgpp_swig.new_OptInterpolatedFuzzyInterval(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolatedFuzzyInterval

    def getXData(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptInterpolatedFuzzyInterval_getXData(self)

    def getAlphaData(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptInterpolatedFuzzyInterval_getAlphaData(self)

# Register OptInterpolatedFuzzyInterval in _pysgpp_swig:
_pysgpp_swig.OptInterpolatedFuzzyInterval_swigregister(OptInterpolatedFuzzyInterval)

def OptInterpolatedFuzzyInterval_getCoreLowerBound(xData: "DataVector", alphaData: "DataVector") -> "double":
    return _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreLowerBound(xData, alphaData)

def OptInterpolatedFuzzyInterval_getCoreUpperBound(xData: "DataVector", alphaData: "DataVector") -> "double":
    return _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreUpperBound(xData, alphaData)

def OptInterpolatedFuzzyInterval_tryDowncast(fuzzyInterval: "OptFuzzyInterval") -> "sgpp::optimization::InterpolatedFuzzyInterval *":
    return _pysgpp_swig.OptInterpolatedFuzzyInterval_tryDowncast(fuzzyInterval)

class OptQuasiGaussianFuzzyNumber(OptFuzzyIntervalViaMembershipFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OptQuasiGaussianFuzzyNumber_swiginit(self, _pysgpp_swig.new_OptQuasiGaussianFuzzyNumber(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptQuasiGaussianFuzzyNumber

    def getMean(self) -> "double":
        return _pysgpp_swig.OptQuasiGaussianFuzzyNumber_getMean(self)

    def getStdev(self) -> "double":
        return _pysgpp_swig.OptQuasiGaussianFuzzyNumber_getStdev(self)

    def getCutoff(self) -> "double":
        return _pysgpp_swig.OptQuasiGaussianFuzzyNumber_getCutoff(self)

# Register OptQuasiGaussianFuzzyNumber in _pysgpp_swig:
_pysgpp_swig.OptQuasiGaussianFuzzyNumber_swigregister(OptQuasiGaussianFuzzyNumber)

class OptTriangularFuzzyInterval(OptFuzzyInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OptTriangularFuzzyInterval_swiginit(self, _pysgpp_swig.new_OptTriangularFuzzyInterval(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OptTriangularFuzzyInterval

    def getLeftMean(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getLeftMean(self)

    def getRightMean(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getRightMean(self)

    def getLeftSpread(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getLeftSpread(self)

    def getRightSpread(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getRightSpread(self)

# Register OptTriangularFuzzyInterval in _pysgpp_swig:
_pysgpp_swig.OptTriangularFuzzyInterval_swigregister(OptTriangularFuzzyInterval)

class OptTestScalarFunction(ScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptTestScalarFunction

    def evalUndisplaced(self, x: "DataVector") -> "double":
        return _pysgpp_swig.OptTestScalarFunction_evalUndisplaced(self, x)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptTestScalarFunction_getDisplacement(self)

    def setDisplacement(self, displacement: "DataVector") -> "void":
        return _pysgpp_swig.OptTestScalarFunction_setDisplacement(self, displacement)

# Register OptTestScalarFunction in _pysgpp_swig:
_pysgpp_swig.OptTestScalarFunction_swigregister(OptTestScalarFunction)

class OptTestVectorFunction(VectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptTestVectorFunction

    def evalUndisplaced(self, x: "DataVector", value: "DataVector") -> "void":
        return _pysgpp_swig.OptTestVectorFunction_evalUndisplaced(self, x, value)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptTestVectorFunction_getDisplacement(self)

    def setDisplacement(self, displacement: "DataVector") -> "void":
        return _pysgpp_swig.OptTestVectorFunction_setDisplacement(self, displacement)

# Register OptTestVectorFunction in _pysgpp_swig:
_pysgpp_swig.OptTestVectorFunction_swigregister(OptTestVectorFunction)

class OptUnconstrainedTestProblem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_STANDARD_DEVIATION = _pysgpp_swig.OptUnconstrainedTestProblem_DEFAULT_STANDARD_DEVIATION
    __swig_destroy__ = _pysgpp_swig.delete_OptUnconstrainedTestProblem

    def getObjectiveFunction(self) -> "sgpp::optimization::test_problems::TestScalarFunction &":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getObjectiveFunction(self)

    def getOptimalPoint(self, x: "DataVector") -> "double":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getOptimalPoint(self, x)

    def getOptimalPointUndisplaced(self, x: "DataVector") -> "double":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getOptimalPointUndisplaced(self, x)

    def generateDisplacement(self, *args) -> "void":
        return _pysgpp_swig.OptUnconstrainedTestProblem_generateDisplacement(self, *args)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getDisplacement(self)

    def setDisplacement(self, displacement: "DataVector") -> "void":
        return _pysgpp_swig.OptUnconstrainedTestProblem_setDisplacement(self, displacement)

# Register OptUnconstrainedTestProblem in _pysgpp_swig:
_pysgpp_swig.OptUnconstrainedTestProblem_swigregister(OptUnconstrainedTestProblem)

class AbsoluteValueObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.AbsoluteValueObjective_swiginit(self, _pysgpp_swig.new_AbsoluteValueObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_AbsoluteValueObjective

# Register AbsoluteValueObjective in _pysgpp_swig:
_pysgpp_swig.AbsoluteValueObjective_swigregister(AbsoluteValueObjective)

class OptAbsoluteValueObjective(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptAbsoluteValueObjective_swiginit(self, _pysgpp_swig.new_OptAbsoluteValueObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptAbsoluteValueObjective

# Register OptAbsoluteValueObjective in _pysgpp_swig:
_pysgpp_swig.OptAbsoluteValueObjective_swigregister(OptAbsoluteValueObjective)

class OptAckleyObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptAckleyObjective_swiginit(self, _pysgpp_swig.new_OptAckleyObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptAckleyObjective

# Register OptAckleyObjective in _pysgpp_swig:
_pysgpp_swig.OptAckleyObjective_swigregister(OptAckleyObjective)

class OptAckley(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptAckley_swiginit(self, _pysgpp_swig.new_OptAckley(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptAckley

# Register OptAckley in _pysgpp_swig:
_pysgpp_swig.OptAckley_swigregister(OptAckley)

class OptAlpine02Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptAlpine02Objective_swiginit(self, _pysgpp_swig.new_OptAlpine02Objective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptAlpine02Objective

# Register OptAlpine02Objective in _pysgpp_swig:
_pysgpp_swig.OptAlpine02Objective_swigregister(OptAlpine02Objective)

class OptAlpine02(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptAlpine02_swiginit(self, _pysgpp_swig.new_OptAlpine02(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptAlpine02

# Register OptAlpine02 in _pysgpp_swig:
_pysgpp_swig.OptAlpine02_swigregister(OptAlpine02)

class OptBealeObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptBealeObjective_swiginit(self, _pysgpp_swig.new_OptBealeObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptBealeObjective

# Register OptBealeObjective in _pysgpp_swig:
_pysgpp_swig.OptBealeObjective_swigregister(OptBealeObjective)

class OptBeale(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptBeale_swiginit(self, _pysgpp_swig.new_OptBeale())
    __swig_destroy__ = _pysgpp_swig.delete_OptBeale

# Register OptBeale in _pysgpp_swig:
_pysgpp_swig.OptBeale_swigregister(OptBeale)

class OptBranin01Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptBranin01Objective_swiginit(self, _pysgpp_swig.new_OptBranin01Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin01Objective

# Register OptBranin01Objective in _pysgpp_swig:
_pysgpp_swig.OptBranin01Objective_swigregister(OptBranin01Objective)

class OptBranin01(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptBranin01_swiginit(self, _pysgpp_swig.new_OptBranin01())
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin01

# Register OptBranin01 in _pysgpp_swig:
_pysgpp_swig.OptBranin01_swigregister(OptBranin01)

class OptBranin02Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptBranin02Objective_swiginit(self, _pysgpp_swig.new_OptBranin02Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin02Objective

# Register OptBranin02Objective in _pysgpp_swig:
_pysgpp_swig.OptBranin02Objective_swigregister(OptBranin02Objective)

class OptBranin02(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptBranin02_swiginit(self, _pysgpp_swig.new_OptBranin02())
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin02

# Register OptBranin02 in _pysgpp_swig:
_pysgpp_swig.OptBranin02_swigregister(OptBranin02)

class OptBubbleWrapObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptBubbleWrapObjective_swiginit(self, _pysgpp_swig.new_OptBubbleWrapObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptBubbleWrapObjective

# Register OptBubbleWrapObjective in _pysgpp_swig:
_pysgpp_swig.OptBubbleWrapObjective_swigregister(OptBubbleWrapObjective)

class OptBubbleWrap(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptBubbleWrap_swiginit(self, _pysgpp_swig.new_OptBubbleWrap(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptBubbleWrap

# Register OptBubbleWrap in _pysgpp_swig:
_pysgpp_swig.OptBubbleWrap_swigregister(OptBubbleWrap)

class OptEasomYangObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptEasomYangObjective_swiginit(self, _pysgpp_swig.new_OptEasomYangObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptEasomYangObjective

# Register OptEasomYangObjective in _pysgpp_swig:
_pysgpp_swig.OptEasomYangObjective_swigregister(OptEasomYangObjective)

class OptEasomYang(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptEasomYang_swiginit(self, _pysgpp_swig.new_OptEasomYang(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptEasomYang

# Register OptEasomYang in _pysgpp_swig:
_pysgpp_swig.OptEasomYang_swigregister(OptEasomYang)

class OptEggholderObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptEggholderObjective_swiginit(self, _pysgpp_swig.new_OptEggholderObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptEggholderObjective

# Register OptEggholderObjective in _pysgpp_swig:
_pysgpp_swig.OptEggholderObjective_swigregister(OptEggholderObjective)

class OptEggholder(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptEggholder_swiginit(self, _pysgpp_swig.new_OptEggholder())
    __swig_destroy__ = _pysgpp_swig.delete_OptEggholder

# Register OptEggholder in _pysgpp_swig:
_pysgpp_swig.OptEggholder_swigregister(OptEggholder)

class OptGoldsteinPriceObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptGoldsteinPriceObjective_swiginit(self, _pysgpp_swig.new_OptGoldsteinPriceObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptGoldsteinPriceObjective

# Register OptGoldsteinPriceObjective in _pysgpp_swig:
_pysgpp_swig.OptGoldsteinPriceObjective_swigregister(OptGoldsteinPriceObjective)

class OptGoldsteinPrice(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptGoldsteinPrice_swiginit(self, _pysgpp_swig.new_OptGoldsteinPrice())
    __swig_destroy__ = _pysgpp_swig.delete_OptGoldsteinPrice

# Register OptGoldsteinPrice in _pysgpp_swig:
_pysgpp_swig.OptGoldsteinPrice_swigregister(OptGoldsteinPrice)

class OptGriewankObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptGriewankObjective_swiginit(self, _pysgpp_swig.new_OptGriewankObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptGriewankObjective

# Register OptGriewankObjective in _pysgpp_swig:
_pysgpp_swig.OptGriewankObjective_swigregister(OptGriewankObjective)

class OptGriewank(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptGriewank_swiginit(self, _pysgpp_swig.new_OptGriewank(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptGriewank

# Register OptGriewank in _pysgpp_swig:
_pysgpp_swig.OptGriewank_swigregister(OptGriewank)

class OptHartman3Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHartman3Objective_swiginit(self, _pysgpp_swig.new_OptHartman3Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman3Objective

# Register OptHartman3Objective in _pysgpp_swig:
_pysgpp_swig.OptHartman3Objective_swigregister(OptHartman3Objective)

class OptHartman3(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHartman3_swiginit(self, _pysgpp_swig.new_OptHartman3())
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman3

# Register OptHartman3 in _pysgpp_swig:
_pysgpp_swig.OptHartman3_swigregister(OptHartman3)

class OptHartman6Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHartman6Objective_swiginit(self, _pysgpp_swig.new_OptHartman6Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman6Objective

# Register OptHartman6Objective in _pysgpp_swig:
_pysgpp_swig.OptHartman6Objective_swigregister(OptHartman6Objective)

class OptHartman6(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHartman6_swiginit(self, _pysgpp_swig.new_OptHartman6())
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman6

# Register OptHartman6 in _pysgpp_swig:
_pysgpp_swig.OptHartman6_swigregister(OptHartman6)

class OptHimmelblauObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHimmelblauObjective_swiginit(self, _pysgpp_swig.new_OptHimmelblauObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptHimmelblauObjective

# Register OptHimmelblauObjective in _pysgpp_swig:
_pysgpp_swig.OptHimmelblauObjective_swigregister(OptHimmelblauObjective)

class OptHimmelblau(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHimmelblau_swiginit(self, _pysgpp_swig.new_OptHimmelblau())
    __swig_destroy__ = _pysgpp_swig.delete_OptHimmelblau

# Register OptHimmelblau in _pysgpp_swig:
_pysgpp_swig.OptHimmelblau_swigregister(OptHimmelblau)

class OptHoelderTableObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHoelderTableObjective_swiginit(self, _pysgpp_swig.new_OptHoelderTableObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptHoelderTableObjective

# Register OptHoelderTableObjective in _pysgpp_swig:
_pysgpp_swig.OptHoelderTableObjective_swigregister(OptHoelderTableObjective)

class OptHoelderTable(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptHoelderTable_swiginit(self, _pysgpp_swig.new_OptHoelderTable())
    __swig_destroy__ = _pysgpp_swig.delete_OptHoelderTable

# Register OptHoelderTable in _pysgpp_swig:
_pysgpp_swig.OptHoelderTable_swigregister(OptHoelderTable)

class OptIncreasingPowerObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptIncreasingPowerObjective_swiginit(self, _pysgpp_swig.new_OptIncreasingPowerObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptIncreasingPowerObjective

# Register OptIncreasingPowerObjective in _pysgpp_swig:
_pysgpp_swig.OptIncreasingPowerObjective_swigregister(OptIncreasingPowerObjective)

class OptIncreasingPower(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptIncreasingPower_swiginit(self, _pysgpp_swig.new_OptIncreasingPower(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptIncreasingPower

# Register OptIncreasingPower in _pysgpp_swig:
_pysgpp_swig.OptIncreasingPower_swigregister(OptIncreasingPower)

class OptMichalewiczObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptMichalewiczObjective_swiginit(self, _pysgpp_swig.new_OptMichalewiczObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptMichalewiczObjective

# Register OptMichalewiczObjective in _pysgpp_swig:
_pysgpp_swig.OptMichalewiczObjective_swigregister(OptMichalewiczObjective)

class OptMichalewicz(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptMichalewicz_swiginit(self, _pysgpp_swig.new_OptMichalewicz())
    __swig_destroy__ = _pysgpp_swig.delete_OptMichalewicz

# Register OptMichalewicz in _pysgpp_swig:
_pysgpp_swig.OptMichalewicz_swigregister(OptMichalewicz)

class OptMladineoObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptMladineoObjective_swiginit(self, _pysgpp_swig.new_OptMladineoObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptMladineoObjective

# Register OptMladineoObjective in _pysgpp_swig:
_pysgpp_swig.OptMladineoObjective_swigregister(OptMladineoObjective)

class OptMladineo(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptMladineo_swiginit(self, _pysgpp_swig.new_OptMladineo())
    __swig_destroy__ = _pysgpp_swig.delete_OptMladineo

# Register OptMladineo in _pysgpp_swig:
_pysgpp_swig.OptMladineo_swigregister(OptMladineo)

class OptPermObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptPermObjective_swiginit(self, _pysgpp_swig.new_OptPermObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptPermObjective

# Register OptPermObjective in _pysgpp_swig:
_pysgpp_swig.OptPermObjective_swigregister(OptPermObjective)

class OptPerm(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptPerm_swiginit(self, _pysgpp_swig.new_OptPerm(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptPerm

# Register OptPerm in _pysgpp_swig:
_pysgpp_swig.OptPerm_swigregister(OptPerm)

class OptRastriginObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptRastriginObjective_swiginit(self, _pysgpp_swig.new_OptRastriginObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptRastriginObjective

# Register OptRastriginObjective in _pysgpp_swig:
_pysgpp_swig.OptRastriginObjective_swigregister(OptRastriginObjective)

class OptRastrigin(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptRastrigin_swiginit(self, _pysgpp_swig.new_OptRastrigin(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptRastrigin

# Register OptRastrigin in _pysgpp_swig:
_pysgpp_swig.OptRastrigin_swigregister(OptRastrigin)

class OptRosenbrockObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptRosenbrockObjective_swiginit(self, _pysgpp_swig.new_OptRosenbrockObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptRosenbrockObjective

# Register OptRosenbrockObjective in _pysgpp_swig:
_pysgpp_swig.OptRosenbrockObjective_swigregister(OptRosenbrockObjective)

class OptRosenbrock(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptRosenbrock_swiginit(self, _pysgpp_swig.new_OptRosenbrock(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptRosenbrock

# Register OptRosenbrock in _pysgpp_swig:
_pysgpp_swig.OptRosenbrock_swigregister(OptRosenbrock)

class OptSHCBObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSHCBObjective_swiginit(self, _pysgpp_swig.new_OptSHCBObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptSHCBObjective

# Register OptSHCBObjective in _pysgpp_swig:
_pysgpp_swig.OptSHCBObjective_swigregister(OptSHCBObjective)

class OptSHCB(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSHCB_swiginit(self, _pysgpp_swig.new_OptSHCB())
    __swig_destroy__ = _pysgpp_swig.delete_OptSHCB

# Register OptSHCB in _pysgpp_swig:
_pysgpp_swig.OptSHCB_swigregister(OptSHCB)

class OptSchwefel06Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSchwefel06Objective_swiginit(self, _pysgpp_swig.new_OptSchwefel06Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel06Objective

# Register OptSchwefel06Objective in _pysgpp_swig:
_pysgpp_swig.OptSchwefel06Objective_swigregister(OptSchwefel06Objective)

class OptSchwefel06(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSchwefel06_swiginit(self, _pysgpp_swig.new_OptSchwefel06())
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel06

# Register OptSchwefel06 in _pysgpp_swig:
_pysgpp_swig.OptSchwefel06_swigregister(OptSchwefel06)

class OptSchwefel22Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptSchwefel22Objective_swiginit(self, _pysgpp_swig.new_OptSchwefel22Objective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel22Objective

# Register OptSchwefel22Objective in _pysgpp_swig:
_pysgpp_swig.OptSchwefel22Objective_swigregister(OptSchwefel22Objective)

class OptSchwefel22(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptSchwefel22_swiginit(self, _pysgpp_swig.new_OptSchwefel22(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel22

# Register OptSchwefel22 in _pysgpp_swig:
_pysgpp_swig.OptSchwefel22_swigregister(OptSchwefel22)

class OptSchwefel26Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptSchwefel26Objective_swiginit(self, _pysgpp_swig.new_OptSchwefel26Objective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel26Objective

# Register OptSchwefel26Objective in _pysgpp_swig:
_pysgpp_swig.OptSchwefel26Objective_swigregister(OptSchwefel26Objective)

class OptSchwefel26(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptSchwefel26_swiginit(self, _pysgpp_swig.new_OptSchwefel26(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel26

# Register OptSchwefel26 in _pysgpp_swig:
_pysgpp_swig.OptSchwefel26_swigregister(OptSchwefel26)

class OptSphereObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptSphereObjective_swiginit(self, _pysgpp_swig.new_OptSphereObjective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptSphereObjective

# Register OptSphereObjective in _pysgpp_swig:
_pysgpp_swig.OptSphereObjective_swigregister(OptSphereObjective)

class OptSphere(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptSphere_swiginit(self, _pysgpp_swig.new_OptSphere(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptSphere

# Register OptSphere in _pysgpp_swig:
_pysgpp_swig.OptSphere_swigregister(OptSphere)

class OptTremblingParabolaObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", p: "size_t"):
        _pysgpp_swig.OptTremblingParabolaObjective_swiginit(self, _pysgpp_swig.new_OptTremblingParabolaObjective(d, p))
    __swig_destroy__ = _pysgpp_swig.delete_OptTremblingParabolaObjective

# Register OptTremblingParabolaObjective in _pysgpp_swig:
_pysgpp_swig.OptTremblingParabolaObjective_swigregister(OptTremblingParabolaObjective)

class OptTremblingParabola(OptUnconstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t", p: "size_t"):
        _pysgpp_swig.OptTremblingParabola_swiginit(self, _pysgpp_swig.new_OptTremblingParabola(d, p))
    __swig_destroy__ = _pysgpp_swig.delete_OptTremblingParabola

# Register OptTremblingParabola in _pysgpp_swig:
_pysgpp_swig.OptTremblingParabola_swigregister(OptTremblingParabola)

class OptConstrainedTestProblem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_STANDARD_DEVIATION = _pysgpp_swig.OptConstrainedTestProblem_DEFAULT_STANDARD_DEVIATION
    __swig_destroy__ = _pysgpp_swig.delete_OptConstrainedTestProblem

    def getObjectiveFunction(self) -> "sgpp::optimization::test_problems::TestScalarFunction &":
        return _pysgpp_swig.OptConstrainedTestProblem_getObjectiveFunction(self)

    def getInequalityConstraintFunction(self) -> "sgpp::optimization::test_problems::TestVectorFunction &":
        return _pysgpp_swig.OptConstrainedTestProblem_getInequalityConstraintFunction(self)

    def getEqualityConstraintFunction(self) -> "sgpp::optimization::test_problems::TestVectorFunction &":
        return _pysgpp_swig.OptConstrainedTestProblem_getEqualityConstraintFunction(self)

    def getOptimalPoint(self, x: "DataVector") -> "double":
        return _pysgpp_swig.OptConstrainedTestProblem_getOptimalPoint(self, x)

    def getOptimalPointUndisplaced(self, x: "DataVector") -> "double":
        return _pysgpp_swig.OptConstrainedTestProblem_getOptimalPointUndisplaced(self, x)

    def generateDisplacement(self, *args) -> "void":
        return _pysgpp_swig.OptConstrainedTestProblem_generateDisplacement(self, *args)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptConstrainedTestProblem_getDisplacement(self)

    def setDisplacement(self, displacement: "DataVector") -> "void":
        return _pysgpp_swig.OptConstrainedTestProblem_setDisplacement(self, displacement)

# Register OptConstrainedTestProblem in _pysgpp_swig:
_pysgpp_swig.OptConstrainedTestProblem_swigregister(OptConstrainedTestProblem)

class OptFloudasObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptFloudasObjective_swiginit(self, _pysgpp_swig.new_OptFloudasObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudasObjective

# Register OptFloudasObjective in _pysgpp_swig:
_pysgpp_swig.OptFloudasObjective_swigregister(OptFloudasObjective)

class OptFloudasInequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptFloudasInequalityConstraint_swiginit(self, _pysgpp_swig.new_OptFloudasInequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudasInequalityConstraint

# Register OptFloudasInequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptFloudasInequalityConstraint_swigregister(OptFloudasInequalityConstraint)

class OptFloudasEqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptFloudasEqualityConstraint_swiginit(self, _pysgpp_swig.new_OptFloudasEqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudasEqualityConstraint

# Register OptFloudasEqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptFloudasEqualityConstraint_swigregister(OptFloudasEqualityConstraint)

class OptFloudas(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptFloudas_swiginit(self, _pysgpp_swig.new_OptFloudas())
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudas

# Register OptFloudas in _pysgpp_swig:
_pysgpp_swig.OptFloudas_swigregister(OptFloudas)

class OptG03Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptG03Objective_swiginit(self, _pysgpp_swig.new_OptG03Objective(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptG03Objective

# Register OptG03Objective in _pysgpp_swig:
_pysgpp_swig.OptG03Objective_swigregister(OptG03Objective)

class OptG03InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptG03InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG03InequalityConstraint(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptG03InequalityConstraint

# Register OptG03InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG03InequalityConstraint_swigregister(OptG03InequalityConstraint)

class OptG03EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptG03EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG03EqualityConstraint(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptG03EqualityConstraint

# Register OptG03EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG03EqualityConstraint_swigregister(OptG03EqualityConstraint)

class OptG03(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d: "size_t"):
        _pysgpp_swig.OptG03_swiginit(self, _pysgpp_swig.new_OptG03(d))
    __swig_destroy__ = _pysgpp_swig.delete_OptG03

# Register OptG03 in _pysgpp_swig:
_pysgpp_swig.OptG03_swigregister(OptG03)

class OptG04Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04Objective_swiginit(self, _pysgpp_swig.new_OptG04Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04Objective

# Register OptG04Objective in _pysgpp_swig:
_pysgpp_swig.OptG04Objective_swigregister(OptG04Objective)

class OptG04InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG04InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04InequalityConstraint

# Register OptG04InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG04InequalityConstraint_swigregister(OptG04InequalityConstraint)

class OptG04EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG04EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04EqualityConstraint

# Register OptG04EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG04EqualityConstraint_swigregister(OptG04EqualityConstraint)

class OptG04(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04_swiginit(self, _pysgpp_swig.new_OptG04())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04

# Register OptG04 in _pysgpp_swig:
_pysgpp_swig.OptG04_swigregister(OptG04)

class OptG04SquaredObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04SquaredObjective_swiginit(self, _pysgpp_swig.new_OptG04SquaredObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04SquaredObjective

# Register OptG04SquaredObjective in _pysgpp_swig:
_pysgpp_swig.OptG04SquaredObjective_swigregister(OptG04SquaredObjective)

class OptG04SquaredInequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04SquaredInequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG04SquaredInequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04SquaredInequalityConstraint

# Register OptG04SquaredInequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG04SquaredInequalityConstraint_swigregister(OptG04SquaredInequalityConstraint)

class OptG04SquaredEqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04SquaredEqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG04SquaredEqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04SquaredEqualityConstraint

# Register OptG04SquaredEqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG04SquaredEqualityConstraint_swigregister(OptG04SquaredEqualityConstraint)

class OptG04Squared(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG04Squared_swiginit(self, _pysgpp_swig.new_OptG04Squared())
    __swig_destroy__ = _pysgpp_swig.delete_OptG04Squared

# Register OptG04Squared in _pysgpp_swig:
_pysgpp_swig.OptG04Squared_swigregister(OptG04Squared)

class OptG05Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG05Objective_swiginit(self, _pysgpp_swig.new_OptG05Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG05Objective

# Register OptG05Objective in _pysgpp_swig:
_pysgpp_swig.OptG05Objective_swigregister(OptG05Objective)

class OptG05InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG05InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG05InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG05InequalityConstraint

# Register OptG05InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG05InequalityConstraint_swigregister(OptG05InequalityConstraint)

class OptG05EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG05EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG05EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG05EqualityConstraint

# Register OptG05EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG05EqualityConstraint_swigregister(OptG05EqualityConstraint)

class OptG05(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG05_swiginit(self, _pysgpp_swig.new_OptG05())
    __swig_destroy__ = _pysgpp_swig.delete_OptG05

# Register OptG05 in _pysgpp_swig:
_pysgpp_swig.OptG05_swigregister(OptG05)

class OptG06Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG06Objective_swiginit(self, _pysgpp_swig.new_OptG06Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG06Objective

# Register OptG06Objective in _pysgpp_swig:
_pysgpp_swig.OptG06Objective_swigregister(OptG06Objective)

class OptG06InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG06InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG06InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG06InequalityConstraint

# Register OptG06InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG06InequalityConstraint_swigregister(OptG06InequalityConstraint)

class OptG06EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG06EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG06EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG06EqualityConstraint

# Register OptG06EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG06EqualityConstraint_swigregister(OptG06EqualityConstraint)

class OptG06(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG06_swiginit(self, _pysgpp_swig.new_OptG06())
    __swig_destroy__ = _pysgpp_swig.delete_OptG06

# Register OptG06 in _pysgpp_swig:
_pysgpp_swig.OptG06_swigregister(OptG06)

class OptG08Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG08Objective_swiginit(self, _pysgpp_swig.new_OptG08Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG08Objective

# Register OptG08Objective in _pysgpp_swig:
_pysgpp_swig.OptG08Objective_swigregister(OptG08Objective)

class OptG08InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG08InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG08InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG08InequalityConstraint

# Register OptG08InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG08InequalityConstraint_swigregister(OptG08InequalityConstraint)

class OptG08EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG08EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG08EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG08EqualityConstraint

# Register OptG08EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG08EqualityConstraint_swigregister(OptG08EqualityConstraint)

class OptG08(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG08_swiginit(self, _pysgpp_swig.new_OptG08())
    __swig_destroy__ = _pysgpp_swig.delete_OptG08

# Register OptG08 in _pysgpp_swig:
_pysgpp_swig.OptG08_swigregister(OptG08)

class OptG09Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG09Objective_swiginit(self, _pysgpp_swig.new_OptG09Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG09Objective

# Register OptG09Objective in _pysgpp_swig:
_pysgpp_swig.OptG09Objective_swigregister(OptG09Objective)

class OptG09InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG09InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG09InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG09InequalityConstraint

# Register OptG09InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG09InequalityConstraint_swigregister(OptG09InequalityConstraint)

class OptG09EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG09EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG09EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG09EqualityConstraint

# Register OptG09EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG09EqualityConstraint_swigregister(OptG09EqualityConstraint)

class OptG09(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG09_swiginit(self, _pysgpp_swig.new_OptG09())
    __swig_destroy__ = _pysgpp_swig.delete_OptG09

# Register OptG09 in _pysgpp_swig:
_pysgpp_swig.OptG09_swigregister(OptG09)

class OptG10Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG10Objective_swiginit(self, _pysgpp_swig.new_OptG10Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG10Objective

# Register OptG10Objective in _pysgpp_swig:
_pysgpp_swig.OptG10Objective_swigregister(OptG10Objective)

class OptG10InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG10InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG10InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG10InequalityConstraint

# Register OptG10InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG10InequalityConstraint_swigregister(OptG10InequalityConstraint)

class OptG10EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG10EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG10EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG10EqualityConstraint

# Register OptG10EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG10EqualityConstraint_swigregister(OptG10EqualityConstraint)

class OptG10(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG10_swiginit(self, _pysgpp_swig.new_OptG10())
    __swig_destroy__ = _pysgpp_swig.delete_OptG10

# Register OptG10 in _pysgpp_swig:
_pysgpp_swig.OptG10_swigregister(OptG10)

class OptG11Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG11Objective_swiginit(self, _pysgpp_swig.new_OptG11Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG11Objective

# Register OptG11Objective in _pysgpp_swig:
_pysgpp_swig.OptG11Objective_swigregister(OptG11Objective)

class OptG11InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG11InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG11InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG11InequalityConstraint

# Register OptG11InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG11InequalityConstraint_swigregister(OptG11InequalityConstraint)

class OptG11EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG11EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG11EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG11EqualityConstraint

# Register OptG11EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG11EqualityConstraint_swigregister(OptG11EqualityConstraint)

class OptG11(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG11_swiginit(self, _pysgpp_swig.new_OptG11())
    __swig_destroy__ = _pysgpp_swig.delete_OptG11

# Register OptG11 in _pysgpp_swig:
_pysgpp_swig.OptG11_swigregister(OptG11)

class OptG12Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG12Objective_swiginit(self, _pysgpp_swig.new_OptG12Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG12Objective

# Register OptG12Objective in _pysgpp_swig:
_pysgpp_swig.OptG12Objective_swigregister(OptG12Objective)

class OptG12InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG12InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG12InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG12InequalityConstraint

# Register OptG12InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG12InequalityConstraint_swigregister(OptG12InequalityConstraint)

class OptG12EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG12EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG12EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG12EqualityConstraint

# Register OptG12EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG12EqualityConstraint_swigregister(OptG12EqualityConstraint)

class OptG12(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG12_swiginit(self, _pysgpp_swig.new_OptG12())
    __swig_destroy__ = _pysgpp_swig.delete_OptG12

# Register OptG12 in _pysgpp_swig:
_pysgpp_swig.OptG12_swigregister(OptG12)

class OptG13Objective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG13Objective_swiginit(self, _pysgpp_swig.new_OptG13Objective())
    __swig_destroy__ = _pysgpp_swig.delete_OptG13Objective

# Register OptG13Objective in _pysgpp_swig:
_pysgpp_swig.OptG13Objective_swigregister(OptG13Objective)

class OptG13InequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG13InequalityConstraint_swiginit(self, _pysgpp_swig.new_OptG13InequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG13InequalityConstraint

# Register OptG13InequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG13InequalityConstraint_swigregister(OptG13InequalityConstraint)

class OptG13EqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG13EqualityConstraint_swiginit(self, _pysgpp_swig.new_OptG13EqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptG13EqualityConstraint

# Register OptG13EqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptG13EqualityConstraint_swigregister(OptG13EqualityConstraint)

class OptG13(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptG13_swiginit(self, _pysgpp_swig.new_OptG13())
    __swig_destroy__ = _pysgpp_swig.delete_OptG13

# Register OptG13 in _pysgpp_swig:
_pysgpp_swig.OptG13_swigregister(OptG13)

class OptSimionescuObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSimionescuObjective_swiginit(self, _pysgpp_swig.new_OptSimionescuObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescuObjective

# Register OptSimionescuObjective in _pysgpp_swig:
_pysgpp_swig.OptSimionescuObjective_swigregister(OptSimionescuObjective)

class OptSimionescuInequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSimionescuInequalityConstraint_swiginit(self, _pysgpp_swig.new_OptSimionescuInequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescuInequalityConstraint

# Register OptSimionescuInequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptSimionescuInequalityConstraint_swigregister(OptSimionescuInequalityConstraint)

class OptSimionescuEqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSimionescuEqualityConstraint_swiginit(self, _pysgpp_swig.new_OptSimionescuEqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescuEqualityConstraint

# Register OptSimionescuEqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptSimionescuEqualityConstraint_swigregister(OptSimionescuEqualityConstraint)

class OptSimionescu(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSimionescu_swiginit(self, _pysgpp_swig.new_OptSimionescu())
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescu

# Register OptSimionescu in _pysgpp_swig:
_pysgpp_swig.OptSimionescu_swigregister(OptSimionescu)

class OptSolandObjective(OptTestScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSolandObjective_swiginit(self, _pysgpp_swig.new_OptSolandObjective())
    __swig_destroy__ = _pysgpp_swig.delete_OptSolandObjective

# Register OptSolandObjective in _pysgpp_swig:
_pysgpp_swig.OptSolandObjective_swigregister(OptSolandObjective)

class OptSolandInequalityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSolandInequalityConstraint_swiginit(self, _pysgpp_swig.new_OptSolandInequalityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptSolandInequalityConstraint

# Register OptSolandInequalityConstraint in _pysgpp_swig:
_pysgpp_swig.OptSolandInequalityConstraint_swigregister(OptSolandInequalityConstraint)

class OptSolandEqualityConstraint(OptTestVectorFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSolandEqualityConstraint_swiginit(self, _pysgpp_swig.new_OptSolandEqualityConstraint())
    __swig_destroy__ = _pysgpp_swig.delete_OptSolandEqualityConstraint

# Register OptSolandEqualityConstraint in _pysgpp_swig:
_pysgpp_swig.OptSolandEqualityConstraint_swigregister(OptSolandEqualityConstraint)

class OptSoland(OptConstrainedTestProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OptSoland_swiginit(self, _pysgpp_swig.new_OptSoland())
    __swig_destroy__ = _pysgpp_swig.delete_OptSoland

# Register OptSoland in _pysgpp_swig:
_pysgpp_swig.OptSoland_swigregister(OptSoland)


def OptFileIOWriteGrid(*args) -> "void":
    return _pysgpp_swig.OptFileIOWriteGrid(*args)

def OptFileIOReadGrid(*args) -> "void":
    return _pysgpp_swig.OptFileIOReadGrid(*args)

def OptMathSchurDecomposition(A: "DataMatrix", V: "DataMatrix") -> "void":
    return _pysgpp_swig.OptMathSchurDecomposition(A, V)

def OptMathQRDecomposition(A: "DataMatrix", Q: "DataMatrix") -> "void":
    return _pysgpp_swig.OptMathQRDecomposition(A, Q)

def OptMathHessenbergForm(A: "DataMatrix", V: "DataMatrix") -> "void":
    return _pysgpp_swig.OptMathHessenbergForm(A, V)

def OptMathHouseholderTransformation(A: "DataMatrix", i: "size_t", j: "size_t", Q: "DataMatrix") -> "void":
    return _pysgpp_swig.OptMathHouseholderTransformation(A, i, j, Q)

def createOperationMultipleHierarchisation(grid: "Grid") -> "sgpp::optimization::OperationMultipleHierarchisation *":
    return _pysgpp_swig.createOperationMultipleHierarchisation(grid)

def OptFileIOWriteMatrix(*args) -> "void":
    return _pysgpp_swig.OptFileIOWriteMatrix(*args)

def OptFileIOReadMatrix(*args) -> "size_t &, size_t &":
    return _pysgpp_swig.OptFileIOReadMatrix(*args)

def OptFileIOWriteVector(*args) -> "void":
    return _pysgpp_swig.OptFileIOWriteVector(*args)

def OptFileIOReadVector(*args) -> "void":
    return _pysgpp_swig.OptFileIOReadVector(*args)
class OptFuzzyIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.OptFuzzyIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.OptFuzzyIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.OptFuzzyIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type":
        return _pysgpp_swig.OptFuzzyIntervalVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type", j: "std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type") -> "std::vector< sgpp::optimization::FuzzyInterval const *,std::allocator< sgpp::optimization::FuzzyInterval const * > > *":
        return _pysgpp_swig.OptFuzzyIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type", j: "std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_pop(self)

    def append(self, x: "OptFuzzyInterval") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.OptFuzzyIntervalVector_empty(self)

    def size(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_size(self)

    def swap(self, v: "OptFuzzyIntervalVector") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_begin(self)

    def end(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::reverse_iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::reverse_iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::allocator_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.OptFuzzyIntervalVector_swiginit(self, _pysgpp_swig.new_OptFuzzyIntervalVector(*args))

    def push_back(self, x: "OptFuzzyInterval") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_front(self)

    def back(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_back(self)

    def assign(self, n: "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type", x: "OptFuzzyInterval") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type") -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyIntervalVector

# Register OptFuzzyIntervalVector in _pysgpp_swig:
_pysgpp_swig.OptFuzzyIntervalVector_swigregister(OptFuzzyIntervalVector)

class DMSystemMatrixBase(OperationMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DMSystemMatrixBase

    def generateb(self, classes: "DataVector", b: "DataVector") -> "void":
        return _pysgpp_swig.DMSystemMatrixBase_generateb(self, classes, b)

    def prepareGrid(self) -> "void":
        return _pysgpp_swig.DMSystemMatrixBase_prepareGrid(self)

    def resetTimers(self) -> "void":
        return _pysgpp_swig.DMSystemMatrixBase_resetTimers(self)

    def getTimers(self, timeMult: "double &", computeMult: "double &", timeMultTrans: "double &", computeMultTrans: "double &") -> "void":
        return _pysgpp_swig.DMSystemMatrixBase_getTimers(self, timeMult, computeMult, timeMultTrans, computeMultTrans)

# Register DMSystemMatrixBase in _pysgpp_swig:
_pysgpp_swig.DMSystemMatrixBase_swigregister(DMSystemMatrixBase)

class DMSystemMatrix(DMSystemMatrixBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid", trainData: "DataMatrix", C: "std::shared_ptr< sgpp::base::OperationMatrix >", lambdaRegression: "double"):
        _pysgpp_swig.DMSystemMatrix_swiginit(self, _pysgpp_swig.new_DMSystemMatrix(grid, trainData, C, lambdaRegression))
    __swig_destroy__ = _pysgpp_swig.delete_DMSystemMatrix

# Register DMSystemMatrix in _pysgpp_swig:
_pysgpp_swig.DMSystemMatrix_swigregister(DMSystemMatrix)

class DensitySystemMatrix(OperationMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DensitySystemMatrix_swiginit(self, _pysgpp_swig.new_DensitySystemMatrix(*args))

    def generateb(self, b: "DataVector") -> "void":
        return _pysgpp_swig.DensitySystemMatrix_generateb(self, b)
    __swig_destroy__ = _pysgpp_swig.delete_DensitySystemMatrix

# Register DensitySystemMatrix in _pysgpp_swig:
_pysgpp_swig.DensitySystemMatrix_swigregister(DensitySystemMatrix)

class Dataset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.Dataset_swiginit(self, _pysgpp_swig.new_Dataset(*args))

    def getNumberInstances(self) -> "size_t":
        return _pysgpp_swig.Dataset_getNumberInstances(self)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.Dataset_getDimension(self)

    def getTargets(self, *args) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.Dataset_getTargets(self, *args)

    def getData(self, *args) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.Dataset_getData(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_Dataset

# Register Dataset in _pysgpp_swig:
_pysgpp_swig.Dataset_swigregister(Dataset)

class ParallelConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scalapackEnabled_ = property(_pysgpp_swig.ParallelConfiguration_scalapackEnabled__get, _pysgpp_swig.ParallelConfiguration_scalapackEnabled__set)
    processRows_ = property(_pysgpp_swig.ParallelConfiguration_processRows__get, _pysgpp_swig.ParallelConfiguration_processRows__set)
    processCols_ = property(_pysgpp_swig.ParallelConfiguration_processCols__get, _pysgpp_swig.ParallelConfiguration_processCols__set)
    rowBlockSize_ = property(_pysgpp_swig.ParallelConfiguration_rowBlockSize__get, _pysgpp_swig.ParallelConfiguration_rowBlockSize__set)
    columnBlockSize_ = property(_pysgpp_swig.ParallelConfiguration_columnBlockSize__get, _pysgpp_swig.ParallelConfiguration_columnBlockSize__set)

    def __init__(self):
        _pysgpp_swig.ParallelConfiguration_swiginit(self, _pysgpp_swig.new_ParallelConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_ParallelConfiguration

# Register ParallelConfiguration in _pysgpp_swig:
_pysgpp_swig.ParallelConfiguration_swigregister(ParallelConfiguration)

class CrossvalidationConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enable_ = property(_pysgpp_swig.CrossvalidationConfiguration_enable__get, _pysgpp_swig.CrossvalidationConfiguration_enable__set)
    kfold_ = property(_pysgpp_swig.CrossvalidationConfiguration_kfold__get, _pysgpp_swig.CrossvalidationConfiguration_kfold__set)
    seed_ = property(_pysgpp_swig.CrossvalidationConfiguration_seed__get, _pysgpp_swig.CrossvalidationConfiguration_seed__set)
    shuffle_ = property(_pysgpp_swig.CrossvalidationConfiguration_shuffle__get, _pysgpp_swig.CrossvalidationConfiguration_shuffle__set)
    silent_ = property(_pysgpp_swig.CrossvalidationConfiguration_silent__get, _pysgpp_swig.CrossvalidationConfiguration_silent__set)
    lambda_ = property(_pysgpp_swig.CrossvalidationConfiguration_lambda__get, _pysgpp_swig.CrossvalidationConfiguration_lambda__set)
    lambdaStart_ = property(_pysgpp_swig.CrossvalidationConfiguration_lambdaStart__get, _pysgpp_swig.CrossvalidationConfiguration_lambdaStart__set)
    lambdaEnd_ = property(_pysgpp_swig.CrossvalidationConfiguration_lambdaEnd__get, _pysgpp_swig.CrossvalidationConfiguration_lambdaEnd__set)
    lambdaSteps_ = property(_pysgpp_swig.CrossvalidationConfiguration_lambdaSteps__get, _pysgpp_swig.CrossvalidationConfiguration_lambdaSteps__set)
    logScale_ = property(_pysgpp_swig.CrossvalidationConfiguration_logScale__get, _pysgpp_swig.CrossvalidationConfiguration_logScale__set)

    def __init__(self):
        _pysgpp_swig.CrossvalidationConfiguration_swiginit(self, _pysgpp_swig.new_CrossvalidationConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_CrossvalidationConfiguration

# Register CrossvalidationConfiguration in _pysgpp_swig:
_pysgpp_swig.CrossvalidationConfiguration_swigregister(CrossvalidationConfiguration)

DensityEstimationType_CG = _pysgpp_swig.DensityEstimationType_CG
DensityEstimationType_Decomposition = _pysgpp_swig.DensityEstimationType_Decomposition
MatrixDecompositionType_LU = _pysgpp_swig.MatrixDecompositionType_LU
MatrixDecompositionType_Eigen = _pysgpp_swig.MatrixDecompositionType_Eigen
MatrixDecompositionType_Chol = _pysgpp_swig.MatrixDecompositionType_Chol
MatrixDecompositionType_DenseIchol = _pysgpp_swig.MatrixDecompositionType_DenseIchol
MatrixDecompositionType_OrthoAdapt = _pysgpp_swig.MatrixDecompositionType_OrthoAdapt
MatrixDecompositionType_SMW_ortho = _pysgpp_swig.MatrixDecompositionType_SMW_ortho
MatrixDecompositionType_SMW_chol = _pysgpp_swig.MatrixDecompositionType_SMW_chol
class DensityEstimationConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_ = property(_pysgpp_swig.DensityEstimationConfiguration_type__get, _pysgpp_swig.DensityEstimationConfiguration_type__set)
    decomposition_ = property(_pysgpp_swig.DensityEstimationConfiguration_decomposition__get, _pysgpp_swig.DensityEstimationConfiguration_decomposition__set)
    useOfflinePermutation = property(_pysgpp_swig.DensityEstimationConfiguration_useOfflinePermutation_get, _pysgpp_swig.DensityEstimationConfiguration_useOfflinePermutation_set)
    normalize_ = property(_pysgpp_swig.DensityEstimationConfiguration_normalize__get, _pysgpp_swig.DensityEstimationConfiguration_normalize__set)
    iCholSweepsDecompose_ = property(_pysgpp_swig.DensityEstimationConfiguration_iCholSweepsDecompose__get, _pysgpp_swig.DensityEstimationConfiguration_iCholSweepsDecompose__set)
    iCholSweepsRefine_ = property(_pysgpp_swig.DensityEstimationConfiguration_iCholSweepsRefine__get, _pysgpp_swig.DensityEstimationConfiguration_iCholSweepsRefine__set)
    iCholSweepsUpdateLambda_ = property(_pysgpp_swig.DensityEstimationConfiguration_iCholSweepsUpdateLambda__get, _pysgpp_swig.DensityEstimationConfiguration_iCholSweepsUpdateLambda__set)
    iCholSweepsSolver_ = property(_pysgpp_swig.DensityEstimationConfiguration_iCholSweepsSolver__get, _pysgpp_swig.DensityEstimationConfiguration_iCholSweepsSolver__set)

    def __init__(self):
        _pysgpp_swig.DensityEstimationConfiguration_swiginit(self, _pysgpp_swig.new_DensityEstimationConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_DensityEstimationConfiguration

# Register DensityEstimationConfiguration in _pysgpp_swig:
_pysgpp_swig.DensityEstimationConfiguration_swigregister(DensityEstimationConfiguration)

RegularizationMetricType_mse = _pysgpp_swig.RegularizationMetricType_mse
RegularizationMetricType_nll = _pysgpp_swig.RegularizationMetricType_nll
RegularizationMetricType_accuracy = _pysgpp_swig.RegularizationMetricType_accuracy
RegularizationMetricType_residual = _pysgpp_swig.RegularizationMetricType_residual
RegularizationType_Identity = _pysgpp_swig.RegularizationType_Identity
RegularizationType_Laplace = _pysgpp_swig.RegularizationType_Laplace
RegularizationType_Diagonal = _pysgpp_swig.RegularizationType_Diagonal
RegularizationType_Lasso = _pysgpp_swig.RegularizationType_Lasso
RegularizationType_ElasticNet = _pysgpp_swig.RegularizationType_ElasticNet
RegularizationType_GroupLasso = _pysgpp_swig.RegularizationType_GroupLasso
class RegularizationConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_ = property(_pysgpp_swig.RegularizationConfiguration_type__get, _pysgpp_swig.RegularizationConfiguration_type__set)
    lambda_ = property(_pysgpp_swig.RegularizationConfiguration_lambda__get, _pysgpp_swig.RegularizationConfiguration_lambda__set)
    l1Ratio_ = property(_pysgpp_swig.RegularizationConfiguration_l1Ratio__get, _pysgpp_swig.RegularizationConfiguration_l1Ratio__set)
    exponentBase_ = property(_pysgpp_swig.RegularizationConfiguration_exponentBase__get, _pysgpp_swig.RegularizationConfiguration_exponentBase__set)
    lamda_start_ = property(_pysgpp_swig.RegularizationConfiguration_lamda_start__get, _pysgpp_swig.RegularizationConfiguration_lamda_start__set)
    lambda_end_ = property(_pysgpp_swig.RegularizationConfiguration_lambda_end__get, _pysgpp_swig.RegularizationConfiguration_lambda_end__set)
    lambda_steps_ = property(_pysgpp_swig.RegularizationConfiguration_lambda_steps__get, _pysgpp_swig.RegularizationConfiguration_lambda_steps__set)
    lambda_log_scale_ = property(_pysgpp_swig.RegularizationConfiguration_lambda_log_scale__get, _pysgpp_swig.RegularizationConfiguration_lambda_log_scale__set)
    optimizeLambda_ = property(_pysgpp_swig.RegularizationConfiguration_optimizeLambda__get, _pysgpp_swig.RegularizationConfiguration_optimizeLambda__set)
    optimizerTolerance_ = property(_pysgpp_swig.RegularizationConfiguration_optimizerTolerance__get, _pysgpp_swig.RegularizationConfiguration_optimizerTolerance__set)
    convergenceThreshold_ = property(_pysgpp_swig.RegularizationConfiguration_convergenceThreshold__get, _pysgpp_swig.RegularizationConfiguration_convergenceThreshold__set)
    intervalA_ = property(_pysgpp_swig.RegularizationConfiguration_intervalA__get, _pysgpp_swig.RegularizationConfiguration_intervalA__set)
    intervalB_ = property(_pysgpp_swig.RegularizationConfiguration_intervalB__get, _pysgpp_swig.RegularizationConfiguration_intervalB__set)
    regularizationMetric_ = property(_pysgpp_swig.RegularizationConfiguration_regularizationMetric__get, _pysgpp_swig.RegularizationConfiguration_regularizationMetric__set)

    def __init__(self):
        _pysgpp_swig.RegularizationConfiguration_swiginit(self, _pysgpp_swig.new_RegularizationConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_RegularizationConfiguration

# Register RegularizationConfiguration in _pysgpp_swig:
_pysgpp_swig.RegularizationConfiguration_swigregister(RegularizationConfiguration)

class DatabaseConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filePath = property(_pysgpp_swig.DatabaseConfiguration_filePath_get, _pysgpp_swig.DatabaseConfiguration_filePath_set)

    def __init__(self):
        _pysgpp_swig.DatabaseConfiguration_swiginit(self, _pysgpp_swig.new_DatabaseConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_DatabaseConfiguration

# Register DatabaseConfiguration in _pysgpp_swig:
_pysgpp_swig.DatabaseConfiguration_swigregister(DatabaseConfiguration)

class RefinementMonitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_RefinementMonitor

    def pushToBuffer(self, numberInstances: "size_t", currentValidError: "double", currentTrainError: "double") -> "void":
        return _pysgpp_swig.RefinementMonitor_pushToBuffer(self, numberInstances, currentValidError, currentTrainError)

    def refinementsNecessary(self) -> "size_t":
        return _pysgpp_swig.RefinementMonitor_refinementsNecessary(self)

# Register RefinementMonitor in _pysgpp_swig:
_pysgpp_swig.RefinementMonitor_swigregister(RefinementMonitor)

class RefinementMonitorConvergence(RefinementMonitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pDeclineThreshold: "double", pBufferSize: "size_t", pMinRefInterval: "size_t"):
        _pysgpp_swig.RefinementMonitorConvergence_swiginit(self, _pysgpp_swig.new_RefinementMonitorConvergence(pDeclineThreshold, pBufferSize, pMinRefInterval))
    __swig_destroy__ = _pysgpp_swig.delete_RefinementMonitorConvergence

# Register RefinementMonitorConvergence in _pysgpp_swig:
_pysgpp_swig.RefinementMonitorConvergence_swigregister(RefinementMonitorConvergence)

class RefinementMonitorPeriodic(RefinementMonitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, period: "size_t"):
        _pysgpp_swig.RefinementMonitorPeriodic_swiginit(self, _pysgpp_swig.new_RefinementMonitorPeriodic(period))
    __swig_destroy__ = _pysgpp_swig.delete_RefinementMonitorPeriodic

# Register RefinementMonitorPeriodic in _pysgpp_swig:
_pysgpp_swig.RefinementMonitorPeriodic_swigregister(RefinementMonitorPeriodic)

class RefinementMonitorFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.RefinementMonitorFactory_swiginit(self, _pysgpp_swig.new_RefinementMonitorFactory())

    def createRefinementMonitor(self, adaptivityConfig: "AdaptivityConfiguration") -> "sgpp::datadriven::RefinementMonitor *":
        return _pysgpp_swig.RefinementMonitorFactory_createRefinementMonitor(self, adaptivityConfig)
    __swig_destroy__ = _pysgpp_swig.delete_RefinementMonitorFactory

# Register RefinementMonitorFactory in _pysgpp_swig:
_pysgpp_swig.RefinementMonitorFactory_swigregister(RefinementMonitorFactory)

class BlacsProcessGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rows: "int"=-1, columns: "int"=-1):
        _pysgpp_swig.BlacsProcessGrid_swiginit(self, _pysgpp_swig.new_BlacsProcessGrid(rows, columns))
    __swig_destroy__ = _pysgpp_swig.delete_BlacsProcessGrid

    def getContextHandle(self) -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getContextHandle(self)

    def getTotalRows(self) -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getTotalRows(self)

    def getTotalColumns(self) -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getTotalColumns(self)

    def getCurrentRow(self) -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getCurrentRow(self)

    def getCurrentColumn(self) -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getCurrentColumn(self)

    def getRowColumnIndex(self) -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getRowColumnIndex(self)

    def getProcessesInGrid(self) -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getProcessesInGrid(self)

    def isProcessInGrid(self) -> "bool":
        return _pysgpp_swig.BlacsProcessGrid_isProcessInGrid(self)

    @staticmethod
    def getCurrentProcess() -> "int":
        return _pysgpp_swig.BlacsProcessGrid_getCurrentProcess()

    @staticmethod
    def availableProcesses() -> "int":
        return _pysgpp_swig.BlacsProcessGrid_availableProcesses()

    @staticmethod
    def initializeBlacs() -> "void":
        return _pysgpp_swig.BlacsProcessGrid_initializeBlacs()

    @staticmethod
    def exitBlacs() -> "void":
        return _pysgpp_swig.BlacsProcessGrid_exitBlacs()

# Register BlacsProcessGrid in _pysgpp_swig:
_pysgpp_swig.BlacsProcessGrid_swigregister(BlacsProcessGrid)

def BlacsProcessGrid_getCurrentProcess() -> "int":
    return _pysgpp_swig.BlacsProcessGrid_getCurrentProcess()

def BlacsProcessGrid_availableProcesses() -> "int":
    return _pysgpp_swig.BlacsProcessGrid_availableProcesses()

def BlacsProcessGrid_initializeBlacs() -> "void":
    return _pysgpp_swig.BlacsProcessGrid_initializeBlacs()

def BlacsProcessGrid_exitBlacs() -> "void":
    return _pysgpp_swig.BlacsProcessGrid_exitBlacs()

class DataMatrixDistributed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DTYPE_DENSE = _pysgpp_swig.DataMatrixDistributed_DTYPE_DENSE
    DTYPE_TRIDIAG_COEFFICIENT = _pysgpp_swig.DataMatrixDistributed_DTYPE_TRIDIAG_COEFFICIENT
    DTYPE_TRIDIAG_RHS = _pysgpp_swig.DataMatrixDistributed_DTYPE_TRIDIAG_RHS
    DTYPE_OUT_OF_CORE = _pysgpp_swig.DataMatrixDistributed_DTYPE_OUT_OF_CORE
    TRIANGULAR_LOWER = _pysgpp_swig.DataMatrixDistributed_TRIANGULAR_LOWER
    TRIANGULAR_UPPER = _pysgpp_swig.DataMatrixDistributed_TRIANGULAR_UPPER

    def __init__(self, *args):
        _pysgpp_swig.DataMatrixDistributed_swiginit(self, _pysgpp_swig.new_DataMatrixDistributed(*args))

    @staticmethod
    def fromSharedData(*args) -> "sgpp::datadriven::DataMatrixDistributed":
        return _pysgpp_swig.DataMatrixDistributed_fromSharedData(*args)

    def get(self, row: "size_t", col: "size_t") -> "double":
        return _pysgpp_swig.DataMatrixDistributed_get(self, row, col)

    def set(self, row: "size_t", col: "size_t", value: "double") -> "void":
        return _pysgpp_swig.DataMatrixDistributed_set(self, row, col, value)

    def setAll(self, value: "double") -> "void":
        return _pysgpp_swig.DataMatrixDistributed_setAll(self, value)

    def copyFrom(self, other: "DataMatrixDistributed") -> "void":
        return _pysgpp_swig.DataMatrixDistributed_copyFrom(self, other)

    @staticmethod
    def transpose(*args) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_transpose(*args)

    @staticmethod
    def add(*args) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_add(*args)

    @staticmethod
    def sub(*args) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_sub(*args)

    @staticmethod
    def mult(*args) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_mult(*args)

    @staticmethod
    def solveCholesky(*args) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_solveCholesky(*args)

    def resize(self, rows: "size_t", cols: "size_t") -> "void":
        return _pysgpp_swig.DataMatrixDistributed_resize(self, rows, cols)

    def toVector(self) -> "sgpp::datadriven::DataVectorDistributed":
        return _pysgpp_swig.DataMatrixDistributed_toVector(self)

    def getLocalPointer(self, *args) -> "double const *":
        return _pysgpp_swig.DataMatrixDistributed_getLocalPointer(self, *args)

    def toLocalDataMatrix(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_toLocalDataMatrix(self, *args)

    def toLocalDataMatrixBroadcast(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_toLocalDataMatrixBroadcast(self, *args)

    def getDescriptor(self, *args) -> "int const *":
        return _pysgpp_swig.DataMatrixDistributed_getDescriptor(self, *args)

    def getGlobalRows(self) -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_getGlobalRows(self)

    def getGlobalCols(self) -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_getGlobalCols(self)

    def getLocalRows(self) -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_getLocalRows(self)

    def getLocalColumns(self) -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_getLocalColumns(self)

    def getRowBlockSize(self) -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_getRowBlockSize(self)

    def getColumnBlockSize(self) -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_getColumnBlockSize(self)

    def getProcessGrid(self) -> "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >":
        return _pysgpp_swig.DataMatrixDistributed_getProcessGrid(self)

    def printMatrix(self) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_printMatrix(self)

    def isProcessMapped(self) -> "bool":
        return _pysgpp_swig.DataMatrixDistributed_isProcessMapped(self)

    def globalToLocalRowIndex(self, globalRowIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_globalToLocalRowIndex(self, globalRowIndex)

    def globalToLocalColumnIndex(self, globalColumnIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_globalToLocalColumnIndex(self, globalColumnIndex)

    def localToGlobalRowIndex(self, localRowIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_localToGlobalRowIndex(self, localRowIndex)

    def localToGlobalColumnIndex(self, localColumnIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_localToGlobalColumnIndex(self, localColumnIndex)

    def globalToRowProcessIndex(self, globalRowIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_globalToRowProcessIndex(self, globalRowIndex)

    def globalToColumnProcessIndex(self, globalColumnIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataMatrixDistributed_globalToColumnProcessIndex(self, globalColumnIndex)

    def distribute(self, matrix: "double const *", masterRow: "int"=0, masterCol: "int"=0) -> "void":
        return _pysgpp_swig.DataMatrixDistributed_distribute(self, matrix, masterRow, masterCol)
    __swig_destroy__ = _pysgpp_swig.delete_DataMatrixDistributed

# Register DataMatrixDistributed in _pysgpp_swig:
_pysgpp_swig.DataMatrixDistributed_swigregister(DataMatrixDistributed)

def DataMatrixDistributed_fromSharedData(*args) -> "sgpp::datadriven::DataMatrixDistributed":
    return _pysgpp_swig.DataMatrixDistributed_fromSharedData(*args)

def DataMatrixDistributed_transpose(*args) -> "void":
    return _pysgpp_swig.DataMatrixDistributed_transpose(*args)

def DataMatrixDistributed_add(*args) -> "void":
    return _pysgpp_swig.DataMatrixDistributed_add(*args)

def DataMatrixDistributed_sub(*args) -> "void":
    return _pysgpp_swig.DataMatrixDistributed_sub(*args)

def DataMatrixDistributed_mult(*args) -> "void":
    return _pysgpp_swig.DataMatrixDistributed_mult(*args)

def DataMatrixDistributed_solveCholesky(*args) -> "void":
    return _pysgpp_swig.DataMatrixDistributed_solveCholesky(*args)

class DataVectorDistributed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DataVectorDistributed_swiginit(self, _pysgpp_swig.new_DataVectorDistributed(*args))

    def get(self, row: "size_t") -> "double":
        return _pysgpp_swig.DataVectorDistributed_get(self, row)

    def set(self, row: "size_t", value: "double") -> "void":
        return _pysgpp_swig.DataVectorDistributed_set(self, row, value)

    def setAll(self, value: "double") -> "void":
        return _pysgpp_swig.DataVectorDistributed_setAll(self, value)

    def copyFrom(self, other: "DataVectorDistributed") -> "void":
        return _pysgpp_swig.DataVectorDistributed_copyFrom(self, other)

    @staticmethod
    def add(*args) -> "void":
        return _pysgpp_swig.DataVectorDistributed_add(*args)

    @staticmethod
    def dot(*args) -> "double":
        return _pysgpp_swig.DataVectorDistributed_dot(*args)

    def scale(self, a: "double") -> "void":
        return _pysgpp_swig.DataVectorDistributed_scale(self, a)

    def resize(self, rows: "size_t") -> "void":
        return _pysgpp_swig.DataVectorDistributed_resize(self, rows)

    def getLocalPointer(self, *args) -> "double const *":
        return _pysgpp_swig.DataVectorDistributed_getLocalPointer(self, *args)

    def getProcessGrid(self) -> "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >":
        return _pysgpp_swig.DataVectorDistributed_getProcessGrid(self)

    def toLocalDataVector(self, *args) -> "void":
        return _pysgpp_swig.DataVectorDistributed_toLocalDataVector(self, *args)

    def toLocalDataVectorBroadcast(self, *args) -> "void":
        return _pysgpp_swig.DataVectorDistributed_toLocalDataVectorBroadcast(self, *args)

    def getDescriptor(self, *args) -> "int const *":
        return _pysgpp_swig.DataVectorDistributed_getDescriptor(self, *args)

    def getGlobalRows(self) -> "size_t":
        return _pysgpp_swig.DataVectorDistributed_getGlobalRows(self)

    def getLocalRows(self) -> "size_t":
        return _pysgpp_swig.DataVectorDistributed_getLocalRows(self)

    def getBlockSize(self) -> "size_t":
        return _pysgpp_swig.DataVectorDistributed_getBlockSize(self)

    def printVector(self) -> "void":
        return _pysgpp_swig.DataVectorDistributed_printVector(self)

    def isProcessMapped(self) -> "bool":
        return _pysgpp_swig.DataVectorDistributed_isProcessMapped(self)

    def getMatrix(self, *args) -> "sgpp::datadriven::DataMatrixDistributed const &":
        return _pysgpp_swig.DataVectorDistributed_getMatrix(self, *args)

    def distribute(self, input: "double *", masterRow: "int"=0, masterCol: "int"=0) -> "void":
        return _pysgpp_swig.DataVectorDistributed_distribute(self, input, masterRow, masterCol)

    def globalToLocalRowIndex(self, globalRowIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataVectorDistributed_globalToLocalRowIndex(self, globalRowIndex)

    def localToGlobalRowIndex(self, localRowIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataVectorDistributed_localToGlobalRowIndex(self, localRowIndex)

    def globalToRowProcessIndex(self, globalRowIndex: "size_t") -> "size_t":
        return _pysgpp_swig.DataVectorDistributed_globalToRowProcessIndex(self, globalRowIndex)
    __swig_destroy__ = _pysgpp_swig.delete_DataVectorDistributed

# Register DataVectorDistributed in _pysgpp_swig:
_pysgpp_swig.DataVectorDistributed_swigregister(DataVectorDistributed)

def DataVectorDistributed_add(*args) -> "void":
    return _pysgpp_swig.DataVectorDistributed_add(*args)

def DataVectorDistributed_dot(*args) -> "double":
    return _pysgpp_swig.DataVectorDistributed_dot(*args)

class VectorHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.VectorHash_swiginit(self, _pysgpp_swig.new_VectorHash())
    __swig_destroy__ = _pysgpp_swig.delete_VectorHash

# Register VectorHash in _pysgpp_swig:
_pysgpp_swig.VectorHash_swigregister(VectorHash)

class CombiScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.CombiScheme_swiginit(self, _pysgpp_swig.new_CombiScheme())

    def initialize(self, dim: "size_t", level: "size_t") -> "void":
        return _pysgpp_swig.CombiScheme_initialize(self, dim, level)

    def isRefinable(self, levelvec: "SizeVector") -> "bool":
        return _pysgpp_swig.CombiScheme_isRefinable(self, levelvec)

    def refineComponent(self, levelvec: "SizeVector") -> "bool":
        return _pysgpp_swig.CombiScheme_refineComponent(self, levelvec)

    def getCombiScheme(self) -> "std::vector< std::pair< std::vector< size_t,std::allocator< size_t > >,int >,std::allocator< std::pair< std::vector< size_t,std::allocator< size_t > >,int > > >":
        return _pysgpp_swig.CombiScheme_getCombiScheme(self)
    __swig_destroy__ = _pysgpp_swig.delete_CombiScheme

# Register CombiScheme in _pysgpp_swig:
_pysgpp_swig.CombiScheme_swigregister(CombiScheme)

class DBMatDecompMatrixSolver(SGSolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.DBMatDecompMatrixSolver_swiginit(self, _pysgpp_swig.new_DBMatDecompMatrixSolver())
    __swig_destroy__ = _pysgpp_swig.delete_DBMatDecompMatrixSolver

# Register DBMatDecompMatrixSolver in _pysgpp_swig:
_pysgpp_swig.DBMatDecompMatrixSolver_swigregister(DBMatDecompMatrixSolver)

class DBMatDMSChol(DBMatDecompMatrixSolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.DBMatDMSChol_swiginit(self, _pysgpp_swig.new_DBMatDMSChol())

    def solve(self, decompMatrix: "DataMatrix", alpha: "DataVector", b: "DataVector", lambda_old: "double", lambda_new: "double") -> "void":
        return _pysgpp_swig.DBMatDMSChol_solve(self, decompMatrix, alpha, b, lambda_old, lambda_new)

    def solveParallel(self, decompMatrix: "DataMatrixDistributed", x: "DataVectorDistributed", lambda_old: "double", lambda_new: "double") -> "void":
        return _pysgpp_swig.DBMatDMSChol_solveParallel(self, decompMatrix, x, lambda_old, lambda_new)

    def choleskyUpdate(self, decompMatrix: "DataMatrix", update: "DataVector", do_cv: "bool"=False) -> "void":
        return _pysgpp_swig.DBMatDMSChol_choleskyUpdate(self, decompMatrix, update, do_cv)

    def choleskyDowndate(self, decompMatrix: "DataMatrix", downdate: "DataVector", do_cv: "bool"=False) -> "void":
        return _pysgpp_swig.DBMatDMSChol_choleskyDowndate(self, decompMatrix, downdate, do_cv)
    __swig_destroy__ = _pysgpp_swig.delete_DBMatDMSChol

# Register DBMatDMSChol in _pysgpp_swig:
_pysgpp_swig.DBMatDMSChol_swigregister(DBMatDMSChol)

class DBMatDMSDenseIChol(DBMatDMSChol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, densityEstimationConfig: "DensityEstimationConfiguration", grid: "Grid", _lambda: "double", doCV: "bool"):
        _pysgpp_swig.DBMatDMSDenseIChol_swiginit(self, _pysgpp_swig.new_DBMatDMSDenseIChol(densityEstimationConfig, grid, _lambda, doCV))
    __swig_destroy__ = _pysgpp_swig.delete_DBMatDMSDenseIChol

# Register DBMatDMSDenseIChol in _pysgpp_swig:
_pysgpp_swig.DBMatDMSDenseIChol_swigregister(DBMatDMSDenseIChol)

class DBMatOffline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOffline

    def clone(self) -> "sgpp::datadriven::DBMatOffline *":
        return _pysgpp_swig.DBMatOffline_clone(self)

    def isRefineable(self) -> "bool":
        return _pysgpp_swig.DBMatOffline_isRefineable(self)

    def getDecomposedMatrix(self) -> "sgpp::datadriven::DataMatrix &":
        return _pysgpp_swig.DBMatOffline_getDecomposedMatrix(self)

    def getUnmodifiedR(self) -> "sgpp::datadriven::DataMatrix const &":
        return _pysgpp_swig.DBMatOffline_getUnmodifiedR(self)

    def getUnmodifiedRDistributed(self, processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >", parallelConfig: "ParallelConfiguration") -> "sgpp::datadriven::DataMatrixDistributed const &":
        return _pysgpp_swig.DBMatOffline_getUnmodifiedRDistributed(self, processGrid, parallelConfig)

    def updateRegularization(self, _lambda: "double") -> "void":
        return _pysgpp_swig.DBMatOffline_updateRegularization(self, _lambda)

    def updateRegularizationParallel(self, _lambda: "double", processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >", parallelConfig: "ParallelConfiguration") -> "void":
        return _pysgpp_swig.DBMatOffline_updateRegularizationParallel(self, _lambda, processGrid, parallelConfig)

    def getInverseMatrix(self) -> "sgpp::datadriven::DataMatrix &":
        return _pysgpp_swig.DBMatOffline_getInverseMatrix(self)

    def getDecomposedMatrixDistributed(self) -> "sgpp::datadriven::DataMatrixDistributed &":
        return _pysgpp_swig.DBMatOffline_getDecomposedMatrixDistributed(self)

    def getDecomposedInverseDistributed(self) -> "sgpp::datadriven::DataMatrixDistributed &":
        return _pysgpp_swig.DBMatOffline_getDecomposedInverseDistributed(self)

    def syncDistributedDecomposition(self, processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >", parallelConfig: "ParallelConfiguration") -> "void":
        return _pysgpp_swig.DBMatOffline_syncDistributedDecomposition(self, processGrid, parallelConfig)

    def syncDistributedInverse(self, processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >", parallelConfig: "ParallelConfiguration") -> "void":
        return _pysgpp_swig.DBMatOffline_syncDistributedInverse(self, processGrid, parallelConfig)

    def getLhsMatrix_ONLY_FOR_TESTING(self) -> "sgpp::datadriven::DataMatrix &":
        return _pysgpp_swig.DBMatOffline_getLhsMatrix_ONLY_FOR_TESTING(self)

    def buildMatrix(self, grid: "Grid", regularizationConfig: "RegularizationConfiguration") -> "void":
        return _pysgpp_swig.DBMatOffline_buildMatrix(self, grid, regularizationConfig)

    def decomposeMatrix(self, regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration") -> "void":
        return _pysgpp_swig.DBMatOffline_decomposeMatrix(self, regularizationConfig, densityEstimationConfig)

    def decomposeMatrixParallel(self, regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration", processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >", parallelConfig: "ParallelConfiguration") -> "void":
        return _pysgpp_swig.DBMatOffline_decomposeMatrixParallel(self, regularizationConfig, densityEstimationConfig, processGrid, parallelConfig)

    def printMatrix(self) -> "void":
        return _pysgpp_swig.DBMatOffline_printMatrix(self)

    def compute_L2_refine_vectors(self, mat_refine: "DataMatrix", grid: "Grid", newPoints: "size_t") -> "void":
        return _pysgpp_swig.DBMatOffline_compute_L2_refine_vectors(self, mat_refine, grid, newPoints)

    def compute_inverse(self) -> "void":
        return _pysgpp_swig.DBMatOffline_compute_inverse(self)

    def compute_inverse_parallel(self, processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >", parallelConfig: "ParallelConfiguration") -> "void":
        return _pysgpp_swig.DBMatOffline_compute_inverse_parallel(self, processGrid, parallelConfig)

    def store(self, fileName: "std::string const &") -> "void":
        return _pysgpp_swig.DBMatOffline_store(self, fileName)

    def getGridSize(self) -> "size_t":
        return _pysgpp_swig.DBMatOffline_getGridSize(self)

    def getDecompositionType(self) -> "sgpp::datadriven::MatrixDecompositionType":
        return _pysgpp_swig.DBMatOffline_getDecompositionType(self)
    interactions = property(_pysgpp_swig.DBMatOffline_interactions_get, _pysgpp_swig.DBMatOffline_interactions_set)

# Register DBMatOffline in _pysgpp_swig:
_pysgpp_swig.DBMatOffline_swigregister(DBMatOffline)

class DBMatOfflineGE(DBMatOffline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOfflineGE

# Register DBMatOfflineGE in _pysgpp_swig:
_pysgpp_swig.DBMatOfflineGE_swigregister(DBMatOfflineGE)

class DBMatOfflineChol(DBMatOfflineGE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DBMatOfflineChol_swiginit(self, _pysgpp_swig.new_DBMatOfflineChol(*args))

    def choleskyModification(self, grid: "Grid", densityEstimationConfig: "DensityEstimationConfiguration", newPoints: "size_t", deletedPoints: "SizeVector", _lambda: "double") -> "void":
        return _pysgpp_swig.DBMatOfflineChol_choleskyModification(self, grid, densityEstimationConfig, newPoints, deletedPoints, _lambda)
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOfflineChol

# Register DBMatOfflineChol in _pysgpp_swig:
_pysgpp_swig.DBMatOfflineChol_swigregister(DBMatOfflineChol)

class DBMatOfflineDenseIChol(DBMatOfflineChol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DBMatOfflineDenseIChol_swiginit(self, _pysgpp_swig.new_DBMatOfflineDenseIChol(*args))

    @staticmethod
    def ichol(matrix: "DataMatrix", result: "DataMatrix", sweeps: "size_t"=4, startRow: "size_t"=0) -> "void":
        return _pysgpp_swig.DBMatOfflineDenseIChol_ichol(matrix, result, sweeps, startRow)
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOfflineDenseIChol

# Register DBMatOfflineDenseIChol in _pysgpp_swig:
_pysgpp_swig.DBMatOfflineDenseIChol_swigregister(DBMatOfflineDenseIChol)

def DBMatOfflineDenseIChol_ichol(matrix: "DataMatrix", result: "DataMatrix", sweeps: "size_t"=4, startRow: "size_t"=0) -> "void":
    return _pysgpp_swig.DBMatOfflineDenseIChol_ichol(matrix, result, sweeps, startRow)


def deleteOnesFromLevelVec(vectorWithOnes: "SizeVector") -> "std::vector< size_t,std::allocator< size_t > >":
    return _pysgpp_swig.deleteOnesFromLevelVec(vectorWithOnes)

def getNormalizedConfig(gridConfig: "sgpp::base::GeneralGridConfiguration") -> "sgpp::base::GeneralGridConfiguration":
    return _pysgpp_swig.getNormalizedConfig(gridConfig)

def isPermutation(vec1: "SizeVector", vec2: "SizeVector") -> "bool":
    return _pysgpp_swig.isPermutation(vec1, vec2)
class DBMatOfflinePermutable(DBMatOffline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def permuteLhsMatrix(self, baseGridConfig: "sgpp::base::GeneralGridConfiguration const &", desiredGridConfig: "sgpp::base::GeneralGridConfiguration const &") -> "void":
        return _pysgpp_swig.DBMatOfflinePermutable_permuteLhsMatrix(self, baseGridConfig, desiredGridConfig)

    def permuteDecomposition(self, baseGridConfig: "sgpp::base::GeneralGridConfiguration const &", desiredGridConfig: "sgpp::base::GeneralGridConfiguration const &") -> "void":
        return _pysgpp_swig.DBMatOfflinePermutable_permuteDecomposition(self, baseGridConfig, desiredGridConfig)
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOfflinePermutable

# Register DBMatOfflinePermutable in _pysgpp_swig:
_pysgpp_swig.DBMatOfflinePermutable_swigregister(DBMatOfflinePermutable)
DBMatOfflinePermutable.PermutableDecompositions = _pysgpp_swig.cvar.DBMatOfflinePermutable_PermutableDecompositions

class DBMatOnline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DBMatOnline_swiginit(self, _pysgpp_swig.new_DBMatOnline(*args))
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOnline

    def setLambda(self, _lambda: "double") -> "void":
        return _pysgpp_swig.DBMatOnline_setLambda(self, _lambda)

    def getOfflineObject(self, *args) -> "sgpp::datadriven::DBMatOffline const &":
        return _pysgpp_swig.DBMatOnline_getOfflineObject(self, *args)

    def updateSystemMatrixDecomposition(self, densityEstimationConfig: "DensityEstimationConfiguration", grid: "Grid", numAddedGridPoints: "size_t", deletedGridPointIndices: "SizeVector", _lambda: "double") -> "std::vector< size_t,std::allocator< size_t > >":
        return _pysgpp_swig.DBMatOnline_updateSystemMatrixDecomposition(self, densityEstimationConfig, grid, numAddedGridPoints, deletedGridPointIndices, _lambda)

# Register DBMatOnline in _pysgpp_swig:
_pysgpp_swig.DBMatOnline_swigregister(DBMatOnline)

class DBMatOnlineDE(DBMatOnline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def updateRhs(self, gridSize: "size_t", deletedPoints: "SizeVector") -> "void":
        return _pysgpp_swig.DBMatOnlineDE_updateRhs(self, gridSize, deletedPoints)

    def computeDensityFunction(self, *args) -> "void":
        return _pysgpp_swig.DBMatOnlineDE_computeDensityFunction(self, *args)

    def computeDensityFunctionParallel(self, *args) -> "void":
        return _pysgpp_swig.DBMatOnlineDE_computeDensityFunctionParallel(self, *args)

    def computeBFromBatch(self, m: "DataMatrix", grid: "Grid", densityEstimationConfig: "DensityEstimationConfiguration") -> "sgpp::datadriven::DataVector":
        return _pysgpp_swig.DBMatOnlineDE_computeBFromBatch(self, m, grid, densityEstimationConfig)

    def computeBFromBatchParallel(self, m: "DataMatrix", grid: "Grid", densityEstimationConfig: "DensityEstimationConfiguration", parallelConfig: "ParallelConfiguration", processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >") -> "sgpp::datadriven::DataVectorDistributed":
        return _pysgpp_swig.DBMatOnlineDE_computeBFromBatchParallel(self, m, grid, densityEstimationConfig, parallelConfig, processGrid)

    def eval(self, *args) -> "void":
        return _pysgpp_swig.DBMatOnlineDE_eval(self, *args)

    def evalParallel(self, alpha: "DataVector", values: "DataMatrix", results: "DataVectorDistributed", grid: "Grid", force: "bool"=False) -> "void":
        return _pysgpp_swig.DBMatOnlineDE_evalParallel(self, alpha, values, results, grid, force)

    def isComputed(self) -> "bool":
        return _pysgpp_swig.DBMatOnlineDE_isComputed(self)

    def setBeta(self, beta: "double") -> "void":
        return _pysgpp_swig.DBMatOnlineDE_setBeta(self, beta)

    def getBeta(self) -> "double":
        return _pysgpp_swig.DBMatOnlineDE_getBeta(self)

    def normalize(self, alpha: "DataVector", grid: "Grid", samples: "size_t"=1000) -> "double":
        return _pysgpp_swig.DBMatOnlineDE_normalize(self, alpha, grid, samples)

    def normalizeQuadrature(self, alpha: "DataVector", grid: "Grid") -> "double":
        return _pysgpp_swig.DBMatOnlineDE_normalizeQuadrature(self, alpha, grid)

    def syncDistributedDecomposition(self, processGrid: "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >", parallelConfig: "ParallelConfiguration") -> "void":
        return _pysgpp_swig.DBMatOnlineDE_syncDistributedDecomposition(self, processGrid, parallelConfig)

    def resetTraining(self) -> "void":
        return _pysgpp_swig.DBMatOnlineDE_resetTraining(self)
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOnlineDE

# Register DBMatOnlineDE in _pysgpp_swig:
_pysgpp_swig.DBMatOnlineDE_swigregister(DBMatOnlineDE)

class DBMatOnlineDEChol(DBMatOnlineDE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DBMatOnlineDEChol

# Register DBMatOnlineDEChol in _pysgpp_swig:
_pysgpp_swig.DBMatOnlineDEChol_swigregister(DBMatOnlineDEChol)


def buildDBMatOnlineDE(*args) -> "sgpp::datadriven::DBMatOnlineDE *":
    return _pysgpp_swig.buildDBMatOnlineDE(*args)

def buildOfflineObject(gridConfig: "sgpp::base::GeneralGridConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration") -> "sgpp::datadriven::DBMatOffline *":
    return _pysgpp_swig.buildOfflineObject(gridConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig)

def buildFromFile(fname: "std::string const &") -> "sgpp::datadriven::DBMatOffline *":
    return _pysgpp_swig.buildFromFile(fname)
class DBMatObjectStore(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DBMatObjectStore_swiginit(self, _pysgpp_swig.new_DBMatObjectStore(*args))

    def putObject(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", geometryConfig: "sgpp::datadriven::GeometryConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration", object: "DBMatOffline") -> "void":
        return _pysgpp_swig.DBMatObjectStore_putObject(self, gridConfig, geometryConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig, object)

    def getBaseObject(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", geometryConfig: "sgpp::datadriven::GeometryConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration", baseGridConfig: "sgpp::base::GeneralGridConfiguration &") -> "sgpp::datadriven::DBMatOfflinePermutable const *":
        return _pysgpp_swig.DBMatObjectStore_getBaseObject(self, gridConfig, geometryConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig, baseGridConfig)

    def getObject(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", geometryConfig: "sgpp::datadriven::GeometryConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration") -> "sgpp::datadriven::DBMatOffline const *":
        return _pysgpp_swig.DBMatObjectStore_getObject(self, gridConfig, geometryConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig)
    __swig_destroy__ = _pysgpp_swig.delete_DBMatObjectStore

# Register DBMatObjectStore in _pysgpp_swig:
_pysgpp_swig.DBMatObjectStore_swigregister(DBMatObjectStore)

class DBMatDatabase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filepath: "std::string const &"):
        _pysgpp_swig.DBMatDatabase_swiginit(self, _pysgpp_swig.new_DBMatDatabase(filepath))
    __swig_destroy__ = _pysgpp_swig.delete_DBMatDatabase

    def hasDataMatrix(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration") -> "bool":
        return _pysgpp_swig.DBMatDatabase_hasDataMatrix(self, gridConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig)

    def hasBaseDataMatrix(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration") -> "bool":
        return _pysgpp_swig.DBMatDatabase_hasBaseDataMatrix(self, gridConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig)

    def getDataMatrix(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration") -> "std::string &":
        return _pysgpp_swig.DBMatDatabase_getDataMatrix(self, gridConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig)

    def getBaseDataMatrix(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration", baseGridConfig: "sgpp::base::GeneralGridConfiguration &") -> "std::string &":
        return _pysgpp_swig.DBMatDatabase_getBaseDataMatrix(self, gridConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig, baseGridConfig)

    def putDataMatrix(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration", filepath: "std::string const", overwriteEntry: "bool"=False) -> "void":
        return _pysgpp_swig.DBMatDatabase_putDataMatrix(self, gridConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig, filepath, overwriteEntry)

# Register DBMatDatabase in _pysgpp_swig:
_pysgpp_swig.DBMatDatabase_swigregister(DBMatDatabase)

class GridFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.GridFactory_swiginit(self, _pysgpp_swig.new_GridFactory())

    def createGrid(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", interactions: "std::set< std::set< size_t > > const") -> "sgpp::base::Grid *":
        return _pysgpp_swig.GridFactory_createGrid(self, gridConfig, interactions)

    def getInteractions(self, config: "sgpp::datadriven::GeometryConfiguration") -> "std::set< std::set< size_t > >":
        return _pysgpp_swig.GridFactory_getInteractions(self, config)

    def getBlockInteractions(self, interactions: "std::set< std::set< size_t > > &", geoConf: "sgpp::datadriven::GeometryConfiguration &", stencilConf: "sgpp::datadriven::StencilConfiguration &") -> "void":
        return _pysgpp_swig.GridFactory_getBlockInteractions(self, interactions, geoConf, stencilConf)

    def getHierarchicalParents(self, interactions: "std::set< std::set< size_t > > &", geometryConf: "sgpp::datadriven::GeometryConfiguration &", stencilConf: "sgpp::datadriven::StencilConfiguration &") -> "void":
        return _pysgpp_swig.GridFactory_getHierarchicalParents(self, interactions, geometryConf, stencilConf)

    def getDirectNeighbours(self, interactions: "std::set< std::set< size_t > > &", geometryConf: "sgpp::datadriven::GeometryConfiguration &", stencilConf: "sgpp::datadriven::StencilConfiguration &") -> "void":
        return _pysgpp_swig.GridFactory_getDirectNeighbours(self, interactions, geometryConf, stencilConf)
    __swig_destroy__ = _pysgpp_swig.delete_GridFactory

# Register GridFactory in _pysgpp_swig:
_pysgpp_swig.GridFactory_swigregister(GridFactory)

class DBMatPermutationFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DBMatPermutationFactory_swiginit(self, _pysgpp_swig.new_DBMatPermutationFactory(*args))

    def getPermutedObject(self, gridConfig: "sgpp::base::GeneralGridConfiguration const &", geometryConfig: "sgpp::datadriven::GeometryConfiguration const", adaptivityConfig: "AdaptivityConfiguration", regularizationConfig: "RegularizationConfiguration", densityEstimationConfig: "DensityEstimationConfiguration") -> "sgpp::datadriven::DBMatOfflinePermutable *":
        return _pysgpp_swig.DBMatPermutationFactory_getPermutedObject(self, gridConfig, geometryConfig, adaptivityConfig, regularizationConfig, densityEstimationConfig)
    __swig_destroy__ = _pysgpp_swig.delete_DBMatPermutationFactory

# Register DBMatPermutationFactory in _pysgpp_swig:
_pysgpp_swig.DBMatPermutationFactory_swigregister(DBMatPermutationFactory)


def createOperationTest(grid: "Grid") -> "sgpp::datadriven::OperationTest *":
    return _pysgpp_swig.createOperationTest(grid)

def createOperationRegularizationDiagonal(grid: "Grid", mode: "int", k: "double") -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationRegularizationDiagonal(grid, mode, k)

def createOperationDensityMarginalize(grid: "Grid") -> "sgpp::datadriven::OperationDensityMarginalize *":
    return _pysgpp_swig.createOperationDensityMarginalize(grid)

def createOperationDensityMargTo1D(grid: "Grid") -> "sgpp::datadriven::OperationDensityMargTo1D *":
    return _pysgpp_swig.createOperationDensityMargTo1D(grid)

def createOperationDensitySampling1D(grid: "Grid") -> "sgpp::datadriven::OperationDensitySampling1D *":
    return _pysgpp_swig.createOperationDensitySampling1D(grid)

def createOperationDensitySampling(grid: "Grid") -> "sgpp::datadriven::OperationDensitySampling *":
    return _pysgpp_swig.createOperationDensitySampling(grid)

def createOperationDensityRejectionSampling(grid: "Grid") -> "sgpp::datadriven::OperationDensityRejectionSampling *":
    return _pysgpp_swig.createOperationDensityRejectionSampling(grid)

def createOperationDensityConditional(grid: "Grid") -> "sgpp::datadriven::OperationDensityConditional *":
    return _pysgpp_swig.createOperationDensityConditional(grid)

def createOperationRosenblattTransformation(grid: "Grid") -> "sgpp::datadriven::OperationRosenblattTransformation *":
    return _pysgpp_swig.createOperationRosenblattTransformation(grid)

def createOperationRosenblattTransformation1D(grid: "Grid") -> "sgpp::datadriven::OperationTransformation1D *":
    return _pysgpp_swig.createOperationRosenblattTransformation1D(grid)

def createOperationInverseRosenblattTransformation(grid: "Grid") -> "sgpp::datadriven::OperationInverseRosenblattTransformation *":
    return _pysgpp_swig.createOperationInverseRosenblattTransformation(grid)

def createOperationInverseRosenblattTransformation1D(grid: "Grid") -> "sgpp::datadriven::OperationTransformation1D *":
    return _pysgpp_swig.createOperationInverseRosenblattTransformation1D(grid)

def createOperationRosenblattTransformationKDE(kde: "KernelDensityEstimator") -> "sgpp::datadriven::OperationRosenblattTransformationKDE *":
    return _pysgpp_swig.createOperationRosenblattTransformationKDE(kde)

def createOperationInverseRosenblattTransformationKDE(kde: "KernelDensityEstimator") -> "sgpp::datadriven::OperationInverseRosenblattTransformationKDE *":
    return _pysgpp_swig.createOperationInverseRosenblattTransformationKDE(kde)

def createOperationDensityMarginalizeKDE(kde: "KernelDensityEstimator") -> "sgpp::datadriven::OperationDensityMarginalizeKDE *":
    return _pysgpp_swig.createOperationDensityMarginalizeKDE(kde)

def createOperationDensityConditionalKDE(kde: "KernelDensityEstimator") -> "sgpp::datadriven::OperationDensityConditionalKDE *":
    return _pysgpp_swig.createOperationDensityConditionalKDE(kde)

def createOperationMultipleEval(*args) -> "sgpp::base::OperationMultipleEval *":
    return _pysgpp_swig.createOperationMultipleEval(*args)

def createOperationMakePositive(*args) -> "sgpp::datadriven::OperationMakePositive *":
    return _pysgpp_swig.createOperationMakePositive(*args)

def createOperationLimitFunctionValueRange(*args) -> "sgpp::datadriven::OperationLimitFunctionValueRange *":
    return _pysgpp_swig.createOperationLimitFunctionValueRange(*args)

def createOperationCovariance(grid: "Grid") -> "sgpp::datadriven::OperationCovariance *":
    return _pysgpp_swig.createOperationCovariance(grid)
class ClassificatorQuality(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    truePositive_ = property(_pysgpp_swig.ClassificatorQuality_truePositive__get, _pysgpp_swig.ClassificatorQuality_truePositive__set)
    trueNegative_ = property(_pysgpp_swig.ClassificatorQuality_trueNegative__get, _pysgpp_swig.ClassificatorQuality_trueNegative__set)
    falsePositive_ = property(_pysgpp_swig.ClassificatorQuality_falsePositive__get, _pysgpp_swig.ClassificatorQuality_falsePositive__set)
    falseNegative_ = property(_pysgpp_swig.ClassificatorQuality_falseNegative__get, _pysgpp_swig.ClassificatorQuality_falseNegative__set)

    def __init__(self):
        _pysgpp_swig.ClassificatorQuality_swiginit(self, _pysgpp_swig.new_ClassificatorQuality())
    __swig_destroy__ = _pysgpp_swig.delete_ClassificatorQuality

# Register ClassificatorQuality in _pysgpp_swig:
_pysgpp_swig.ClassificatorQuality_swigregister(ClassificatorQuality)

class LearnerTiming(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeComplete_ = property(_pysgpp_swig.LearnerTiming_timeComplete__get, _pysgpp_swig.LearnerTiming_timeComplete__set)
    timeMultComplete_ = property(_pysgpp_swig.LearnerTiming_timeMultComplete__get, _pysgpp_swig.LearnerTiming_timeMultComplete__set)
    timeMultCompute_ = property(_pysgpp_swig.LearnerTiming_timeMultCompute__get, _pysgpp_swig.LearnerTiming_timeMultCompute__set)
    timeMultTransComplete_ = property(_pysgpp_swig.LearnerTiming_timeMultTransComplete__get, _pysgpp_swig.LearnerTiming_timeMultTransComplete__set)
    timeMultTransCompute_ = property(_pysgpp_swig.LearnerTiming_timeMultTransCompute__get, _pysgpp_swig.LearnerTiming_timeMultTransCompute__set)
    timeRegularization_ = property(_pysgpp_swig.LearnerTiming_timeRegularization__get, _pysgpp_swig.LearnerTiming_timeRegularization__set)
    GFlop_ = property(_pysgpp_swig.LearnerTiming_GFlop__get, _pysgpp_swig.LearnerTiming_GFlop__set)
    GByte_ = property(_pysgpp_swig.LearnerTiming_GByte__get, _pysgpp_swig.LearnerTiming_GByte__set)

    def __init__(self):
        _pysgpp_swig.LearnerTiming_swiginit(self, _pysgpp_swig.new_LearnerTiming())
    __swig_destroy__ = _pysgpp_swig.delete_LearnerTiming

# Register LearnerTiming in _pysgpp_swig:
_pysgpp_swig.LearnerTiming_swigregister(LearnerTiming)

class LearnerBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_LearnerBase

    def train(self, *args) -> "sgpp::datadriven::LearnerTiming":
        return _pysgpp_swig.LearnerBase_train(self, *args)

    def predict(self, testDataset: "DataMatrix", classesComputed: "DataVector") -> "void":
        return _pysgpp_swig.LearnerBase_predict(self, testDataset, classesComputed)

    def multTranspose(self, dataset: "DataMatrix", multiplier: "DataVector", result: "DataVector") -> "void":
        return _pysgpp_swig.LearnerBase_multTranspose(self, dataset, multiplier, result)

    def getAccuracy(self, *args) -> "double":
        return _pysgpp_swig.LearnerBase_getAccuracy(self, *args)

    def getCassificatorQuality(self, *args) -> "sgpp::datadriven::ClassificatorQuality":
        return _pysgpp_swig.LearnerBase_getCassificatorQuality(self, *args)

    def store(self, tGridFilename: "std::string", tAlphaFilename: "std::string") -> "void":
        return _pysgpp_swig.LearnerBase_store(self, tGridFilename, tAlphaFilename)

    def dumpGrid(self, tFilename: "std::string") -> "void":
        return _pysgpp_swig.LearnerBase_dumpGrid(self, tFilename)

    def dumpFunction(self, tFilename: "std::string", resolution: "size_t") -> "void":
        return _pysgpp_swig.LearnerBase_dumpFunction(self, tFilename, resolution)

    def getIsRegression(self) -> "bool":
        return _pysgpp_swig.LearnerBase_getIsRegression(self)

    def getIsVerbose(self) -> "bool":
        return _pysgpp_swig.LearnerBase_getIsVerbose(self)

    def setIsVerbose(self, isVerbose: "bool const") -> "void":
        return _pysgpp_swig.LearnerBase_setIsVerbose(self, isVerbose)

    def getRefinementExecTimes(self) -> "std::vector< std::pair< size_t,double >,std::allocator< std::pair< size_t,double > > >":
        return _pysgpp_swig.LearnerBase_getRefinementExecTimes(self)

    def getGrid(self) -> "sgpp::base::Grid &":
        return _pysgpp_swig.LearnerBase_getGrid(self)

    def getAlpha(self) -> "sgpp::base::DataVector &":
        return _pysgpp_swig.LearnerBase_getAlpha(self)

    def setReuseCoefficients(self, reuseCoefficients: "bool") -> "void":
        return _pysgpp_swig.LearnerBase_setReuseCoefficients(self, reuseCoefficients)

    def setSolverVerbose(self, solverVerbose: "bool") -> "void":
        return _pysgpp_swig.LearnerBase_setSolverVerbose(self, solverVerbose)

# Register LearnerBase in _pysgpp_swig:
_pysgpp_swig.LearnerBase_swigregister(LearnerBase)

class DensityEstimator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DensityEstimator

    def initialize(self, samples: "DataMatrix") -> "void":
        return _pysgpp_swig.DensityEstimator_initialize(self, samples)

    def pdf(self, *args) -> "void":
        return _pysgpp_swig.DensityEstimator_pdf(self, *args)

    def mean(self) -> "double":
        return _pysgpp_swig.DensityEstimator_mean(self)

    def variance(self) -> "double":
        return _pysgpp_swig.DensityEstimator_variance(self)

    def std_deviation(self) -> "double":
        return _pysgpp_swig.DensityEstimator_std_deviation(self)

    def cov(self, cov: "DataMatrix", bounds: "DataMatrix"=None) -> "void":
        return _pysgpp_swig.DensityEstimator_cov(self, cov, bounds)

    def corrcoef(self, corr: "DataMatrix", bounds: "DataMatrix"=None) -> "void":
        return _pysgpp_swig.DensityEstimator_corrcoef(self, corr, bounds)

    def getSamples(self, *args) -> "std::shared_ptr< sgpp::base::DataMatrix >":
        return _pysgpp_swig.DensityEstimator_getSamples(self, *args)

    def getDim(self) -> "size_t":
        return _pysgpp_swig.DensityEstimator_getDim(self)

    def getNsamples(self) -> "size_t":
        return _pysgpp_swig.DensityEstimator_getNsamples(self)

    def crossEntropy(self, samples: "DataMatrix") -> "double":
        return _pysgpp_swig.DensityEstimator_crossEntropy(self, samples)

# Register DensityEstimator in _pysgpp_swig:
_pysgpp_swig.DensityEstimator_swigregister(DensityEstimator)

KernelType_GAUSSIAN = _pysgpp_swig.KernelType_GAUSSIAN
KernelType_EPANECHNIKOV = _pysgpp_swig.KernelType_EPANECHNIKOV
BandwidthOptimizationType_NONE = _pysgpp_swig.BandwidthOptimizationType_NONE
BandwidthOptimizationType_SILVERMANSRULE = _pysgpp_swig.BandwidthOptimizationType_SILVERMANSRULE
BandwidthOptimizationType_SCOTTSRULE = _pysgpp_swig.BandwidthOptimizationType_SCOTTSRULE
BandwidthOptimizationType_MAXIMUMLIKELIHOOD = _pysgpp_swig.BandwidthOptimizationType_MAXIMUMLIKELIHOOD
M_SQRT2PI = _pysgpp_swig.M_SQRT2PI
class Kernel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_Kernel

    def eval(self, x: "double") -> "double":
        return _pysgpp_swig.Kernel_eval(self, x)

    def cdf(self, x: "double") -> "double":
        return _pysgpp_swig.Kernel_cdf(self, x)

    def derivative(self, x: "double") -> "double":
        return _pysgpp_swig.Kernel_derivative(self, x)

    def norm(self) -> "double":
        return _pysgpp_swig.Kernel_norm(self)

    def variance(self) -> "double":
        return _pysgpp_swig.Kernel_variance(self)

    def getType(self) -> "sgpp::datadriven::KernelType":
        return _pysgpp_swig.Kernel_getType(self)

# Register Kernel in _pysgpp_swig:
_pysgpp_swig.Kernel_swigregister(Kernel)

class GaussianKernel(Kernel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_GaussianKernel

    def __init__(self):
        _pysgpp_swig.GaussianKernel_swiginit(self, _pysgpp_swig.new_GaussianKernel())

# Register GaussianKernel in _pysgpp_swig:
_pysgpp_swig.GaussianKernel_swigregister(GaussianKernel)

class EpanechnikovKernel(Kernel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_EpanechnikovKernel

    def __init__(self):
        _pysgpp_swig.EpanechnikovKernel_swiginit(self, _pysgpp_swig.new_EpanechnikovKernel())

# Register EpanechnikovKernel in _pysgpp_swig:
_pysgpp_swig.EpanechnikovKernel_swigregister(EpanechnikovKernel)

class KernelDensityEstimator(DensityEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.KernelDensityEstimator_swiginit(self, _pysgpp_swig.new_KernelDensityEstimator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_KernelDensityEstimator

    def initialize(self, *args) -> "void":
        return _pysgpp_swig.KernelDensityEstimator_initialize(self, *args)

    def initializeKernel(self, kernelType: "sgpp::datadriven::KernelType") -> "void":
        return _pysgpp_swig.KernelDensityEstimator_initializeKernel(self, kernelType)

    def getKernel(self) -> "sgpp::datadriven::Kernel &":
        return _pysgpp_swig.KernelDensityEstimator_getKernel(self)

    def cov(self, cov: "DataMatrix", bounds: "DataMatrix"=None) -> "void":
        return _pysgpp_swig.KernelDensityEstimator_cov(self, cov, bounds)

    def pdf(self, *args) -> "void":
        return _pysgpp_swig.KernelDensityEstimator_pdf(self, *args)

    def evalSubset(self, x: "DataVector", skipElements: "SizeVector") -> "double":
        return _pysgpp_swig.KernelDensityEstimator_evalSubset(self, x, skipElements)

    def getConditionalizationFactor(self, pcond: "DataVector") -> "void":
        return _pysgpp_swig.KernelDensityEstimator_getConditionalizationFactor(self, pcond)

    def setConditionalizationFactor(self, pcond: "DataVector") -> "void":
        return _pysgpp_swig.KernelDensityEstimator_setConditionalizationFactor(self, pcond)

    def updateConditionalizationFactors(self, x: "DataVector", dims: "SizeVector", pcond: "DataVector") -> "void":
        return _pysgpp_swig.KernelDensityEstimator_updateConditionalizationFactors(self, x, dims, pcond)

    def getBandwidths(self, sigma: "DataVector") -> "void":
        return _pysgpp_swig.KernelDensityEstimator_getBandwidths(self, sigma)

    def setBandwidths(self, sigma: "DataVector") -> "void":
        return _pysgpp_swig.KernelDensityEstimator_setBandwidths(self, sigma)

    def getSamples(self, *args) -> "std::shared_ptr< sgpp::base::DataVector >":
        return _pysgpp_swig.KernelDensityEstimator_getSamples(self, *args)

    def getSample(self, isample: "size_t", sample: "DataVector") -> "void":
        return _pysgpp_swig.KernelDensityEstimator_getSample(self, isample, sample)

    def margToDimX(self, idim: "size_t") -> "sgpp::datadriven::KernelDensityEstimator *":
        return _pysgpp_swig.KernelDensityEstimator_margToDimX(self, idim)

    def marginalize(self, idim: "size_t") -> "sgpp::datadriven::KernelDensityEstimator *":
        return _pysgpp_swig.KernelDensityEstimator_marginalize(self, idim)

# Register KernelDensityEstimator in _pysgpp_swig:
_pysgpp_swig.KernelDensityEstimator_swigregister(KernelDensityEstimator)

class KDEMaximumLikelihoodCrossValidation(ScalarFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.KDEMaximumLikelihoodCrossValidation_swiginit(self, _pysgpp_swig.new_KDEMaximumLikelihoodCrossValidation(*args))
    __swig_destroy__ = _pysgpp_swig.delete_KDEMaximumLikelihoodCrossValidation

# Register KDEMaximumLikelihoodCrossValidation in _pysgpp_swig:
_pysgpp_swig.KDEMaximumLikelihoodCrossValidation_swigregister(KDEMaximumLikelihoodCrossValidation)

class RuleOfThumb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getSampleMean(data: "DataVector") -> "double":
        return _pysgpp_swig.RuleOfThumb_getSampleMean(data)

    @staticmethod
    def getSampleVariance(data: "DataVector") -> "double":
        return _pysgpp_swig.RuleOfThumb_getSampleVariance(data)

    @staticmethod
    def getSampleStd(data: "DataVector") -> "double":
        return _pysgpp_swig.RuleOfThumb_getSampleStd(data)

    def __init__(self):
        _pysgpp_swig.RuleOfThumb_swiginit(self, _pysgpp_swig.new_RuleOfThumb())
    __swig_destroy__ = _pysgpp_swig.delete_RuleOfThumb

# Register RuleOfThumb in _pysgpp_swig:
_pysgpp_swig.RuleOfThumb_swigregister(RuleOfThumb)

def RuleOfThumb_getSampleMean(data: "DataVector") -> "double":
    return _pysgpp_swig.RuleOfThumb_getSampleMean(data)

def RuleOfThumb_getSampleVariance(data: "DataVector") -> "double":
    return _pysgpp_swig.RuleOfThumb_getSampleVariance(data)

def RuleOfThumb_getSampleStd(data: "DataVector") -> "double":
    return _pysgpp_swig.RuleOfThumb_getSampleStd(data)

class SilvermansRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def optimizeBandwidths(kde: "KernelDensityEstimator", bandwidths: "DataVector") -> "void":
        return _pysgpp_swig.SilvermansRule_optimizeBandwidths(kde, bandwidths)

    def __init__(self):
        _pysgpp_swig.SilvermansRule_swiginit(self, _pysgpp_swig.new_SilvermansRule())
    __swig_destroy__ = _pysgpp_swig.delete_SilvermansRule

# Register SilvermansRule in _pysgpp_swig:
_pysgpp_swig.SilvermansRule_swigregister(SilvermansRule)

def SilvermansRule_optimizeBandwidths(kde: "KernelDensityEstimator", bandwidths: "DataVector") -> "void":
    return _pysgpp_swig.SilvermansRule_optimizeBandwidths(kde, bandwidths)

class ScottsRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def optimizeBandwidths(kde: "KernelDensityEstimator", bandwidths: "DataVector") -> "void":
        return _pysgpp_swig.ScottsRule_optimizeBandwidths(kde, bandwidths)

    def __init__(self):
        _pysgpp_swig.ScottsRule_swiginit(self, _pysgpp_swig.new_ScottsRule())
    __swig_destroy__ = _pysgpp_swig.delete_ScottsRule

# Register ScottsRule in _pysgpp_swig:
_pysgpp_swig.ScottsRule_swigregister(ScottsRule)

def ScottsRule_optimizeBandwidths(kde: "KernelDensityEstimator", bandwidths: "DataVector") -> "void":
    return _pysgpp_swig.ScottsRule_optimizeBandwidths(kde, bandwidths)

class MaximumLikelihoodCrossValidation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def optimizeBandwidths(kde: "KernelDensityEstimator", bandwidths: "DataVector") -> "void":
        return _pysgpp_swig.MaximumLikelihoodCrossValidation_optimizeBandwidths(kde, bandwidths)

    def __init__(self):
        _pysgpp_swig.MaximumLikelihoodCrossValidation_swiginit(self, _pysgpp_swig.new_MaximumLikelihoodCrossValidation())
    __swig_destroy__ = _pysgpp_swig.delete_MaximumLikelihoodCrossValidation

# Register MaximumLikelihoodCrossValidation in _pysgpp_swig:
_pysgpp_swig.MaximumLikelihoodCrossValidation_swigregister(MaximumLikelihoodCrossValidation)

def MaximumLikelihoodCrossValidation_optimizeBandwidths(kde: "KernelDensityEstimator", bandwidths: "DataVector") -> "void":
    return _pysgpp_swig.MaximumLikelihoodCrossValidation_optimizeBandwidths(kde, bandwidths)

class CrossvalidationForRegularizationConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enable_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_enable__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_enable__set)
    kfold_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_kfold__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_kfold__set)
    seed_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_seed__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_seed__set)
    shuffle_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_shuffle__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_shuffle__set)
    silent_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_silent__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_silent__set)
    lambda_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambda__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambda__set)
    lambdaStart_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambdaStart__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambdaStart__set)
    lambdaEnd_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambdaEnd__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambdaEnd__set)
    lambdaSteps_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambdaSteps__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_lambdaSteps__set)
    logScale_ = property(_pysgpp_swig.CrossvalidationForRegularizationConfiguration_logScale__get, _pysgpp_swig.CrossvalidationForRegularizationConfiguration_logScale__set)

    def __init__(self):
        _pysgpp_swig.CrossvalidationForRegularizationConfiguration_swiginit(self, _pysgpp_swig.new_CrossvalidationForRegularizationConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_CrossvalidationForRegularizationConfiguration

# Register CrossvalidationForRegularizationConfiguration in _pysgpp_swig:
_pysgpp_swig.CrossvalidationForRegularizationConfiguration_swigregister(CrossvalidationForRegularizationConfiguration)

class MakePositiveConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.MakePositiveConfiguration_swiginit(self, _pysgpp_swig.new_MakePositiveConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_MakePositiveConfiguration

# Register MakePositiveConfiguration in _pysgpp_swig:
_pysgpp_swig.MakePositiveConfiguration_swigregister(MakePositiveConfiguration)

class SGDEConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    makePositive_ = property(_pysgpp_swig.SGDEConfiguration_makePositive__get, _pysgpp_swig.SGDEConfiguration_makePositive__set)
    makePositive_candidateSearchAlgorithm_ = property(_pysgpp_swig.SGDEConfiguration_makePositive_candidateSearchAlgorithm__get, _pysgpp_swig.SGDEConfiguration_makePositive_candidateSearchAlgorithm__set)
    makePositive_interpolationAlgorithm_ = property(_pysgpp_swig.SGDEConfiguration_makePositive_interpolationAlgorithm__get, _pysgpp_swig.SGDEConfiguration_makePositive_interpolationAlgorithm__set)
    makePositive_generateConsistentGrid_ = property(_pysgpp_swig.SGDEConfiguration_makePositive_generateConsistentGrid__get, _pysgpp_swig.SGDEConfiguration_makePositive_generateConsistentGrid__set)
    unitIntegrand_ = property(_pysgpp_swig.SGDEConfiguration_unitIntegrand__get, _pysgpp_swig.SGDEConfiguration_unitIntegrand__set)

    def __init__(self):
        _pysgpp_swig.SGDEConfiguration_swiginit(self, _pysgpp_swig.new_SGDEConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_SGDEConfiguration

# Register SGDEConfiguration in _pysgpp_swig:
_pysgpp_swig.SGDEConfiguration_swigregister(SGDEConfiguration)

class SparseGridDensityEstimatorConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SparseGridDensityEstimatorConfiguration_swiginit(self, _pysgpp_swig.new_SparseGridDensityEstimatorConfiguration(*args))

    def clone(self) -> "sgpp::datadriven::SparseGridDensityEstimatorConfiguration *":
        return _pysgpp_swig.SparseGridDensityEstimatorConfiguration_clone(self)

    def initConfig(self) -> "void":
        return _pysgpp_swig.SparseGridDensityEstimatorConfiguration_initConfig(self)

    def stringToRegularizationType(self, regularizationType: "std::string &") -> "sgpp::datadriven::RegularizationType":
        return _pysgpp_swig.SparseGridDensityEstimatorConfiguration_stringToRegularizationType(self, regularizationType)

    def stringToSolverType(self, solverType: "std::string &") -> "sgpp::solver::SLESolverType":
        return _pysgpp_swig.SparseGridDensityEstimatorConfiguration_stringToSolverType(self, solverType)
    __swig_destroy__ = _pysgpp_swig.delete_SparseGridDensityEstimatorConfiguration

# Register SparseGridDensityEstimatorConfiguration in _pysgpp_swig:
_pysgpp_swig.SparseGridDensityEstimatorConfiguration_swigregister(SparseGridDensityEstimatorConfiguration)

class SparseGridDensityEstimator(DensityEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SparseGridDensityEstimator_swiginit(self, _pysgpp_swig.new_SparseGridDensityEstimator(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SparseGridDensityEstimator

    def pdf(self, *args) -> "void":
        return _pysgpp_swig.SparseGridDensityEstimator_pdf(self, *args)

    def cov(self, cov: "DataMatrix", bounds: "DataMatrix"=None) -> "void":
        return _pysgpp_swig.SparseGridDensityEstimator_cov(self, cov, bounds)

    def getSamples(self, *args) -> "std::shared_ptr< sgpp::base::DataMatrix >":
        return _pysgpp_swig.SparseGridDensityEstimator_getSamples(self, *args)

    def getSurpluses(self) -> "sgpp::base::DataVector &":
        return _pysgpp_swig.SparseGridDensityEstimator_getSurpluses(self)

    def getGrid(self) -> "sgpp::base::Grid &":
        return _pysgpp_swig.SparseGridDensityEstimator_getGrid(self)

    def train(self, grid: "Grid", alpha: "DataVector", train: "DataMatrix", lambdaReg: "double") -> "void":
        return _pysgpp_swig.SparseGridDensityEstimator_train(self, grid, alpha, train, lambdaReg)

    def margToDimX(self, idim: "size_t") -> "sgpp::datadriven::SparseGridDensityEstimator *":
        return _pysgpp_swig.SparseGridDensityEstimator_margToDimX(self, idim)

    def marginalize(self, idim: "size_t") -> "sgpp::datadriven::SparseGridDensityEstimator *":
        return _pysgpp_swig.SparseGridDensityEstimator_marginalize(self, idim)

# Register SparseGridDensityEstimator in _pysgpp_swig:
_pysgpp_swig.SparseGridDensityEstimator_swigregister(SparseGridDensityEstimator)

class LearnerSGDEConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.LearnerSGDEConfiguration_swiginit(self, _pysgpp_swig.new_LearnerSGDEConfiguration(*args))

    def clone(self) -> "sgpp::datadriven::LearnerSGDEConfiguration *":
        return _pysgpp_swig.LearnerSGDEConfiguration_clone(self)

    def initConfig(self) -> "void":
        return _pysgpp_swig.LearnerSGDEConfiguration_initConfig(self)

    def stringToGridType(self, gridType: "std::string &") -> "sgpp::base::GridType":
        return _pysgpp_swig.LearnerSGDEConfiguration_stringToGridType(self, gridType)

    def stringToRegularizationType(self, regularizationType: "std::string &") -> "sgpp::datadriven::RegularizationType":
        return _pysgpp_swig.LearnerSGDEConfiguration_stringToRegularizationType(self, regularizationType)

    def stringToSolverType(self, solverType: "std::string &") -> "sgpp::solver::SLESolverType":
        return _pysgpp_swig.LearnerSGDEConfiguration_stringToSolverType(self, solverType)
    __swig_destroy__ = _pysgpp_swig.delete_LearnerSGDEConfiguration

# Register LearnerSGDEConfiguration in _pysgpp_swig:
_pysgpp_swig.LearnerSGDEConfiguration_swigregister(LearnerSGDEConfiguration)

class LearnerSGDE(DensityEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.LearnerSGDE_swiginit(self, _pysgpp_swig.new_LearnerSGDE(*args))
    __swig_destroy__ = _pysgpp_swig.delete_LearnerSGDE

    def pdf(self, *args) -> "void":
        return _pysgpp_swig.LearnerSGDE_pdf(self, *args)

    def cov(self, cov: "DataMatrix", bounds: "DataMatrix"=None) -> "void":
        return _pysgpp_swig.LearnerSGDE_cov(self, cov, bounds)

    def getSamples(self, *args) -> "std::shared_ptr< sgpp::base::DataMatrix >":
        return _pysgpp_swig.LearnerSGDE_getSamples(self, *args)

    def getSurpluses(self) -> "sgpp::base::DataVector *":
        return _pysgpp_swig.LearnerSGDE_getSurpluses(self)

    def getGrid(self) -> "sgpp::base::Grid *":
        return _pysgpp_swig.LearnerSGDE_getGrid(self)

    def getSharedSurpluses(self) -> "std::shared_ptr< sgpp::base::DataVector >":
        return _pysgpp_swig.LearnerSGDE_getSharedSurpluses(self)

    def getSharedGrid(self) -> "std::shared_ptr< sgpp::base::Grid >":
        return _pysgpp_swig.LearnerSGDE_getSharedGrid(self)

    def train(self, *args) -> "void":
        return _pysgpp_swig.LearnerSGDE_train(self, *args)

    def trainOnline(self, labels: "DataVector", testData: "DataMatrix", testLabels: "DataVector", validData: "DataMatrix", validLabels: "DataVector", classLabels: "DataVector", maxDataPasses: "size_t", refType: "std::string", refMonitor: "std::string", refPeriod: "size_t", accDeclineThreshold: "double", accDeclineBufferSize: "size_t", minRefInterval: "size_t", usePrior: "bool") -> "void":
        return _pysgpp_swig.LearnerSGDE_trainOnline(self, labels, testData, testLabels, validData, validLabels, classLabels, maxDataPasses, refType, refMonitor, refPeriod, accDeclineThreshold, accDeclineBufferSize, minRefInterval, usePrior)

    def storeResults(self, testDataset: "DataMatrix") -> "void":
        return _pysgpp_swig.LearnerSGDE_storeResults(self, testDataset)

    def predict(self, testDataset: "DataMatrix", predictedLabels: "DataVector") -> "void":
        return _pysgpp_swig.LearnerSGDE_predict(self, testDataset, predictedLabels)

    def getAccuracy(self, *args) -> "double":
        return _pysgpp_swig.LearnerSGDE_getAccuracy(self, *args)

    def getError(self, data: "DataMatrix", labels: "DataVector", threshold: "double const", errorType: "std::string") -> "double":
        return _pysgpp_swig.LearnerSGDE_getError(self, data, labels, threshold, errorType)
    error = property(_pysgpp_swig.LearnerSGDE_error_get, _pysgpp_swig.LearnerSGDE_error_set)
    avgErrors = property(_pysgpp_swig.LearnerSGDE_avgErrors_get, _pysgpp_swig.LearnerSGDE_avgErrors_set)

# Register LearnerSGDE in _pysgpp_swig:
_pysgpp_swig.LearnerSGDE_swigregister(LearnerSGDE)

class RegressionLearner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.RegressionLearner_swiginit(self, _pysgpp_swig.new_RegressionLearner(*args))

    def train(self, trainDataset: "DataMatrix", classes: "DataVector") -> "void":
        return _pysgpp_swig.RegressionLearner_train(self, trainDataset, classes)

    def predict(self, data: "DataMatrix") -> "sgpp::base::DataVector":
        return _pysgpp_swig.RegressionLearner_predict(self, data)

    def getGridSize(self) -> "size_t":
        return _pysgpp_swig.RegressionLearner_getGridSize(self)

    def getGrid(self) -> "sgpp::base::Grid &":
        return _pysgpp_swig.RegressionLearner_getGrid(self)

    def getMSE(self, data: "DataMatrix", y: "DataVector") -> "double":
        return _pysgpp_swig.RegressionLearner_getMSE(self, data, y)

    def getWeights(self) -> "sgpp::base::DataVector":
        return _pysgpp_swig.RegressionLearner_getWeights(self)

    def setWeights(self, weights: "DataVector") -> "void":
        return _pysgpp_swig.RegressionLearner_setWeights(self, weights)
    __swig_destroy__ = _pysgpp_swig.delete_RegressionLearner

# Register RegressionLearner in _pysgpp_swig:
_pysgpp_swig.RegressionLearner_swigregister(RegressionLearner)

class ClassificationLearner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.ClassificationLearner_swiginit(self, _pysgpp_swig.new_ClassificationLearner(*args))

    def train(self, trainDataset: "DataMatrix", classes: "DataVector") -> "void":
        return _pysgpp_swig.ClassificationLearner_train(self, trainDataset, classes)

    def predict(self, data: "DataMatrix") -> "sgpp::base::DataVector":
        return _pysgpp_swig.ClassificationLearner_predict(self, data)

    def predictWithCertainty(self, data: "DataMatrix") -> "std::pair< sgpp::base::DataVector,sgpp::base::DataVector >":
        return _pysgpp_swig.ClassificationLearner_predictWithCertainty(self, data)

    def getGridSize(self) -> "size_t":
        return _pysgpp_swig.ClassificationLearner_getGridSize(self)

    def getAccuracy(self, data: "DataMatrix", y: "DataVector") -> "double":
        return _pysgpp_swig.ClassificationLearner_getAccuracy(self, data, y)
    __swig_destroy__ = _pysgpp_swig.delete_ClassificationLearner

# Register ClassificationLearner in _pysgpp_swig:
_pysgpp_swig.ClassificationLearner_swigregister(ClassificationLearner)

class NearestNeighbors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rows: "size_t", cols: "size_t"):
        _pysgpp_swig.NearestNeighbors_swiginit(self, _pysgpp_swig.new_NearestNeighbors(rows, cols))

    def getAllInteractions(self, level: "size_t", threshold: "double") -> "std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >":
        return _pysgpp_swig.NearestNeighbors_getAllInteractions(self, level, threshold)
    __swig_destroy__ = _pysgpp_swig.delete_NearestNeighbors

# Register NearestNeighbors in _pysgpp_swig:
_pysgpp_swig.NearestNeighbors_swigregister(NearestNeighbors)

class LearnerSGD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridConfig: "RegularGridConfiguration", adaptivityConfig: "AdaptivityConfiguration", pTrainData: "DataMatrix", pTrainLabels: "DataVector", pTestData: "DataMatrix", pTestLabels: "DataVector", pValData: "DataMatrix", pValLabels: "DataVector", _lambda: "double", gamma: "double", batchSize: "size_t", useValidData: "bool"):
        _pysgpp_swig.LearnerSGD_swiginit(self, _pysgpp_swig.new_LearnerSGD(gridConfig, adaptivityConfig, pTrainData, pTrainLabels, pTestData, pTestLabels, pValData, pValLabels, _lambda, gamma, batchSize, useValidData))
    __swig_destroy__ = _pysgpp_swig.delete_LearnerSGD

    def initialize(self) -> "void":
        return _pysgpp_swig.LearnerSGD_initialize(self)

    def train(self, maxDataPasses: "size_t", refType: "std::string", refMonitor: "std::string", refPeriod: "size_t", errorDeclineThreshold: "double", errorDeclineBufferSize: "size_t", minRefInterval: "size_t") -> "void":
        return _pysgpp_swig.LearnerSGD_train(self, maxDataPasses, refType, refMonitor, refPeriod, errorDeclineThreshold, errorDeclineBufferSize, minRefInterval)

    def getAccuracy(self, testData: "DataMatrix", testLabels: "DataVector", threshold: "double") -> "double":
        return _pysgpp_swig.LearnerSGD_getAccuracy(self, testData, testLabels, threshold)

    def storeResults(self, testDataset: "DataMatrix") -> "void":
        return _pysgpp_swig.LearnerSGD_storeResults(self, testDataset)
    error = property(_pysgpp_swig.LearnerSGD_error_get, _pysgpp_swig.LearnerSGD_error_set)
    avgErrors = property(_pysgpp_swig.LearnerSGD_avgErrors_get, _pysgpp_swig.LearnerSGD_avgErrors_set)

# Register LearnerSGD in _pysgpp_swig:
_pysgpp_swig.LearnerSGD_swigregister(LearnerSGD)

class LearnerSVM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridConfig: "RegularGridConfiguration", adaptConfig: "AdaptivityConfiguration", pTrainData: "DataMatrix", pTrainLabels: "DataVector", pTestData: "DataMatrix", pTestLabels: "DataVector", pValidData: "DataMatrix", pValidLabels: "DataVector"):
        _pysgpp_swig.LearnerSVM_swiginit(self, _pysgpp_swig.new_LearnerSVM(gridConfig, adaptConfig, pTrainData, pTrainLabels, pTestData, pTestLabels, pValidData, pValidLabels))
    __swig_destroy__ = _pysgpp_swig.delete_LearnerSVM

    def initialize(self, budget: "size_t") -> "void":
        return _pysgpp_swig.LearnerSVM_initialize(self, budget)

    def train(self, maxDataPasses: "size_t", _lambda: "double", betaRef: "double", refType: "std::string", refMonitor: "std::string", refPeriod: "size_t", errorDeclineThreshold: "double", errorDeclineBufferSize: "size_t", minRefInterval: "size_t") -> "void":
        return _pysgpp_swig.LearnerSVM_train(self, maxDataPasses, _lambda, betaRef, refType, refMonitor, refPeriod, errorDeclineThreshold, errorDeclineBufferSize, minRefInterval)

    def storeResults(self, testDataset: "DataMatrix") -> "void":
        return _pysgpp_swig.LearnerSVM_storeResults(self, testDataset)

    def getAccuracy(self, *args) -> "double":
        return _pysgpp_swig.LearnerSVM_getAccuracy(self, *args)

    def predict(self, testData: "DataMatrix", predictedLabels: "DataVector") -> "void":
        return _pysgpp_swig.LearnerSVM_predict(self, testData, predictedLabels)

    def getError(self, data: "DataMatrix", labels: "DataVector", errorType: "std::string") -> "double":
        return _pysgpp_swig.LearnerSVM_getError(self, data, labels, errorType)
    error = property(_pysgpp_swig.LearnerSVM_error_get, _pysgpp_swig.LearnerSVM_error_set)
    avgErrors = property(_pysgpp_swig.LearnerSVM_avgErrors_get, _pysgpp_swig.LearnerSVM_avgErrors_set)

# Register LearnerSVM in _pysgpp_swig:
_pysgpp_swig.LearnerSVM_swigregister(LearnerSVM)

class PrimalDualSVM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim: "size_t", inputDim: "size_t", budget: "size_t", useBias: "bool"):
        _pysgpp_swig.PrimalDualSVM_swiginit(self, _pysgpp_swig.new_PrimalDualSVM(dim, inputDim, budget, useBias))
    __swig_destroy__ = _pysgpp_swig.delete_PrimalDualSVM

    def predictRaw(self, grid: "Grid", x: "DataVector", dataDim: "size_t", trans: "bool"=False) -> "double":
        return _pysgpp_swig.PrimalDualSVM_predictRaw(self, grid, x, dataDim, trans)

    def predict(self, grid: "Grid", x: "DataVector", dataDim: "size_t") -> "int":
        return _pysgpp_swig.PrimalDualSVM_predict(self, grid, x, dataDim)

    def add(self, grid: "Grid", x: "DataVector", alpha: "double", dataDim: "size_t") -> "void":
        return _pysgpp_swig.PrimalDualSVM_add(self, grid, x, alpha, dataDim)

    def multiply(self, scalar: "double") -> "void":
        return _pysgpp_swig.PrimalDualSVM_multiply(self, scalar)
    svs = property(_pysgpp_swig.PrimalDualSVM_svs_get, _pysgpp_swig.PrimalDualSVM_svs_set)
    alphas = property(_pysgpp_swig.PrimalDualSVM_alphas_get, _pysgpp_swig.PrimalDualSVM_alphas_set)
    norms = property(_pysgpp_swig.PrimalDualSVM_norms_get, _pysgpp_swig.PrimalDualSVM_norms_set)
    w = property(_pysgpp_swig.PrimalDualSVM_w_get, _pysgpp_swig.PrimalDualSVM_w_set)
    w2 = property(_pysgpp_swig.PrimalDualSVM_w2_get, _pysgpp_swig.PrimalDualSVM_w2_set)

# Register PrimalDualSVM in _pysgpp_swig:
_pysgpp_swig.PrimalDualSVM_swigregister(PrimalDualSVM)

class MultiGridRefinementFunctor(RefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setGridIndex(self, grid_index: "size_t") -> "void":
        return _pysgpp_swig.MultiGridRefinementFunctor_setGridIndex(self, grid_index)

    def getNumGrids(self) -> "size_t":
        return _pysgpp_swig.MultiGridRefinementFunctor_getNumGrids(self)

    def preComputeEvaluations(self) -> "void":
        return _pysgpp_swig.MultiGridRefinementFunctor_preComputeEvaluations(self)
    __swig_destroy__ = _pysgpp_swig.delete_MultiGridRefinementFunctor

# Register MultiGridRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.MultiGridRefinementFunctor_swigregister(MultiGridRefinementFunctor)

class MultiSurplusRefinementFunctor(MultiGridRefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grids: "std::vector< sgpp::base::Grid *,std::allocator< sgpp::base::Grid * > >", alphas: "std::vector< sgpp::base::DataVector *,std::allocator< sgpp::base::DataVector * > >", refinements_num: "size_t"=1, level_penalize: "bool"=False, threshold: "double"=0.0):
        _pysgpp_swig.MultiSurplusRefinementFunctor_swiginit(self, _pysgpp_swig.new_MultiSurplusRefinementFunctor(grids, alphas, refinements_num, level_penalize, threshold))
    __swig_destroy__ = _pysgpp_swig.delete_MultiSurplusRefinementFunctor

# Register MultiSurplusRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.MultiSurplusRefinementFunctor_swigregister(MultiSurplusRefinementFunctor)

class ClassificationRefinementFunctor(MultiGridRefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.ClassificationRefinementFunctor_swiginit(self, _pysgpp_swig.new_ClassificationRefinementFunctor(*args))
    __swig_destroy__ = _pysgpp_swig.delete_ClassificationRefinementFunctor

    def adaptAllGrids(self) -> "std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >":
        return _pysgpp_swig.ClassificationRefinementFunctor_adaptAllGrids(self)

# Register ClassificationRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.ClassificationRefinementFunctor_swigregister(ClassificationRefinementFunctor)

class DataBasedRefinementFunctor(MultiGridRefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.DataBasedRefinementFunctor_swiginit(self, _pysgpp_swig.new_DataBasedRefinementFunctor(*args))
    __swig_destroy__ = _pysgpp_swig.delete_DataBasedRefinementFunctor

    def setData(self, data: "DataMatrix", targets: "DataVector") -> "void":
        return _pysgpp_swig.DataBasedRefinementFunctor_setData(self, data, targets)

    def computeH(self) -> "void":
        return _pysgpp_swig.DataBasedRefinementFunctor_computeH(self)

    def getHk(self, index: "size_t") -> "sgpp::base::DataMatrix &":
        return _pysgpp_swig.DataBasedRefinementFunctor_getHk(self, index)

# Register DataBasedRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.DataBasedRefinementFunctor_swigregister(DataBasedRefinementFunctor)

class GridPointBasedRefinementFunctor(MultiGridRefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grids: "std::vector< sgpp::base::Grid *,std::allocator< sgpp::base::Grid * > >", alphas: "std::vector< sgpp::base::DataVector *,std::allocator< sgpp::base::DataVector * > >", priors: "DoubleVector", refinements_num: "size_t"=1, level_penalize: "bool"=False, pre_compute: "bool"=False, threshold: "double"=0.0):
        _pysgpp_swig.GridPointBasedRefinementFunctor_swiginit(self, _pysgpp_swig.new_GridPointBasedRefinementFunctor(grids, alphas, priors, refinements_num, level_penalize, pre_compute, threshold))
    __swig_destroy__ = _pysgpp_swig.delete_GridPointBasedRefinementFunctor

# Register GridPointBasedRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.GridPointBasedRefinementFunctor_swigregister(GridPointBasedRefinementFunctor)

class ZeroCrossingRefinementFunctor(MultiGridRefinementFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grids: "std::vector< sgpp::base::Grid *,std::allocator< sgpp::base::Grid * > >", alphas: "std::vector< sgpp::base::DataVector *,std::allocator< sgpp::base::DataVector * > >", priors: "DoubleVector", refinements_num: "size_t"=1, level_penalize: "bool"=False, pre_compute: "bool"=False, threshold: "double"=0.0):
        _pysgpp_swig.ZeroCrossingRefinementFunctor_swiginit(self, _pysgpp_swig.new_ZeroCrossingRefinementFunctor(grids, alphas, priors, refinements_num, level_penalize, pre_compute, threshold))
    __swig_destroy__ = _pysgpp_swig.delete_ZeroCrossingRefinementFunctor

# Register ZeroCrossingRefinementFunctor in _pysgpp_swig:
_pysgpp_swig.ZeroCrossingRefinementFunctor_swigregister(ZeroCrossingRefinementFunctor)

class DensityEstimationTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::datadriven::DensityEstimationType":
        return _pysgpp_swig.DensityEstimationTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::datadriven::DensityEstimationType") -> "std::string const &":
        return _pysgpp_swig.DensityEstimationTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.DensityEstimationTypeParser_swiginit(self, _pysgpp_swig.new_DensityEstimationTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_DensityEstimationTypeParser

# Register DensityEstimationTypeParser in _pysgpp_swig:
_pysgpp_swig.DensityEstimationTypeParser_swigregister(DensityEstimationTypeParser)

def DensityEstimationTypeParser_parse(input: "std::string const &") -> "sgpp::datadriven::DensityEstimationType":
    return _pysgpp_swig.DensityEstimationTypeParser_parse(input)

def DensityEstimationTypeParser_toString(type: "sgpp::datadriven::DensityEstimationType") -> "std::string const &":
    return _pysgpp_swig.DensityEstimationTypeParser_toString(type)

class MatrixDecompositionTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::datadriven::MatrixDecompositionType":
        return _pysgpp_swig.MatrixDecompositionTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::datadriven::MatrixDecompositionType") -> "std::string const &":
        return _pysgpp_swig.MatrixDecompositionTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.MatrixDecompositionTypeParser_swiginit(self, _pysgpp_swig.new_MatrixDecompositionTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_MatrixDecompositionTypeParser

# Register MatrixDecompositionTypeParser in _pysgpp_swig:
_pysgpp_swig.MatrixDecompositionTypeParser_swigregister(MatrixDecompositionTypeParser)

def MatrixDecompositionTypeParser_parse(input: "std::string const &") -> "sgpp::datadriven::MatrixDecompositionType":
    return _pysgpp_swig.MatrixDecompositionTypeParser_parse(input)

def MatrixDecompositionTypeParser_toString(type: "sgpp::datadriven::MatrixDecompositionType") -> "std::string const &":
    return _pysgpp_swig.MatrixDecompositionTypeParser_toString(type)

class RegularizationTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::datadriven::RegularizationType":
        return _pysgpp_swig.RegularizationTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::datadriven::RegularizationType") -> "std::string const &":
        return _pysgpp_swig.RegularizationTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.RegularizationTypeParser_swiginit(self, _pysgpp_swig.new_RegularizationTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_RegularizationTypeParser

# Register RegularizationTypeParser in _pysgpp_swig:
_pysgpp_swig.RegularizationTypeParser_swigregister(RegularizationTypeParser)

def RegularizationTypeParser_parse(input: "std::string const &") -> "sgpp::datadriven::RegularizationType":
    return _pysgpp_swig.RegularizationTypeParser_parse(input)

def RegularizationTypeParser_toString(type: "sgpp::datadriven::RegularizationType") -> "std::string const &":
    return _pysgpp_swig.RegularizationTypeParser_toString(type)

DataSourceFileType_NONE = _pysgpp_swig.DataSourceFileType_NONE
DataSourceFileType_ARFF = _pysgpp_swig.DataSourceFileType_ARFF
DataSourceFileType_CSV = _pysgpp_swig.DataSourceFileType_CSV
DataSourceShufflingType_random = _pysgpp_swig.DataSourceShufflingType_random
DataSourceShufflingType_sequential = _pysgpp_swig.DataSourceShufflingType_sequential
class DataSourceConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filePath = property(_pysgpp_swig.DataSourceConfig_filePath_get, _pysgpp_swig.DataSourceConfig_filePath_set)
    fileType = property(_pysgpp_swig.DataSourceConfig_fileType_get, _pysgpp_swig.DataSourceConfig_fileType_set)
    isCompressed = property(_pysgpp_swig.DataSourceConfig_isCompressed_get, _pysgpp_swig.DataSourceConfig_isCompressed_set)
    numBatches = property(_pysgpp_swig.DataSourceConfig_numBatches_get, _pysgpp_swig.DataSourceConfig_numBatches_set)
    batchSize = property(_pysgpp_swig.DataSourceConfig_batchSize_get, _pysgpp_swig.DataSourceConfig_batchSize_set)
    validationPortion = property(_pysgpp_swig.DataSourceConfig_validationPortion_get, _pysgpp_swig.DataSourceConfig_validationPortion_set)
    hasTargets = property(_pysgpp_swig.DataSourceConfig_hasTargets_get, _pysgpp_swig.DataSourceConfig_hasTargets_set)
    dataTransformationConfig = property(_pysgpp_swig.DataSourceConfig_dataTransformationConfig_get, _pysgpp_swig.DataSourceConfig_dataTransformationConfig_set)
    shuffling = property(_pysgpp_swig.DataSourceConfig_shuffling_get, _pysgpp_swig.DataSourceConfig_shuffling_set)
    randomSeed = property(_pysgpp_swig.DataSourceConfig_randomSeed_get, _pysgpp_swig.DataSourceConfig_randomSeed_set)
    epochs = property(_pysgpp_swig.DataSourceConfig_epochs_get, _pysgpp_swig.DataSourceConfig_epochs_set)
    readinCutoff = property(_pysgpp_swig.DataSourceConfig_readinCutoff_get, _pysgpp_swig.DataSourceConfig_readinCutoff_set)
    readinClasses = property(_pysgpp_swig.DataSourceConfig_readinClasses_get, _pysgpp_swig.DataSourceConfig_readinClasses_set)
    readinColumns = property(_pysgpp_swig.DataSourceConfig_readinColumns_get, _pysgpp_swig.DataSourceConfig_readinColumns_set)
    testFilePath = property(_pysgpp_swig.DataSourceConfig_testFilePath_get, _pysgpp_swig.DataSourceConfig_testFilePath_set)
    testFileType = property(_pysgpp_swig.DataSourceConfig_testFileType_get, _pysgpp_swig.DataSourceConfig_testFileType_set)
    testHasTargets = property(_pysgpp_swig.DataSourceConfig_testHasTargets_get, _pysgpp_swig.DataSourceConfig_testHasTargets_set)
    testIsCompressed = property(_pysgpp_swig.DataSourceConfig_testIsCompressed_get, _pysgpp_swig.DataSourceConfig_testIsCompressed_set)
    testNumBatches = property(_pysgpp_swig.DataSourceConfig_testNumBatches_get, _pysgpp_swig.DataSourceConfig_testNumBatches_set)
    testBatchSize = property(_pysgpp_swig.DataSourceConfig_testBatchSize_get, _pysgpp_swig.DataSourceConfig_testBatchSize_set)
    testReadinCutoff = property(_pysgpp_swig.DataSourceConfig_testReadinCutoff_get, _pysgpp_swig.DataSourceConfig_testReadinCutoff_set)
    testReadinClasses = property(_pysgpp_swig.DataSourceConfig_testReadinClasses_get, _pysgpp_swig.DataSourceConfig_testReadinClasses_set)
    testReadinColumns = property(_pysgpp_swig.DataSourceConfig_testReadinColumns_get, _pysgpp_swig.DataSourceConfig_testReadinColumns_set)

    def __init__(self):
        _pysgpp_swig.DataSourceConfig_swiginit(self, _pysgpp_swig.new_DataSourceConfig())
    __swig_destroy__ = _pysgpp_swig.delete_DataSourceConfig

# Register DataSourceConfig in _pysgpp_swig:
_pysgpp_swig.DataSourceConfig_swigregister(DataSourceConfig)

class DataShufflingFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DataShufflingFunctor

    def clone(self) -> "sgpp::datadriven::DataShufflingFunctor *":
        return _pysgpp_swig.DataShufflingFunctor_clone(self)

# Register DataShufflingFunctor in _pysgpp_swig:
_pysgpp_swig.DataShufflingFunctor_swigregister(DataShufflingFunctor)

class DataSourceShufflingTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::datadriven::DataSourceShufflingType":
        return _pysgpp_swig.DataSourceShufflingTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::datadriven::DataSourceShufflingType") -> "std::string const &":
        return _pysgpp_swig.DataSourceShufflingTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.DataSourceShufflingTypeParser_swiginit(self, _pysgpp_swig.new_DataSourceShufflingTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_DataSourceShufflingTypeParser

# Register DataSourceShufflingTypeParser in _pysgpp_swig:
_pysgpp_swig.DataSourceShufflingTypeParser_swigregister(DataSourceShufflingTypeParser)

def DataSourceShufflingTypeParser_parse(input: "std::string const &") -> "sgpp::datadriven::DataSourceShufflingType":
    return _pysgpp_swig.DataSourceShufflingTypeParser_parse(input)

def DataSourceShufflingTypeParser_toString(type: "sgpp::datadriven::DataSourceShufflingType") -> "std::string const &":
    return _pysgpp_swig.DataSourceShufflingTypeParser_toString(type)

class DataShufflingFunctorFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.DataShufflingFunctorFactory_swiginit(self, _pysgpp_swig.new_DataShufflingFunctorFactory())

    def buildDataShufflingFunctor(self, config: "DataSourceConfig") -> "sgpp::datadriven::DataShufflingFunctor *":
        return _pysgpp_swig.DataShufflingFunctorFactory_buildDataShufflingFunctor(self, config)
    __swig_destroy__ = _pysgpp_swig.delete_DataShufflingFunctorFactory

# Register DataShufflingFunctorFactory in _pysgpp_swig:
_pysgpp_swig.DataShufflingFunctorFactory_swigregister(DataShufflingFunctorFactory)

class DataShufflingFunctorRandom(DataShufflingFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "int64_t"=1337):
        _pysgpp_swig.DataShufflingFunctorRandom_swiginit(self, _pysgpp_swig.new_DataShufflingFunctorRandom(seed))
    __swig_destroy__ = _pysgpp_swig.delete_DataShufflingFunctorRandom

# Register DataShufflingFunctorRandom in _pysgpp_swig:
_pysgpp_swig.DataShufflingFunctorRandom_swigregister(DataShufflingFunctorRandom)

class DataShufflingFunctorSequential(DataShufflingFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.DataShufflingFunctorSequential_swiginit(self, _pysgpp_swig.new_DataShufflingFunctorSequential())
    __swig_destroy__ = _pysgpp_swig.delete_DataShufflingFunctorSequential

# Register DataShufflingFunctorSequential in _pysgpp_swig:
_pysgpp_swig.DataShufflingFunctorSequential_swigregister(DataShufflingFunctorSequential)

class DataShufflingFunctorCrossValidation(DataShufflingFunctor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, crossValidationConfig: "CrossvalidationConfiguration", shuffling: "DataShufflingFunctor"):
        _pysgpp_swig.DataShufflingFunctorCrossValidation_swiginit(self, _pysgpp_swig.new_DataShufflingFunctorCrossValidation(crossValidationConfig, shuffling))

    def setFold(self, fold: "size_t") -> "void":
        return _pysgpp_swig.DataShufflingFunctorCrossValidation_setFold(self, fold)

    def getCurrentFoldSize(self, numSamples: "size_t") -> "size_t":
        return _pysgpp_swig.DataShufflingFunctorCrossValidation_getCurrentFoldSize(self, numSamples)
    __swig_destroy__ = _pysgpp_swig.delete_DataShufflingFunctorCrossValidation

# Register DataShufflingFunctorCrossValidation in _pysgpp_swig:
_pysgpp_swig.DataShufflingFunctorCrossValidation_swigregister(DataShufflingFunctorCrossValidation)

class SampleProvider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SampleProvider

    def clone(self) -> "sgpp::datadriven::SampleProvider *":
        return _pysgpp_swig.SampleProvider_clone(self)

    def getNextSamples(self, howMany: "size_t") -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.SampleProvider_getNextSamples(self, howMany)

    def getAllSamples(self) -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.SampleProvider_getAllSamples(self)

    def getDim(self) -> "size_t":
        return _pysgpp_swig.SampleProvider_getDim(self)

    def getNumSamples(self) -> "size_t":
        return _pysgpp_swig.SampleProvider_getNumSamples(self)

    def reset(self) -> "void":
        return _pysgpp_swig.SampleProvider_reset(self)

# Register SampleProvider in _pysgpp_swig:
_pysgpp_swig.SampleProvider_swigregister(SampleProvider)

class FileSampleProvider(SampleProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def readFile(self, *args) -> "void":
        return _pysgpp_swig.FileSampleProvider_readFile(self, *args)

    def readString(self, *args) -> "void":
        return _pysgpp_swig.FileSampleProvider_readString(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_FileSampleProvider

# Register FileSampleProvider in _pysgpp_swig:
_pysgpp_swig.FileSampleProvider_swigregister(FileSampleProvider)

class ArffFileSampleProvider(FileSampleProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shuffling: "DataShufflingFunctor"=None):
        _pysgpp_swig.ArffFileSampleProvider_swiginit(self, _pysgpp_swig.new_ArffFileSampleProvider(shuffling))

    def readFile(self, *args) -> "void":
        return _pysgpp_swig.ArffFileSampleProvider_readFile(self, *args)

    def readString(self, *args) -> "void":
        return _pysgpp_swig.ArffFileSampleProvider_readString(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ArffFileSampleProvider

# Register ArffFileSampleProvider in _pysgpp_swig:
_pysgpp_swig.ArffFileSampleProvider_swigregister(ArffFileSampleProvider)

class FileSampleDecorator(FileSampleProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_FileSampleDecorator

    def readFile(self, *args) -> "void":
        return _pysgpp_swig.FileSampleDecorator_readFile(self, *args)

    def readString(self, *args) -> "void":
        return _pysgpp_swig.FileSampleDecorator_readString(self, *args)

# Register FileSampleDecorator in _pysgpp_swig:
_pysgpp_swig.FileSampleDecorator_swigregister(FileSampleDecorator)

class RosenblattTransformationConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numSamples = property(_pysgpp_swig.RosenblattTransformationConfig_numSamples_get, _pysgpp_swig.RosenblattTransformationConfig_numSamples_set)
    gridLevel = property(_pysgpp_swig.RosenblattTransformationConfig_gridLevel_get, _pysgpp_swig.RosenblattTransformationConfig_gridLevel_set)
    solverMaxIterations = property(_pysgpp_swig.RosenblattTransformationConfig_solverMaxIterations_get, _pysgpp_swig.RosenblattTransformationConfig_solverMaxIterations_set)
    solverEps = property(_pysgpp_swig.RosenblattTransformationConfig_solverEps_get, _pysgpp_swig.RosenblattTransformationConfig_solverEps_set)
    solverThreshold = property(_pysgpp_swig.RosenblattTransformationConfig_solverThreshold_get, _pysgpp_swig.RosenblattTransformationConfig_solverThreshold_set)

    def __init__(self):
        _pysgpp_swig.RosenblattTransformationConfig_swiginit(self, _pysgpp_swig.new_RosenblattTransformationConfig())
    __swig_destroy__ = _pysgpp_swig.delete_RosenblattTransformationConfig

# Register RosenblattTransformationConfig in _pysgpp_swig:
_pysgpp_swig.RosenblattTransformationConfig_swigregister(RosenblattTransformationConfig)

DataTransformationType_NONE = _pysgpp_swig.DataTransformationType_NONE
DataTransformationType_ROSENBLATT = _pysgpp_swig.DataTransformationType_ROSENBLATT
class DataTransformationConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pysgpp_swig.DataTransformationConfig_type_get, _pysgpp_swig.DataTransformationConfig_type_set)
    rosenblattConfig = property(_pysgpp_swig.DataTransformationConfig_rosenblattConfig_get, _pysgpp_swig.DataTransformationConfig_rosenblattConfig_set)

    def __init__(self):
        _pysgpp_swig.DataTransformationConfig_swiginit(self, _pysgpp_swig.new_DataTransformationConfig())
    __swig_destroy__ = _pysgpp_swig.delete_DataTransformationConfig

# Register DataTransformationConfig in _pysgpp_swig:
_pysgpp_swig.DataTransformationConfig_swigregister(DataTransformationConfig)

class DataTransformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DataTransformation

    def initialize(self, dataset: "Dataset", config: "DataTransformationConfig") -> "void":
        return _pysgpp_swig.DataTransformation_initialize(self, dataset, config)

    def doTransformation(self, dataset: "Dataset") -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.DataTransformation_doTransformation(self, dataset)

    def doInverseTransformation(self, dataset: "Dataset") -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.DataTransformation_doInverseTransformation(self, dataset)

# Register DataTransformation in _pysgpp_swig:
_pysgpp_swig.DataTransformation_swigregister(DataTransformation)

class DataTransformationTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::datadriven::DataTransformationType":
        return _pysgpp_swig.DataTransformationTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::datadriven::DataTransformationType") -> "std::string const &":
        return _pysgpp_swig.DataTransformationTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.DataTransformationTypeParser_swiginit(self, _pysgpp_swig.new_DataTransformationTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_DataTransformationTypeParser

# Register DataTransformationTypeParser in _pysgpp_swig:
_pysgpp_swig.DataTransformationTypeParser_swigregister(DataTransformationTypeParser)

def DataTransformationTypeParser_parse(input: "std::string const &") -> "sgpp::datadriven::DataTransformationType":
    return _pysgpp_swig.DataTransformationTypeParser_parse(input)

def DataTransformationTypeParser_toString(type: "sgpp::datadriven::DataTransformationType") -> "std::string const &":
    return _pysgpp_swig.DataTransformationTypeParser_toString(type)

class RosenblattTransformation(DataTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.RosenblattTransformation_swiginit(self, _pysgpp_swig.new_RosenblattTransformation())

    def createSGDELearner(self, dim: "size_t", config: "RosenblattTransformationConfig") -> "sgpp::datadriven::LearnerSGDE":
        return _pysgpp_swig.RosenblattTransformation_createSGDELearner(self, dim, config)
    __swig_destroy__ = _pysgpp_swig.delete_RosenblattTransformation

# Register RosenblattTransformation in _pysgpp_swig:
_pysgpp_swig.RosenblattTransformation_swigregister(RosenblattTransformation)

class DataSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DataSource

    def getConfig(self) -> "sgpp::datadriven::DataSourceConfig const &":
        return _pysgpp_swig.DataSource_getConfig(self)

    def getNextSamples(self) -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.DataSource_getNextSamples(self)

    def getAllSamples(self) -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.DataSource_getAllSamples(self)

    def getCurrentIteration(self) -> "size_t":
        return _pysgpp_swig.DataSource_getCurrentIteration(self)

    def getValidationData(self) -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.DataSource_getValidationData(self)

# Register DataSource in _pysgpp_swig:
_pysgpp_swig.DataSource_swigregister(DataSource)

class DataSourceSplitting(DataSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, config: "DataSourceConfig", sampleProvider: "SampleProvider"):
        _pysgpp_swig.DataSourceSplitting_swiginit(self, _pysgpp_swig.new_DataSourceSplitting(config, sampleProvider))

    def reset(self) -> "void":
        return _pysgpp_swig.DataSourceSplitting_reset(self)
    __swig_destroy__ = _pysgpp_swig.delete_DataSourceSplitting

# Register DataSourceSplitting in _pysgpp_swig:
_pysgpp_swig.DataSourceSplitting_swigregister(DataSourceSplitting)

class DataSourceCrossValidation(DataSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dataSourceConfig: "DataSourceConfig", crossValidationconfig: "CrossvalidationConfiguration", shuffling: "DataShufflingFunctorCrossValidation", sampleProvider: "SampleProvider"):
        _pysgpp_swig.DataSourceCrossValidation_swiginit(self, _pysgpp_swig.new_DataSourceCrossValidation(dataSourceConfig, crossValidationconfig, shuffling, sampleProvider))

    def setFold(self, foldIdx: "size_t") -> "void":
        return _pysgpp_swig.DataSourceCrossValidation_setFold(self, foldIdx)

    def reset(self) -> "void":
        return _pysgpp_swig.DataSourceCrossValidation_reset(self)

    def getCrossValidationConfig(self) -> "sgpp::datadriven::CrossvalidationConfiguration const &":
        return _pysgpp_swig.DataSourceCrossValidation_getCrossValidationConfig(self)
    __swig_destroy__ = _pysgpp_swig.delete_DataSourceCrossValidation

# Register DataSourceCrossValidation in _pysgpp_swig:
_pysgpp_swig.DataSourceCrossValidation_swigregister(DataSourceCrossValidation)

FitterType_RegressionLeastSquares = _pysgpp_swig.FitterType_RegressionLeastSquares
FitterType_DensityEstimation = _pysgpp_swig.FitterType_DensityEstimation
FitterType_Classification = _pysgpp_swig.FitterType_Classification
class FitterConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_FitterConfiguration

    def clone(self) -> "sgpp::datadriven::FitterConfiguration *":
        return _pysgpp_swig.FitterConfiguration_clone(self)

    def getDatabaseConfig(self) -> "sgpp::datadriven::DatabaseConfiguration const &":
        return _pysgpp_swig.FitterConfiguration_getDatabaseConfig(self)

    def getLearnerConfig(self) -> "sgpp::datadriven::LearnerConfiguration const &":
        return _pysgpp_swig.FitterConfiguration_getLearnerConfig(self)

    def getParallelConfig(self) -> "sgpp::datadriven::ParallelConfiguration const &":
        return _pysgpp_swig.FitterConfiguration_getParallelConfig(self)

    def getGeometryConfig(self) -> "sgpp::datadriven::GeometryConfiguration const &":
        return _pysgpp_swig.FitterConfiguration_getGeometryConfig(self)

    def getGridConfig(self, *args) -> "sgpp::base::GeneralGridConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getGridConfig(self, *args)

    def getRefinementConfig(self, *args) -> "sgpp::base::AdaptivityConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getRefinementConfig(self, *args)

    def getCrossvalidationConfig(self, *args) -> "sgpp::datadriven::CrossvalidationConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getCrossvalidationConfig(self, *args)

    def getDensityEstimationConfig(self, *args) -> "sgpp::datadriven::DensityEstimationConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getDensityEstimationConfig(self, *args)

    def getSolverRefineConfig(self, *args) -> "sgpp::solver::SLESolverConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getSolverRefineConfig(self, *args)

    def getSolverFinalConfig(self, *args) -> "sgpp::solver::SLESolverConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getSolverFinalConfig(self, *args)

    def getRegularizationConfig(self, *args) -> "sgpp::datadriven::RegularizationConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getRegularizationConfig(self, *args)

    def getMultipleEvalConfig(self, *args) -> "sgpp::datadriven::OperationMultipleEvalConfiguration &":
        return _pysgpp_swig.FitterConfiguration_getMultipleEvalConfig(self, *args)

    def setupDefaults(self) -> "void":
        return _pysgpp_swig.FitterConfiguration_setupDefaults(self)

    def readParams(self, parser: "sgpp::datadriven::DataMiningConfigParser const &") -> "void":
        return _pysgpp_swig.FitterConfiguration_readParams(self, parser)

# Register FitterConfiguration in _pysgpp_swig:
_pysgpp_swig.FitterConfiguration_swigregister(FitterConfiguration)

class FitterConfigurationLeastSquares(FitterConfiguration):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.FitterConfigurationLeastSquares_swiginit(self, _pysgpp_swig.new_FitterConfigurationLeastSquares())
    __swig_destroy__ = _pysgpp_swig.delete_FitterConfigurationLeastSquares

# Register FitterConfigurationLeastSquares in _pysgpp_swig:
_pysgpp_swig.FitterConfigurationLeastSquares_swigregister(FitterConfigurationLeastSquares)

class FitterConfigurationDensityEstimation(FitterConfiguration):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.FitterConfigurationDensityEstimation_swiginit(self, _pysgpp_swig.new_FitterConfigurationDensityEstimation())
    __swig_destroy__ = _pysgpp_swig.delete_FitterConfigurationDensityEstimation

# Register FitterConfigurationDensityEstimation in _pysgpp_swig:
_pysgpp_swig.FitterConfigurationDensityEstimation_swigregister(FitterConfigurationDensityEstimation)

class FitterConfigurationClassification(FitterConfigurationDensityEstimation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.FitterConfigurationClassification_swiginit(self, _pysgpp_swig.new_FitterConfigurationClassification())
    __swig_destroy__ = _pysgpp_swig.delete_FitterConfigurationClassification

# Register FitterConfigurationClassification in _pysgpp_swig:
_pysgpp_swig.FitterConfigurationClassification_swigregister(FitterConfigurationClassification)

class FitterTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::datadriven::FitterType":
        return _pysgpp_swig.FitterTypeParser_parse(input)

    @staticmethod
    def toString(type: "sgpp::datadriven::FitterType") -> "std::string const &":
        return _pysgpp_swig.FitterTypeParser_toString(type)

    def __init__(self):
        _pysgpp_swig.FitterTypeParser_swiginit(self, _pysgpp_swig.new_FitterTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_FitterTypeParser

# Register FitterTypeParser in _pysgpp_swig:
_pysgpp_swig.FitterTypeParser_swigregister(FitterTypeParser)

def FitterTypeParser_parse(input: "std::string const &") -> "sgpp::datadriven::FitterType":
    return _pysgpp_swig.FitterTypeParser_parse(input)

def FitterTypeParser_toString(type: "sgpp::datadriven::FitterType") -> "std::string const &":
    return _pysgpp_swig.FitterTypeParser_toString(type)

class ModelFittingBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_ModelFittingBase

    def fit(self, dataset: "Dataset") -> "void":
        return _pysgpp_swig.ModelFittingBase_fit(self, dataset)

    def adapt(self) -> "bool":
        return _pysgpp_swig.ModelFittingBase_adapt(self)

    def update(self, dataset: "Dataset") -> "void":
        return _pysgpp_swig.ModelFittingBase_update(self, dataset)

    def evaluate(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingBase_evaluate(self, *args)

    def computeResidual(self, validationData: "DataMatrix") -> "double":
        return _pysgpp_swig.ModelFittingBase_computeResidual(self, validationData)

    def updateRegularization(self, _lambda: "double") -> "void":
        return _pysgpp_swig.ModelFittingBase_updateRegularization(self, _lambda)

    def reset(self) -> "void":
        return _pysgpp_swig.ModelFittingBase_reset(self)

    def resetTraining(self) -> "void":
        return _pysgpp_swig.ModelFittingBase_resetTraining(self)

    def getProcessGrid(self) -> "std::shared_ptr< sgpp::datadriven::BlacsProcessGrid >":
        return _pysgpp_swig.ModelFittingBase_getProcessGrid(self)

    def getFitterConfiguration(self, *args) -> "sgpp::datadriven::FitterConfiguration &":
        return _pysgpp_swig.ModelFittingBase_getFitterConfiguration(self, *args)
    verboseSolver = property(_pysgpp_swig.ModelFittingBase_verboseSolver_get, _pysgpp_swig.ModelFittingBase_verboseSolver_set)

    def getDataset(self) -> "sgpp::datadriven::Dataset *":
        return _pysgpp_swig.ModelFittingBase_getDataset(self)

# Register ModelFittingBase in _pysgpp_swig:
_pysgpp_swig.ModelFittingBase_swigregister(ModelFittingBase)

class ModelFittingBaseSingleGrid(ModelFittingBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_ModelFittingBaseSingleGrid

    def getGrid(self) -> "sgpp::datadriven::Grid &":
        return _pysgpp_swig.ModelFittingBaseSingleGrid_getGrid(self)

    def getSurpluses(self) -> "sgpp::datadriven::DataVector &":
        return _pysgpp_swig.ModelFittingBaseSingleGrid_getSurpluses(self)

    def storeFitter(self) -> "std::string":
        return _pysgpp_swig.ModelFittingBaseSingleGrid_storeFitter(self)

# Register ModelFittingBaseSingleGrid in _pysgpp_swig:
_pysgpp_swig.ModelFittingBaseSingleGrid_swigregister(ModelFittingBaseSingleGrid)

class ModelFittingLeastSquares(ModelFittingBaseSingleGrid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, config: "FitterConfigurationLeastSquares"):
        _pysgpp_swig.ModelFittingLeastSquares_swiginit(self, _pysgpp_swig.new_ModelFittingLeastSquares(config))

    def evaluate(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingLeastSquares_evaluate(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ModelFittingLeastSquares

# Register ModelFittingLeastSquares in _pysgpp_swig:
_pysgpp_swig.ModelFittingLeastSquares_swigregister(ModelFittingLeastSquares)

class ModelFittingDensityEstimation(ModelFittingBaseSingleGrid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def fit(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingDensityEstimation_fit(self, *args)

    def update(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingDensityEstimation_update(self, *args)

    def evaluate(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingDensityEstimation_evaluate(self, *args)

    def adapt(self, *args) -> "bool":
        return _pysgpp_swig.ModelFittingDensityEstimation_adapt(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ModelFittingDensityEstimation

# Register ModelFittingDensityEstimation in _pysgpp_swig:
_pysgpp_swig.ModelFittingDensityEstimation_swigregister(ModelFittingDensityEstimation)

class ModelFittingDensityEstimationCombi(ModelFittingDensityEstimation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.ModelFittingDensityEstimationCombi_swiginit(self, _pysgpp_swig.new_ModelFittingDensityEstimationCombi(*args))

    def fit(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingDensityEstimationCombi_fit(self, *args)

    def update(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingDensityEstimationCombi_update(self, *args)

    def evaluate(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingDensityEstimationCombi_evaluate(self, *args)

    def adapt(self, *args) -> "bool":
        return _pysgpp_swig.ModelFittingDensityEstimationCombi_adapt(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ModelFittingDensityEstimationCombi

# Register ModelFittingDensityEstimationCombi in _pysgpp_swig:
_pysgpp_swig.ModelFittingDensityEstimationCombi_swigregister(ModelFittingDensityEstimationCombi)

class ModelFittingClassification(ModelFittingBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.ModelFittingClassification_swiginit(self, _pysgpp_swig.new_ModelFittingClassification(*args))

    def evaluate(self, *args) -> "void":
        return _pysgpp_swig.ModelFittingClassification_evaluate(self, *args)

    def storeClassificator(self) -> "void":
        return _pysgpp_swig.ModelFittingClassification_storeClassificator(self)

    def getModels(self) -> "std::vector< std::unique_ptr< sgpp::datadriven::ModelFittingDensityEstimation >,std::allocator< std::unique_ptr< sgpp::datadriven::ModelFittingDensityEstimation > > > *":
        return _pysgpp_swig.ModelFittingClassification_getModels(self)

    def getClassIdx(self) -> "std::map< double,size_t,std::less< double >,std::allocator< std::pair< double const,size_t > > >":
        return _pysgpp_swig.ModelFittingClassification_getClassIdx(self)
    __swig_destroy__ = _pysgpp_swig.delete_ModelFittingClassification

# Register ModelFittingClassification in _pysgpp_swig:
_pysgpp_swig.ModelFittingClassification_swigregister(ModelFittingClassification)

class VisualizationParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    perplexity = property(_pysgpp_swig.VisualizationParameters_perplexity_get, _pysgpp_swig.VisualizationParameters_perplexity_set)
    theta = property(_pysgpp_swig.VisualizationParameters_theta_get, _pysgpp_swig.VisualizationParameters_theta_set)
    seed = property(_pysgpp_swig.VisualizationParameters_seed_get, _pysgpp_swig.VisualizationParameters_seed_set)
    maxNumberIterations = property(_pysgpp_swig.VisualizationParameters_maxNumberIterations_get, _pysgpp_swig.VisualizationParameters_maxNumberIterations_set)
    targetDimension = property(_pysgpp_swig.VisualizationParameters_targetDimension_get, _pysgpp_swig.VisualizationParameters_targetDimension_set)
    numberCores = property(_pysgpp_swig.VisualizationParameters_numberCores_get, _pysgpp_swig.VisualizationParameters_numberCores_set)

    def __init__(self):
        _pysgpp_swig.VisualizationParameters_swiginit(self, _pysgpp_swig.new_VisualizationParameters())
    __swig_destroy__ = _pysgpp_swig.delete_VisualizationParameters

# Register VisualizationParameters in _pysgpp_swig:
_pysgpp_swig.VisualizationParameters_swigregister(VisualizationParameters)

VisualizationFileType_CSV = _pysgpp_swig.VisualizationFileType_CSV
VisualizationFileType_json = _pysgpp_swig.VisualizationFileType_json
class VisualizationGeneralConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    execute = property(_pysgpp_swig.VisualizationGeneralConfig_execute_get, _pysgpp_swig.VisualizationGeneralConfig_execute_set)
    algorithm = property(_pysgpp_swig.VisualizationGeneralConfig_algorithm_get, _pysgpp_swig.VisualizationGeneralConfig_algorithm_set)
    targetFileType = property(_pysgpp_swig.VisualizationGeneralConfig_targetFileType_get, _pysgpp_swig.VisualizationGeneralConfig_targetFileType_set)
    numBatches = property(_pysgpp_swig.VisualizationGeneralConfig_numBatches_get, _pysgpp_swig.VisualizationGeneralConfig_numBatches_set)
    crossValidation = property(_pysgpp_swig.VisualizationGeneralConfig_crossValidation_get, _pysgpp_swig.VisualizationGeneralConfig_crossValidation_set)
    targetDirectory = property(_pysgpp_swig.VisualizationGeneralConfig_targetDirectory_get, _pysgpp_swig.VisualizationGeneralConfig_targetDirectory_set)

    def __init__(self):
        _pysgpp_swig.VisualizationGeneralConfig_swiginit(self, _pysgpp_swig.new_VisualizationGeneralConfig())
    __swig_destroy__ = _pysgpp_swig.delete_VisualizationGeneralConfig

# Register VisualizationGeneralConfig in _pysgpp_swig:
_pysgpp_swig.VisualizationGeneralConfig_swigregister(VisualizationGeneralConfig)

class VisualizerConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.VisualizerConfiguration_swiginit(self, _pysgpp_swig.new_VisualizerConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_VisualizerConfiguration

    def setupDefaults(self) -> "void":
        return _pysgpp_swig.VisualizerConfiguration_setupDefaults(self)

    def readParams(self, parser: "sgpp::datadriven::DataMiningConfigParser const &") -> "void":
        return _pysgpp_swig.VisualizerConfiguration_readParams(self, parser)

    def getGeneralConfig(self) -> "sgpp::datadriven::VisualizationGeneralConfig &":
        return _pysgpp_swig.VisualizerConfiguration_getGeneralConfig(self)

    def getVisualizationParameters(self) -> "sgpp::datadriven::VisualizationParameters &":
        return _pysgpp_swig.VisualizerConfiguration_getVisualizationParameters(self)

# Register VisualizerConfiguration in _pysgpp_swig:
_pysgpp_swig.VisualizerConfiguration_swigregister(VisualizerConfiguration)

class Visualizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_Visualizer

    def runVisualization(self, model: "ModelFittingBase", dataSource: "DataSource", fold: "size_t", batch: "size_t") -> "void":
        return _pysgpp_swig.Visualizer_runVisualization(self, model, dataSource, fold, batch)

    def getVisualizerConfiguration(self) -> "sgpp::datadriven::VisualizerConfiguration const &":
        return _pysgpp_swig.Visualizer_getVisualizerConfiguration(self)

# Register Visualizer in _pysgpp_swig:
_pysgpp_swig.Visualizer_swigregister(Visualizer)

class VisualizerDummy(Visualizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.VisualizerDummy_swiginit(self, _pysgpp_swig.new_VisualizerDummy())
    __swig_destroy__ = _pysgpp_swig.delete_VisualizerDummy

# Register VisualizerDummy in _pysgpp_swig:
_pysgpp_swig.VisualizerDummy_swigregister(VisualizerDummy)

class VisualizerDensityEstimation(Visualizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.VisualizerDensityEstimation_swiginit(self, _pysgpp_swig.new_VisualizerDensityEstimation(*args))
    __swig_destroy__ = _pysgpp_swig.delete_VisualizerDensityEstimation

# Register VisualizerDensityEstimation in _pysgpp_swig:
_pysgpp_swig.VisualizerDensityEstimation_swigregister(VisualizerDensityEstimation)

class VisualizerClassification(VisualizerDensityEstimation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.VisualizerClassification_swiginit(self, _pysgpp_swig.new_VisualizerClassification(*args))
    __swig_destroy__ = _pysgpp_swig.delete_VisualizerClassification

# Register VisualizerClassification in _pysgpp_swig:
_pysgpp_swig.VisualizerClassification_swigregister(VisualizerClassification)

class Metric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_Metric

    def clone(self) -> "sgpp::datadriven::Metric *":
        return _pysgpp_swig.Metric_clone(self)

    def measure(self, predictedValues: "DataVector", trueValues: "DataVector", model: "ModelFittingBase", testDataset: "Dataset") -> "double":
        return _pysgpp_swig.Metric_measure(self, predictedValues, trueValues, model, testDataset)

    def measureLowerIsBetter(self, predictedValues: "DataVector", trueValues: "DataVector", model: "ModelFittingBase", testDataset: "Dataset") -> "double":
        return _pysgpp_swig.Metric_measureLowerIsBetter(self, predictedValues, trueValues, model, testDataset)

# Register Metric in _pysgpp_swig:
_pysgpp_swig.Metric_swigregister(Metric)

class MSE(Metric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.MSE_swiginit(self, _pysgpp_swig.new_MSE())
    __swig_destroy__ = _pysgpp_swig.delete_MSE

# Register MSE in _pysgpp_swig:
_pysgpp_swig.MSE_swigregister(MSE)

class Accuracy(Metric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.Accuracy_swiginit(self, _pysgpp_swig.new_Accuracy())
    __swig_destroy__ = _pysgpp_swig.delete_Accuracy

# Register Accuracy in _pysgpp_swig:
_pysgpp_swig.Accuracy_swigregister(Accuracy)

class NegativeLogLikelihood(Metric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.NegativeLogLikelihood_swiginit(self, _pysgpp_swig.new_NegativeLogLikelihood())
    __swig_destroy__ = _pysgpp_swig.delete_NegativeLogLikelihood

# Register NegativeLogLikelihood in _pysgpp_swig:
_pysgpp_swig.NegativeLogLikelihood_swigregister(NegativeLogLikelihood)

ScorerMetricType_mse = _pysgpp_swig.ScorerMetricType_mse
ScorerMetricType_nll = _pysgpp_swig.ScorerMetricType_nll
ScorerMetricType_accuracy = _pysgpp_swig.ScorerMetricType_accuracy
class ScorerConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    metric = property(_pysgpp_swig.ScorerConfiguration_metric_get, _pysgpp_swig.ScorerConfiguration_metric_set)

    def __init__(self):
        _pysgpp_swig.ScorerConfiguration_swiginit(self, _pysgpp_swig.new_ScorerConfiguration())
    __swig_destroy__ = _pysgpp_swig.delete_ScorerConfiguration

# Register ScorerConfiguration in _pysgpp_swig:
_pysgpp_swig.ScorerConfiguration_swigregister(ScorerConfiguration)

class ScorerMetricTypeParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(input: "std::string const &") -> "sgpp::datadriven::ScorerMetricType":
        return _pysgpp_swig.ScorerMetricTypeParser_parse(input)

    @staticmethod
    def parseRegularizationMetric(input: "std::string const &") -> "sgpp::datadriven::RegularizationMetricType":
        return _pysgpp_swig.ScorerMetricTypeParser_parseRegularizationMetric(input)

    @staticmethod
    def toString(type: "sgpp::datadriven::ScorerMetricType") -> "std::string const &":
        return _pysgpp_swig.ScorerMetricTypeParser_toString(type)

    @staticmethod
    def regularizationMetricToString(type: "sgpp::datadriven::RegularizationMetricType") -> "std::string const &":
        return _pysgpp_swig.ScorerMetricTypeParser_regularizationMetricToString(type)

    def __init__(self):
        _pysgpp_swig.ScorerMetricTypeParser_swiginit(self, _pysgpp_swig.new_ScorerMetricTypeParser())
    __swig_destroy__ = _pysgpp_swig.delete_ScorerMetricTypeParser

# Register ScorerMetricTypeParser in _pysgpp_swig:
_pysgpp_swig.ScorerMetricTypeParser_swigregister(ScorerMetricTypeParser)

def ScorerMetricTypeParser_parse(input: "std::string const &") -> "sgpp::datadriven::ScorerMetricType":
    return _pysgpp_swig.ScorerMetricTypeParser_parse(input)

def ScorerMetricTypeParser_parseRegularizationMetric(input: "std::string const &") -> "sgpp::datadriven::RegularizationMetricType":
    return _pysgpp_swig.ScorerMetricTypeParser_parseRegularizationMetric(input)

def ScorerMetricTypeParser_toString(type: "sgpp::datadriven::ScorerMetricType") -> "std::string const &":
    return _pysgpp_swig.ScorerMetricTypeParser_toString(type)

def ScorerMetricTypeParser_regularizationMetricToString(type: "sgpp::datadriven::RegularizationMetricType") -> "std::string const &":
    return _pysgpp_swig.ScorerMetricTypeParser_regularizationMetricToString(type)

class Scorer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.Scorer_swiginit(self, _pysgpp_swig.new_Scorer(*args))
    __swig_destroy__ = _pysgpp_swig.delete_Scorer

    def test(self, model: "ModelFittingBase", testDataset: "Dataset", lowerIsBetter: "bool"=False) -> "double":
        return _pysgpp_swig.Scorer_test(self, model, testDataset, lowerIsBetter)

# Register Scorer in _pysgpp_swig:
_pysgpp_swig.Scorer_swigregister(Scorer)

class SparseGridMiner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SparseGridMiner

    def learn(self, verbose: "bool") -> "double":
        return _pysgpp_swig.SparseGridMiner_learn(self, verbose)

    def getModel(self) -> "sgpp::datadriven::ModelFittingBase *":
        return _pysgpp_swig.SparseGridMiner_getModel(self)

    def setModel(self, model: "ModelFittingBase") -> "void":
        return _pysgpp_swig.SparseGridMiner_setModel(self, model)

    def getVisualizer(self) -> "sgpp::datadriven::Visualizer *":
        return _pysgpp_swig.SparseGridMiner_getVisualizer(self)

    def test(self, testDataset: "Dataset") -> "double":
        return _pysgpp_swig.SparseGridMiner_test(self, testDataset)

# Register SparseGridMiner in _pysgpp_swig:
_pysgpp_swig.SparseGridMiner_swigregister(SparseGridMiner)

class SparseGridMinerSplitting(SparseGridMiner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.SparseGridMinerSplitting_swiginit(self, _pysgpp_swig.new_SparseGridMinerSplitting(*args))
    __swig_destroy__ = _pysgpp_swig.delete_SparseGridMinerSplitting

    def optimizeLambda(self, verbose: "bool") -> "double":
        return _pysgpp_swig.SparseGridMinerSplitting_optimizeLambda(self, verbose)

    def evaluateLambda(self, _lambda: "double", verbose: "bool") -> "double":
        return _pysgpp_swig.SparseGridMinerSplitting_evaluateLambda(self, _lambda, verbose)

# Register SparseGridMinerSplitting in _pysgpp_swig:
_pysgpp_swig.SparseGridMinerSplitting_swigregister(SparseGridMinerSplitting)

class DataSourceBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.DataSourceBuilder_swiginit(self, _pysgpp_swig.new_DataSourceBuilder())

    def withPath(self, filePath: "std::string const &") -> "sgpp::datadriven::DataSourceBuilder &":
        return _pysgpp_swig.DataSourceBuilder_withPath(self, filePath)

    def withCompression(self, isCompressed: "bool") -> "sgpp::datadriven::DataSourceBuilder &":
        return _pysgpp_swig.DataSourceBuilder_withCompression(self, isCompressed)

    def withFileType(self, fileType: "sgpp::datadriven::DataSourceFileType") -> "sgpp::datadriven::DataSourceBuilder &":
        return _pysgpp_swig.DataSourceBuilder_withFileType(self, fileType)

    def inBatches(self, howMany: "size_t") -> "sgpp::datadriven::DataSourceBuilder &":
        return _pysgpp_swig.DataSourceBuilder_inBatches(self, howMany)

    def withBatchSize(self, batchSize: "size_t") -> "sgpp::datadriven::DataSourceBuilder &":
        return _pysgpp_swig.DataSourceBuilder_withBatchSize(self, batchSize)

    def splittingAssemble(self) -> "sgpp::datadriven::DataSourceSplitting *":
        return _pysgpp_swig.DataSourceBuilder_splittingAssemble(self)

    def splittingFromConfig(self, config: "DataSourceConfig") -> "sgpp::datadriven::DataSourceSplitting *":
        return _pysgpp_swig.DataSourceBuilder_splittingFromConfig(self, config)

    def crossValidationAssemble(self) -> "sgpp::datadriven::DataSourceCrossValidation *":
        return _pysgpp_swig.DataSourceBuilder_crossValidationAssemble(self)

    def crossValidationFromConfig(self, config: "DataSourceConfig", crossValidationConfig: "CrossvalidationConfiguration") -> "sgpp::datadriven::DataSourceCrossValidation *":
        return _pysgpp_swig.DataSourceBuilder_crossValidationFromConfig(self, config, crossValidationConfig)
    __swig_destroy__ = _pysgpp_swig.delete_DataSourceBuilder

# Register DataSourceBuilder in _pysgpp_swig:
_pysgpp_swig.DataSourceBuilder_swigregister(DataSourceBuilder)

class ScorerFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.ScorerFactory_swiginit(self, _pysgpp_swig.new_ScorerFactory())
    __swig_destroy__ = _pysgpp_swig.delete_ScorerFactory

    def buildScorer(self, parser: "sgpp::datadriven::DataMiningConfigParser const &") -> "sgpp::datadriven::Scorer *":
        return _pysgpp_swig.ScorerFactory_buildScorer(self, parser)

    def buildRegularizationScorer(self, config: "RegularizationConfiguration") -> "sgpp::datadriven::Scorer *":
        return _pysgpp_swig.ScorerFactory_buildRegularizationScorer(self, config)

# Register ScorerFactory in _pysgpp_swig:
_pysgpp_swig.ScorerFactory_swigregister(ScorerFactory)

class MinerFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_MinerFactory

    def buildMiner(self, path: "std::string const &") -> "sgpp::datadriven::SparseGridMiner *":
        return _pysgpp_swig.MinerFactory_buildMiner(self, path)

    def buildHPO(self, path: "std::string const &") -> "sgpp::datadriven::HyperparameterOptimizer *":
        return _pysgpp_swig.MinerFactory_buildHPO(self, path)

# Register MinerFactory in _pysgpp_swig:
_pysgpp_swig.MinerFactory_swigregister(MinerFactory)

class LeastSquaresRegressionMinerFactory(MinerFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.LeastSquaresRegressionMinerFactory_swiginit(self, _pysgpp_swig.new_LeastSquaresRegressionMinerFactory())
    __swig_destroy__ = _pysgpp_swig.delete_LeastSquaresRegressionMinerFactory

# Register LeastSquaresRegressionMinerFactory in _pysgpp_swig:
_pysgpp_swig.LeastSquaresRegressionMinerFactory_swigregister(LeastSquaresRegressionMinerFactory)

class DensityEstimationMinerFactory(MinerFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.DensityEstimationMinerFactory_swiginit(self, _pysgpp_swig.new_DensityEstimationMinerFactory())
    __swig_destroy__ = _pysgpp_swig.delete_DensityEstimationMinerFactory

# Register DensityEstimationMinerFactory in _pysgpp_swig:
_pysgpp_swig.DensityEstimationMinerFactory_swigregister(DensityEstimationMinerFactory)

class ClassificationMinerFactory(MinerFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.ClassificationMinerFactory_swiginit(self, _pysgpp_swig.new_ClassificationMinerFactory())
    __swig_destroy__ = _pysgpp_swig.delete_ClassificationMinerFactory

# Register ClassificationMinerFactory in _pysgpp_swig:
_pysgpp_swig.ClassificationMinerFactory_swigregister(ClassificationMinerFactory)

class OperationTest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationTest

    def test(self, alpha: "DataVector", data: "DataMatrix", classes: "DataVector") -> "double":
        return _pysgpp_swig.OperationTest_test(self, alpha, data, classes)

    def testMSE(self, alpha: "DataVector", data: "DataMatrix", refValues: "DataVector") -> "double":
        return _pysgpp_swig.OperationTest_testMSE(self, alpha, data, refValues)

    def testWithCharacteristicNumber(self, alpha: "DataVector", data: "DataMatrix", classes: "DataVector", charaNumbers: "DataVector") -> "double":
        return _pysgpp_swig.OperationTest_testWithCharacteristicNumber(self, alpha, data, classes, charaNumbers)

    def calculateROCcurve(self, alpha: "DataVector", data: "DataMatrix", classes: "DataVector", thresholds: "DataVector", ROC_curve: "DataMatrix") -> "void":
        return _pysgpp_swig.OperationTest_calculateROCcurve(self, alpha, data, classes, thresholds, ROC_curve)

# Register OperationTest in _pysgpp_swig:
_pysgpp_swig.OperationTest_swigregister(OperationTest)

class OperationRegularizationDiagonal(OperationMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HKMIX = _pysgpp_swig.OperationRegularizationDiagonal_HKMIX
    H0HKLAPLACE = _pysgpp_swig.OperationRegularizationDiagonal_H0HKLAPLACE
    ISOTROPIC_PENALTY = _pysgpp_swig.OperationRegularizationDiagonal_ISOTROPIC_PENALTY
    ANISOTROPIC_PENALTY = _pysgpp_swig.OperationRegularizationDiagonal_ANISOTROPIC_PENALTY
    __swig_destroy__ = _pysgpp_swig.delete_OperationRegularizationDiagonal

# Register OperationRegularizationDiagonal in _pysgpp_swig:
_pysgpp_swig.OperationRegularizationDiagonal_swigregister(OperationRegularizationDiagonal)

class OperationTransformation1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationTransformation1D

    def doTransformation1D(self, alpha1d: "DataVector", coord1d: "double") -> "double":
        return _pysgpp_swig.OperationTransformation1D_doTransformation1D(self, alpha1d, coord1d)

# Register OperationTransformation1D in _pysgpp_swig:
_pysgpp_swig.OperationTransformation1D_swigregister(OperationTransformation1D)

class OperationRosenblattTransformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationRosenblattTransformation

    def doTransformation(self, *args) -> "void":
        return _pysgpp_swig.OperationRosenblattTransformation_doTransformation(self, *args)

# Register OperationRosenblattTransformation in _pysgpp_swig:
_pysgpp_swig.OperationRosenblattTransformation_swigregister(OperationRosenblattTransformation)

class OperationInverseRosenblattTransformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationInverseRosenblattTransformation

    def doTransformation(self, *args) -> "void":
        return _pysgpp_swig.OperationInverseRosenblattTransformation_doTransformation(self, *args)

# Register OperationInverseRosenblattTransformation in _pysgpp_swig:
_pysgpp_swig.OperationInverseRosenblattTransformation_swigregister(OperationInverseRosenblattTransformation)

class OperationRosenblattTransformationKDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationRosenblattTransformationKDE_swiginit(self, _pysgpp_swig.new_OperationRosenblattTransformationKDE(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OperationRosenblattTransformationKDE

    def doTransformation(self, pointsCdf: "DataMatrix", pointsUniform: "DataMatrix") -> "void":
        return _pysgpp_swig.OperationRosenblattTransformationKDE_doTransformation(self, pointsCdf, pointsUniform)

    def doShuffledTransformation(self, pointsCdf: "DataMatrix", pointsUniform: "DataMatrix") -> "void":
        return _pysgpp_swig.OperationRosenblattTransformationKDE_doShuffledTransformation(self, pointsCdf, pointsUniform)

    def doTransformation1D(self, x: "double", samples1d: "DataVector", sigma: "double", kern: "DataVector") -> "double":
        return _pysgpp_swig.OperationRosenblattTransformationKDE_doTransformation1D(self, x, samples1d, sigma, kern)

# Register OperationRosenblattTransformationKDE in _pysgpp_swig:
_pysgpp_swig.OperationRosenblattTransformationKDE_swigregister(OperationRosenblattTransformationKDE)

class OperationInverseRosenblattTransformationKDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationInverseRosenblattTransformationKDE_swiginit(self, _pysgpp_swig.new_OperationInverseRosenblattTransformationKDE(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OperationInverseRosenblattTransformationKDE

    def doTransformation(self, pointsUniform: "DataMatrix", pointsCdf: "DataMatrix") -> "void":
        return _pysgpp_swig.OperationInverseRosenblattTransformationKDE_doTransformation(self, pointsUniform, pointsCdf)

    def doShuffledTransformation(self, pointsUniform: "DataMatrix", pointsCdf: "DataMatrix") -> "void":
        return _pysgpp_swig.OperationInverseRosenblattTransformationKDE_doShuffledTransformation(self, pointsUniform, pointsCdf)

    def doTransformation1D(self, y: "double", samples1d: "DataVector", sigma: "double", xlower: "double", xupper: "double", ylower: "double", yupper: "double", kern: "DataVector") -> "double":
        return _pysgpp_swig.OperationInverseRosenblattTransformationKDE_doTransformation1D(self, y, samples1d, sigma, xlower, xupper, ylower, yupper, kern)

    def getMaxInversionError(self) -> "double":
        return _pysgpp_swig.OperationInverseRosenblattTransformationKDE_getMaxInversionError(self)

# Register OperationInverseRosenblattTransformationKDE in _pysgpp_swig:
_pysgpp_swig.OperationInverseRosenblattTransformationKDE_swigregister(OperationInverseRosenblattTransformationKDE)

class OperationDensityMarginalizeKDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, kde: "KernelDensityEstimator"):
        _pysgpp_swig.OperationDensityMarginalizeKDE_swiginit(self, _pysgpp_swig.new_OperationDensityMarginalizeKDE(kde))
    __swig_destroy__ = _pysgpp_swig.delete_OperationDensityMarginalizeKDE

    def doMarginalize(self, *args) -> "void":
        return _pysgpp_swig.OperationDensityMarginalizeKDE_doMarginalize(self, *args)

    def margToDimX(self, mdim: "size_t", marginalizedKDE: "KernelDensityEstimator") -> "void":
        return _pysgpp_swig.OperationDensityMarginalizeKDE_margToDimX(self, mdim, marginalizedKDE)

    def margToDimXs(self, mdims: "SizeVector", marginalizedKDE: "KernelDensityEstimator") -> "void":
        return _pysgpp_swig.OperationDensityMarginalizeKDE_margToDimXs(self, mdims, marginalizedKDE)

# Register OperationDensityMarginalizeKDE in _pysgpp_swig:
_pysgpp_swig.OperationDensityMarginalizeKDE_swigregister(OperationDensityMarginalizeKDE)

class OperationDensityConditionalKDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, kde: "KernelDensityEstimator"):
        _pysgpp_swig.OperationDensityConditionalKDE_swiginit(self, _pysgpp_swig.new_OperationDensityConditionalKDE(kde))
    __swig_destroy__ = _pysgpp_swig.delete_OperationDensityConditionalKDE

    def doConditional(self, *args) -> "void":
        return _pysgpp_swig.OperationDensityConditionalKDE_doConditional(self, *args)

    def condToDimX(self, mdim: "size_t", xbar: "DataVector", conditionalizedKDE: "KernelDensityEstimator") -> "void":
        return _pysgpp_swig.OperationDensityConditionalKDE_condToDimX(self, mdim, xbar, conditionalizedKDE)

    def condToDimXs(self, mdims: "SizeVector", xbar: "DataVector", conditionalizedKDE: "KernelDensityEstimator") -> "void":
        return _pysgpp_swig.OperationDensityConditionalKDE_condToDimXs(self, mdims, xbar, conditionalizedKDE)

# Register OperationDensityConditionalKDE in _pysgpp_swig:
_pysgpp_swig.OperationDensityConditionalKDE_swigregister(OperationDensityConditionalKDE)

class OperationDensityMarginalize(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid"):
        _pysgpp_swig.OperationDensityMarginalize_swiginit(self, _pysgpp_swig.new_OperationDensityMarginalize(grid))
    __swig_destroy__ = _pysgpp_swig.delete_OperationDensityMarginalize

    def doMarginalize(self, alpha: "DataVector", mg: "sgpp::base::Grid *&", malpha: "DataVector", mdim: "unsigned int") -> "void":
        return _pysgpp_swig.OperationDensityMarginalize_doMarginalize(self, alpha, mg, malpha, mdim)

# Register OperationDensityMarginalize in _pysgpp_swig:
_pysgpp_swig.OperationDensityMarginalize_swigregister(OperationDensityMarginalize)

class OperationDensityMargTo1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "Grid"):
        _pysgpp_swig.OperationDensityMargTo1D_swiginit(self, _pysgpp_swig.new_OperationDensityMargTo1D(grid))
    __swig_destroy__ = _pysgpp_swig.delete_OperationDensityMargTo1D

    def margToDimX(self, alpha: "DataVector", grid_x: "sgpp::base::Grid *&", alpha_x: "sgpp::base::DataVector *&", dim_x: "size_t") -> "void":
        return _pysgpp_swig.OperationDensityMargTo1D_margToDimX(self, alpha, grid_x, alpha_x, dim_x)

    def margToDimXs(self, alpha: "DataVector", grid_x: "sgpp::base::Grid *&", alpha_x: "sgpp::base::DataVector *&", dim_x: "SizeVector") -> "void":
        return _pysgpp_swig.OperationDensityMargTo1D_margToDimXs(self, alpha, grid_x, alpha_x, dim_x)

# Register OperationDensityMargTo1D in _pysgpp_swig:
_pysgpp_swig.OperationDensityMargTo1D_swigregister(OperationDensityMargTo1D)

class HashGridPointCompare(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.HashGridPointCompare_swiginit(self, _pysgpp_swig.new_HashGridPointCompare())
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointCompare

# Register HashGridPointCompare in _pysgpp_swig:
_pysgpp_swig.HashGridPointCompare_swigregister(HashGridPointCompare)

class OperationMakePositiveCandidateSetAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMakePositiveCandidateSetAlgorithm

    def nextCandidates(self, grid: "Grid", alpha: "DataVector", levelSum: "size_t", candidates: "std::vector< std::shared_ptr< sgpp::base::HashGridPoint >,std::allocator< std::shared_ptr< sgpp::base::HashGridPoint > > > &") -> "void":
        return _pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_nextCandidates(self, grid, alpha, levelSum, candidates)

    def numCandidatesPerLevel(self) -> "sgpp::base::DataVector &":
        return _pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_numCandidatesPerLevel(self)

    def costsComputingCandidates(self) -> "size_t":
        return _pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_costsComputingCandidates(self)

    def costsComputingCandidatesPerIteration(self) -> "sgpp::base::DataVector &":
        return _pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_costsComputingCandidatesPerIteration(self)

    def numCandidates(self) -> "size_t":
        return _pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_numCandidates(self)

    def numCandidatesPerIteration(self) -> "sgpp::base::DataVector &":
        return _pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_numCandidatesPerIteration(self)

    def setVerbose(self, pverbose: "bool") -> "void":
        return _pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_setVerbose(self, pverbose)

# Register OperationMakePositiveCandidateSetAlgorithm in _pysgpp_swig:
_pysgpp_swig.OperationMakePositiveCandidateSetAlgorithm_swigregister(OperationMakePositiveCandidateSetAlgorithm)

class OperationMakePositiveFindIntersectionCandidates(OperationMakePositiveCandidateSetAlgorithm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxLevel: "size_t"):
        _pysgpp_swig.OperationMakePositiveFindIntersectionCandidates_swiginit(self, _pysgpp_swig.new_OperationMakePositiveFindIntersectionCandidates(maxLevel))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMakePositiveFindIntersectionCandidates

# Register OperationMakePositiveFindIntersectionCandidates in _pysgpp_swig:
_pysgpp_swig.OperationMakePositiveFindIntersectionCandidates_swigregister(OperationMakePositiveFindIntersectionCandidates)

class OperationMakePositiveFindIntersectionCandidatesJoin(OperationMakePositiveFindIntersectionCandidates):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxLevel: "size_t"):
        _pysgpp_swig.OperationMakePositiveFindIntersectionCandidatesJoin_swiginit(self, _pysgpp_swig.new_OperationMakePositiveFindIntersectionCandidatesJoin(maxLevel))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMakePositiveFindIntersectionCandidatesJoin

# Register OperationMakePositiveFindIntersectionCandidatesJoin in _pysgpp_swig:
_pysgpp_swig.OperationMakePositiveFindIntersectionCandidatesJoin_swigregister(OperationMakePositiveFindIntersectionCandidatesJoin)

class OperationMakePositiveLoadFullGridCandidates(OperationMakePositiveCandidateSetAlgorithm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxLevel: "size_t"):
        _pysgpp_swig.OperationMakePositiveLoadFullGridCandidates_swiginit(self, _pysgpp_swig.new_OperationMakePositiveLoadFullGridCandidates(maxLevel))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMakePositiveLoadFullGridCandidates

# Register OperationMakePositiveLoadFullGridCandidates in _pysgpp_swig:
_pysgpp_swig.OperationMakePositiveLoadFullGridCandidates_swigregister(OperationMakePositiveLoadFullGridCandidates)

class OperationMakePositiveHybridFindIntersectionCandidates(OperationMakePositiveFindIntersectionCandidates):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxLevel: "size_t"):
        _pysgpp_swig.OperationMakePositiveHybridFindIntersectionCandidates_swiginit(self, _pysgpp_swig.new_OperationMakePositiveHybridFindIntersectionCandidates(maxLevel))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMakePositiveHybridFindIntersectionCandidates

    def findIntersections(self, grid: "Grid", alpha: "DataVector", levelSum: "size_t", res: "std::unordered_map< size_t,std::shared_ptr< sgpp::base::HashGridPoint > > &") -> "void":
        return _pysgpp_swig.OperationMakePositiveHybridFindIntersectionCandidates_findIntersections(self, grid, alpha, levelSum, res)

# Register OperationMakePositiveHybridFindIntersectionCandidates in _pysgpp_swig:
_pysgpp_swig.OperationMakePositiveHybridFindIntersectionCandidates_swigregister(OperationMakePositiveHybridFindIntersectionCandidates)

MakePositiveCandidateSearchAlgorithm_FullGrid = _pysgpp_swig.MakePositiveCandidateSearchAlgorithm_FullGrid
MakePositiveCandidateSearchAlgorithm_Intersections = _pysgpp_swig.MakePositiveCandidateSearchAlgorithm_Intersections
MakePositiveCandidateSearchAlgorithm_HybridFullIntersections = _pysgpp_swig.MakePositiveCandidateSearchAlgorithm_HybridFullIntersections
MakePositiveCandidateSearchAlgorithm_IntersectionsJoin = _pysgpp_swig.MakePositiveCandidateSearchAlgorithm_IntersectionsJoin
MakePositiveInterpolationAlgorithm_SetToZero = _pysgpp_swig.MakePositiveInterpolationAlgorithm_SetToZero
MakePositiveInterpolationAlgorithm_InterpolateExp = _pysgpp_swig.MakePositiveInterpolationAlgorithm_InterpolateExp
MakePositiveInterpolationAlgorithm_InterpolateBoundaries1d = _pysgpp_swig.MakePositiveInterpolationAlgorithm_InterpolateBoundaries1d
MakePositiveInterpolationAlgorithm_InterpolateFunction = _pysgpp_swig.MakePositiveInterpolationAlgorithm_InterpolateFunction
class OperationMakePositive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationMakePositive_swiginit(self, _pysgpp_swig.new_OperationMakePositive(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OperationMakePositive

    def initialize(self, grid: "Grid", alpha: "DataVector") -> "void":
        return _pysgpp_swig.OperationMakePositive_initialize(self, grid, alpha)

    def makePositive(self, grid: "Grid", alpha: "DataVector", forcePositiveNodalValues: "bool"=False) -> "void":
        return _pysgpp_swig.OperationMakePositive_makePositive(self, grid, alpha, forcePositiveNodalValues)

    def makeCurrentNodalValuesPositive(self, grid: "Grid", alpha: "DataVector", tol: "double"=-1e-14) -> "void":
        return _pysgpp_swig.OperationMakePositive_makeCurrentNodalValuesPositive(self, grid, alpha, tol)

    def getAddedGridPoints(self) -> "std::vector< size_t,std::allocator< size_t > > &":
        return _pysgpp_swig.OperationMakePositive_getAddedGridPoints(self)

    def getAddedGridPointsForPositivity(self) -> "std::vector< size_t,std::allocator< size_t > > &":
        return _pysgpp_swig.OperationMakePositive_getAddedGridPointsForPositivity(self)

    def numAddedGridPoints(self) -> "size_t":
        return _pysgpp_swig.OperationMakePositive_numAddedGridPoints(self)

    def numAddedGridPointsForPositivity(self) -> "size_t":
        return _pysgpp_swig.OperationMakePositive_numAddedGridPointsForPositivity(self)

    def numAddedGridPointsForPositivityPerIteration(self) -> "sgpp::base::DataVector &":
        return _pysgpp_swig.OperationMakePositive_numAddedGridPointsForPositivityPerIteration(self)

    def getCandidateSetAlgorithm(self) -> "sgpp::datadriven::OperationMakePositiveCandidateSetAlgorithm &":
        return _pysgpp_swig.OperationMakePositive_getCandidateSetAlgorithm(self)

# Register OperationMakePositive in _pysgpp_swig:
_pysgpp_swig.OperationMakePositive_swigregister(OperationMakePositive)

class OperationLimitFunctionValueRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationLimitFunctionValueRange_swiginit(self, _pysgpp_swig.new_OperationLimitFunctionValueRange(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OperationLimitFunctionValueRange

    def doLowerLimitation(self, grid: "Grid", alpha: "DataVector", ylower: "double", limitNodalValues: "bool"=True) -> "void":
        return _pysgpp_swig.OperationLimitFunctionValueRange_doLowerLimitation(self, grid, alpha, ylower, limitNodalValues)

    def doUpperLimitation(self, grid: "Grid", alpha: "DataVector", yupper: "double", limitNodalValues: "bool"=True) -> "void":
        return _pysgpp_swig.OperationLimitFunctionValueRange_doUpperLimitation(self, grid, alpha, yupper, limitNodalValues)

    def doLimitation(self, grid: "Grid", alpha: "DataVector", ylower: "double", yupper: "double", limitNodalValues: "bool"=True) -> "void":
        return _pysgpp_swig.OperationLimitFunctionValueRange_doLimitation(self, grid, alpha, ylower, yupper, limitNodalValues)

    def getAddedGridPoints(self) -> "std::vector< size_t,std::allocator< size_t > > &":
        return _pysgpp_swig.OperationLimitFunctionValueRange_getAddedGridPoints(self)

    def getAddedGridPointsForRangeLimitation(self) -> "std::vector< size_t,std::allocator< size_t > > &":
        return _pysgpp_swig.OperationLimitFunctionValueRange_getAddedGridPointsForRangeLimitation(self)

    def numAddedGridPoints(self) -> "size_t":
        return _pysgpp_swig.OperationLimitFunctionValueRange_numAddedGridPoints(self)

    def numAddedGridPointsForRangeLimitation(self) -> "size_t":
        return _pysgpp_swig.OperationLimitFunctionValueRange_numAddedGridPointsForRangeLimitation(self)

# Register OperationLimitFunctionValueRange in _pysgpp_swig:
_pysgpp_swig.OperationLimitFunctionValueRange_swigregister(OperationLimitFunctionValueRange)

OperationMultipleEvalType_DEFAULT = _pysgpp_swig.OperationMultipleEvalType_DEFAULT
OperationMultipleEvalType_STREAMING = _pysgpp_swig.OperationMultipleEvalType_STREAMING
OperationMultipleEvalType_SUBSPACELINEAR = _pysgpp_swig.OperationMultipleEvalType_SUBSPACELINEAR
OperationMultipleEvalType_ADAPTIVE = _pysgpp_swig.OperationMultipleEvalType_ADAPTIVE
OperationMultipleEvalType_MORTONORDER = _pysgpp_swig.OperationMultipleEvalType_MORTONORDER
OperationMultipleEvalType_SCALAPACK = _pysgpp_swig.OperationMultipleEvalType_SCALAPACK
OperationMultipleEvalSubType_DEFAULT = _pysgpp_swig.OperationMultipleEvalSubType_DEFAULT
OperationMultipleEvalSubType_SIMPLE = _pysgpp_swig.OperationMultipleEvalSubType_SIMPLE
OperationMultipleEvalSubType_COMBINED = _pysgpp_swig.OperationMultipleEvalSubType_COMBINED
OperationMultipleEvalSubType_OCL = _pysgpp_swig.OperationMultipleEvalSubType_OCL
OperationMultipleEvalSubType_OCLFASTMP = _pysgpp_swig.OperationMultipleEvalSubType_OCLFASTMP
OperationMultipleEvalSubType_OCLMP = _pysgpp_swig.OperationMultipleEvalSubType_OCLMP
OperationMultipleEvalSubType_OCLMASKMP = _pysgpp_swig.OperationMultipleEvalSubType_OCLMASKMP
OperationMultipleEvalSubType_OCLOPT = _pysgpp_swig.OperationMultipleEvalSubType_OCLOPT
OperationMultipleEvalSubType_OCLUNIFIED = _pysgpp_swig.OperationMultipleEvalSubType_OCLUNIFIED
OperationMultipleEvalSubType_CUDA = _pysgpp_swig.OperationMultipleEvalSubType_CUDA
OperationMultipleEvalMPIType_NONE = _pysgpp_swig.OperationMultipleEvalMPIType_NONE
OperationMultipleEvalMPIType_MASTERSLAVE = _pysgpp_swig.OperationMultipleEvalMPIType_MASTERSLAVE
OperationMultipleEvalMPIType_HPX = _pysgpp_swig.OperationMultipleEvalMPIType_HPX
class OperationMultipleEvalConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationMultipleEvalConfiguration_swiginit(self, _pysgpp_swig.new_OperationMultipleEvalConfiguration(*args))

    def getMPIType(self) -> "sgpp::datadriven::OperationMultipleEvalMPIType":
        return _pysgpp_swig.OperationMultipleEvalConfiguration_getMPIType(self)

    def getType(self) -> "sgpp::datadriven::OperationMultipleEvalType":
        return _pysgpp_swig.OperationMultipleEvalConfiguration_getType(self)

    def getSubType(self) -> "sgpp::datadriven::OperationMultipleEvalSubType":
        return _pysgpp_swig.OperationMultipleEvalConfiguration_getSubType(self)

    def getParameters(self) -> "std::shared_ptr< sgpp::base::OperationConfiguration >":
        return _pysgpp_swig.OperationMultipleEvalConfiguration_getParameters(self)

    def getName(self) -> "std::string &":
        return _pysgpp_swig.OperationMultipleEvalConfiguration_getName(self)
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleEvalConfiguration

# Register OperationMultipleEvalConfiguration in _pysgpp_swig:
_pysgpp_swig.OperationMultipleEvalConfiguration_swigregister(OperationMultipleEvalConfiguration)

class HeterogeneousBasis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.HeterogeneousBasis_swiginit(self, _pysgpp_swig.new_HeterogeneousBasis(*args))

    def __eq__(self, other: "HeterogeneousBasis") -> "bool":
        return _pysgpp_swig.HeterogeneousBasis___eq__(self, other)

    def __ne__(self, other: "HeterogeneousBasis") -> "bool":
        return _pysgpp_swig.HeterogeneousBasis___ne__(self, other)

    @staticmethod
    def hierarchizeLevelIndex(*args) -> "void":
        return _pysgpp_swig.HeterogeneousBasis_hierarchizeLevelIndex(*args)

    def eval(self, level: "LevelVector", index: "LevelVector", point: "DataVector") -> "double":
        return _pysgpp_swig.HeterogeneousBasis_eval(self, level, index, point)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.HeterogeneousBasis_getDimension(self)

    def getBases1d(self) -> "std::vector< sgpp::base::Basis< sgpp::base::level_t,sgpp::base::index_t > *,std::allocator< sgpp::base::Basis< sgpp::base::level_t,sgpp::base::index_t > * > > const &":
        return _pysgpp_swig.HeterogeneousBasis_getBases1d(self)

    def setBases1D(self, bases1d: "BasisVector") -> "void":
        return _pysgpp_swig.HeterogeneousBasis_setBases1D(self, bases1d)

    def isHierarchical(self) -> "bool":
        return _pysgpp_swig.HeterogeneousBasis_isHierarchical(self)

    def setIsHierarchical(self, isHierarchical: "bool") -> "void":
        return _pysgpp_swig.HeterogeneousBasis_setIsHierarchical(self, isHierarchical)
    __swig_destroy__ = _pysgpp_swig.delete_HeterogeneousBasis

# Register HeterogeneousBasis in _pysgpp_swig:
_pysgpp_swig.HeterogeneousBasis_swigregister(HeterogeneousBasis)

def HeterogeneousBasis_hierarchizeLevelIndex(*args) -> "void":
    return _pysgpp_swig.HeterogeneousBasis_hierarchizeLevelIndex(*args)

class FullGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LevelOccupancy_TwoToThePowerOfL = _pysgpp_swig.FullGrid_LevelOccupancy_TwoToThePowerOfL
    LevelOccupancy_Linear = _pysgpp_swig.FullGrid_LevelOccupancy_Linear

    @staticmethod
    def getNumberOfPointsFromLevel(*args) -> "sgpp::combigrid::index_t":
        return _pysgpp_swig.FullGrid_getNumberOfPointsFromLevel(*args)

    def __init__(self, *args):
        _pysgpp_swig.FullGrid_swiginit(self, _pysgpp_swig.new_FullGrid(*args))

    def __eq__(self, other: "FullGrid") -> "bool":
        return _pysgpp_swig.FullGrid___eq__(self, other)

    def __ne__(self, other: "FullGrid") -> "bool":
        return _pysgpp_swig.FullGrid___ne__(self, other)

    def getLevel(self, *args) -> "size_t":
        return _pysgpp_swig.FullGrid_getLevel(self, *args)

    def setLevel(self, *args) -> "void":
        return _pysgpp_swig.FullGrid_setLevel(self, *args)

    def getMinIndex(self, *args) -> "void":
        return _pysgpp_swig.FullGrid_getMinIndex(self, *args)

    def getMaxIndex(self, *args) -> "void":
        return _pysgpp_swig.FullGrid_getMaxIndex(self, *args)

    def getNumberOfIndexVectors(self, *args) -> "sgpp::combigrid::index_t":
        return _pysgpp_swig.FullGrid_getNumberOfIndexVectors(self, *args)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.FullGrid_getDimension(self)

    def hasBoundary(self) -> "bool":
        return _pysgpp_swig.FullGrid_hasBoundary(self)

    def setHasBoundary(self, hasBoundary: "bool") -> "void":
        return _pysgpp_swig.FullGrid_setHasBoundary(self, hasBoundary)

    def getBasis(self) -> "sgpp::combigrid::HeterogeneousBasis const &":
        return _pysgpp_swig.FullGrid_getBasis(self)

    def setBasis(self, basis: "HeterogeneousBasis") -> "void":
        return _pysgpp_swig.FullGrid_setBasis(self, basis)

    def getLevelOccupancy(self) -> "sgpp::combigrid::FullGrid::LevelOccupancy const &":
        return _pysgpp_swig.FullGrid_getLevelOccupancy(self)

    def findGridPointInFullGrid(self, gridPoint: "HashGridPoint", index: "LevelVector") -> "bool":
        return _pysgpp_swig.FullGrid_findGridPointInFullGrid(self, gridPoint, index)
    __swig_destroy__ = _pysgpp_swig.delete_FullGrid

# Register FullGrid in _pysgpp_swig:
_pysgpp_swig.FullGrid_swigregister(FullGrid)

def FullGrid_getNumberOfPointsFromLevel(*args) -> "sgpp::combigrid::index_t":
    return _pysgpp_swig.FullGrid_getNumberOfPointsFromLevel(*args)

class CombinationGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.CombinationGrid_swiginit(self, _pysgpp_swig.new_CombinationGrid(*args))

    @staticmethod
    def fromRegularSparse(dim: "size_t", n: "sgpp::combigrid::level_t", basis: "HeterogeneousBasis", hasBoundary: "bool"=True) -> "sgpp::combigrid::CombinationGrid":
        return _pysgpp_swig.CombinationGrid_fromRegularSparse(dim, n, basis, hasBoundary)

    @staticmethod
    def fromSubspaces(subspaceLevels: "std::vector< sgpp::combigrid::LevelVector,std::allocator< sgpp::combigrid::LevelVector > > const &", basis: "HeterogeneousBasis", hasBoundary: "bool"=True) -> "sgpp::combigrid::CombinationGrid":
        return _pysgpp_swig.CombinationGrid_fromSubspaces(subspaceLevels, basis, hasBoundary)

    def combinePoints(self, gridStorage: "HashGridStorage") -> "void":
        return _pysgpp_swig.CombinationGrid_combinePoints(self, gridStorage)

    def combineValues(self, *args) -> "void":
        return _pysgpp_swig.CombinationGrid_combineValues(self, *args)

    def combineSparseGridValues(self, *args) -> "void":
        return _pysgpp_swig.CombinationGrid_combineSparseGridValues(self, *args)

    def distributeValuesToFullGrid(self, gridStorage: "HashGridStorage", values: "DataVector", fullGrid: "FullGrid", result: "DataVector") -> "void":
        return _pysgpp_swig.CombinationGrid_distributeValuesToFullGrid(self, gridStorage, values, fullGrid, result)

    def distributeValuesToFullGrids(self, gridStorage: "HashGridStorage", values: "DataVector", result: "DataVectorVector") -> "void":
        return _pysgpp_swig.CombinationGrid_distributeValuesToFullGrids(self, gridStorage, values, result)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.CombinationGrid_getDimension(self)

    def getFullGrids(self) -> "std::vector< sgpp::combigrid::FullGrid,std::allocator< sgpp::combigrid::FullGrid > > const &":
        return _pysgpp_swig.CombinationGrid_getFullGrids(self)

    def getCoefficients(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.CombinationGrid_getCoefficients(self)

    def setFullGridsAndCoefficients(self, fullGrids: "FullGridVector", coefficients: "DataVector") -> "void":
        return _pysgpp_swig.CombinationGrid_setFullGridsAndCoefficients(self, fullGrids, coefficients)
    __swig_destroy__ = _pysgpp_swig.delete_CombinationGrid

# Register CombinationGrid in _pysgpp_swig:
_pysgpp_swig.CombinationGrid_swigregister(CombinationGrid)

def CombinationGrid_fromRegularSparse(dim: "size_t", n: "sgpp::combigrid::level_t", basis: "HeterogeneousBasis", hasBoundary: "bool"=True) -> "sgpp::combigrid::CombinationGrid":
    return _pysgpp_swig.CombinationGrid_fromRegularSparse(dim, n, basis, hasBoundary)

def CombinationGrid_fromSubspaces(subspaceLevels: "std::vector< sgpp::combigrid::LevelVector,std::allocator< sgpp::combigrid::LevelVector > > const &", basis: "HeterogeneousBasis", hasBoundary: "bool"=True) -> "sgpp::combigrid::CombinationGrid":
    return _pysgpp_swig.CombinationGrid_fromSubspaces(subspaceLevels, basis, hasBoundary)

class OperationEvalCombinationGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid: "CombinationGrid"):
        _pysgpp_swig.OperationEvalCombinationGrid_swiginit(self, _pysgpp_swig.new_OperationEvalCombinationGrid(grid))

    def eval(self, surpluses: "DataVectorVector", point: "DataVector") -> "double":
        return _pysgpp_swig.OperationEvalCombinationGrid_eval(self, surpluses, point)

    def multiEval(self, surpluses: "DataVectorVector", points: "DataMatrix", result: "DataVector") -> "void":
        return _pysgpp_swig.OperationEvalCombinationGrid_multiEval(self, surpluses, points, result)

    def getGrid(self) -> "sgpp::combigrid::CombinationGrid const &":
        return _pysgpp_swig.OperationEvalCombinationGrid_getGrid(self)

    def setGrid(self, grid: "CombinationGrid") -> "void":
        return _pysgpp_swig.OperationEvalCombinationGrid_setGrid(self, grid)
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalCombinationGrid

# Register OperationEvalCombinationGrid in _pysgpp_swig:
_pysgpp_swig.OperationEvalCombinationGrid_swigregister(OperationEvalCombinationGrid)

class OperationEvalFullGrid(OperationEval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationEvalFullGrid_swiginit(self, _pysgpp_swig.new_OperationEvalFullGrid(*args))
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalFullGrid

    def multiEval(self, surpluses: "DataVector", points: "DataMatrix", result: "DataVector") -> "void":
        return _pysgpp_swig.OperationEvalFullGrid_multiEval(self, surpluses, points, result)

    def getGrid(self) -> "sgpp::combigrid::FullGrid const &":
        return _pysgpp_swig.OperationEvalFullGrid_getGrid(self)

    def setGrid(self, grid: "FullGrid") -> "void":
        return _pysgpp_swig.OperationEvalFullGrid_setGrid(self, grid)

# Register OperationEvalFullGrid in _pysgpp_swig:
_pysgpp_swig.OperationEvalFullGrid_swigregister(OperationEvalFullGrid)

class OperationPole(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationPole

    def apply(self, *args) -> "void":
        return _pysgpp_swig.OperationPole_apply(self, *args)

# Register OperationPole in _pysgpp_swig:
_pysgpp_swig.OperationPole_swigregister(OperationPole)

class OperationPoleHierarchisationGeneral(OperationPole):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basis: "SBasis", isBasisHierarchical: "bool"=True):
        _pysgpp_swig.OperationPoleHierarchisationGeneral_swiginit(self, _pysgpp_swig.new_OperationPoleHierarchisationGeneral(basis, isBasisHierarchical))
    __swig_destroy__ = _pysgpp_swig.delete_OperationPoleHierarchisationGeneral

    @staticmethod
    def fromHeterogenerousBasis(*args) -> "void":
        return _pysgpp_swig.OperationPoleHierarchisationGeneral_fromHeterogenerousBasis(*args)

    def apply(self, values: "DataVector", start: "size_t", step: "size_t", count: "size_t", level: "sgpp::combigrid::level_t", hasBoundary: "bool"=True) -> "void":
        return _pysgpp_swig.OperationPoleHierarchisationGeneral_apply(self, values, start, step, count, level, hasBoundary)

# Register OperationPoleHierarchisationGeneral in _pysgpp_swig:
_pysgpp_swig.OperationPoleHierarchisationGeneral_swigregister(OperationPoleHierarchisationGeneral)

def OperationPoleHierarchisationGeneral_fromHeterogenerousBasis(*args) -> "void":
    return _pysgpp_swig.OperationPoleHierarchisationGeneral_fromHeterogenerousBasis(*args)

class OperationPoleHierarchisationLinear(OperationPole):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OperationPoleHierarchisationLinear_swiginit(self, _pysgpp_swig.new_OperationPoleHierarchisationLinear())
    __swig_destroy__ = _pysgpp_swig.delete_OperationPoleHierarchisationLinear

    def apply(self, values: "DataVector", start: "size_t", step: "size_t", count: "size_t", level: "sgpp::combigrid::level_t", hasBoundary: "bool"=True) -> "void":
        return _pysgpp_swig.OperationPoleHierarchisationLinear_apply(self, values, start, step, count, level, hasBoundary)

# Register OperationPoleHierarchisationLinear in _pysgpp_swig:
_pysgpp_swig.OperationPoleHierarchisationLinear_swigregister(OperationPoleHierarchisationLinear)

class OperationPoleNodalisationBspline(OperationPole):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, degree: "size_t"):
        _pysgpp_swig.OperationPoleNodalisationBspline_swiginit(self, _pysgpp_swig.new_OperationPoleNodalisationBspline(degree))
    __swig_destroy__ = _pysgpp_swig.delete_OperationPoleNodalisationBspline

    def apply(self, values: "DataVector", start: "size_t", step: "size_t", count: "size_t", level: "sgpp::combigrid::level_t", hasBoundary: "bool"=True) -> "void":
        return _pysgpp_swig.OperationPoleNodalisationBspline_apply(self, values, start, step, count, level, hasBoundary)

# Register OperationPoleNodalisationBspline in _pysgpp_swig:
_pysgpp_swig.OperationPoleNodalisationBspline_swigregister(OperationPoleNodalisationBspline)

class OperationPoleNodalisationLinear(OperationPole):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysgpp_swig.OperationPoleNodalisationLinear_swiginit(self, _pysgpp_swig.new_OperationPoleNodalisationLinear())
    __swig_destroy__ = _pysgpp_swig.delete_OperationPoleNodalisationLinear

    def apply(self, values: "DataVector", start: "size_t", step: "size_t", count: "size_t", level: "sgpp::combigrid::level_t", hasBoundary: "bool"=True) -> "void":
        return _pysgpp_swig.OperationPoleNodalisationLinear_apply(self, values, start, step, count, level, hasBoundary)

# Register OperationPoleNodalisationLinear in _pysgpp_swig:
_pysgpp_swig.OperationPoleNodalisationLinear_swigregister(OperationPoleNodalisationLinear)

class OperationUPFullGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationUPFullGrid_swiginit(self, _pysgpp_swig.new_OperationUPFullGrid(*args))

    def apply(self, values: "DataVector") -> "void":
        return _pysgpp_swig.OperationUPFullGrid_apply(self, values)

    def getGrid(self) -> "sgpp::combigrid::FullGrid const &":
        return _pysgpp_swig.OperationUPFullGrid_getGrid(self)

    def setGrid(self, grid: "FullGrid") -> "void":
        return _pysgpp_swig.OperationUPFullGrid_setGrid(self, grid)

    def getOperationPole(self) -> "std::vector< sgpp::combigrid::OperationPole *,std::allocator< sgpp::combigrid::OperationPole * > > const &":
        return _pysgpp_swig.OperationUPFullGrid_getOperationPole(self)

    def setOperationPole(self, operationPole: "OperationPoleVector") -> "void":
        return _pysgpp_swig.OperationUPFullGrid_setOperationPole(self, operationPole)
    __swig_destroy__ = _pysgpp_swig.delete_OperationUPFullGrid

# Register OperationUPFullGrid in _pysgpp_swig:
_pysgpp_swig.OperationUPFullGrid_swigregister(OperationUPFullGrid)

class OperationUPCombinationGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.OperationUPCombinationGrid_swiginit(self, _pysgpp_swig.new_OperationUPCombinationGrid(*args))

    def apply(self, values: "DataVectorVector") -> "void":
        return _pysgpp_swig.OperationUPCombinationGrid_apply(self, values)

    def getGrid(self) -> "sgpp::combigrid::CombinationGrid const &":
        return _pysgpp_swig.OperationUPCombinationGrid_getGrid(self)

    def setGrid(self, grid: "CombinationGrid") -> "void":
        return _pysgpp_swig.OperationUPCombinationGrid_setGrid(self, grid)

    def getOperationPole(self) -> "std::vector< sgpp::combigrid::OperationPole *,std::allocator< sgpp::combigrid::OperationPole * > > const &":
        return _pysgpp_swig.OperationUPCombinationGrid_getOperationPole(self)

    def setOperationPole(self, operationPole: "OperationPoleVector") -> "void":
        return _pysgpp_swig.OperationUPCombinationGrid_setOperationPole(self, operationPole)
    __swig_destroy__ = _pysgpp_swig.delete_OperationUPCombinationGrid

# Register OperationUPCombinationGrid in _pysgpp_swig:
_pysgpp_swig.OperationUPCombinationGrid_swigregister(OperationUPCombinationGrid)

class IndexVectorRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pysgpp_swig.IndexVectorRange_swiginit(self, _pysgpp_swig.new_IndexVectorRange(*args))

    def find(self, index: "LevelVector") -> "size_t":
        return _pysgpp_swig.IndexVectorRange_find(self, index)

    def setGrid(self, grid: "FullGrid") -> "void":
        return _pysgpp_swig.IndexVectorRange_setGrid(self, grid)

    def getIndices(self, indices: "std::vector< sgpp::combigrid::IndexVector,std::allocator< sgpp::combigrid::IndexVector > > &") -> "void":
        return _pysgpp_swig.IndexVectorRange_getIndices(self, indices)

    @staticmethod
    def getPoints(grid: "FullGrid", points: "DataMatrix") -> "void":
        return _pysgpp_swig.IndexVectorRange_getPoints(grid, points)
    __swig_destroy__ = _pysgpp_swig.delete_IndexVectorRange

# Register IndexVectorRange in _pysgpp_swig:
_pysgpp_swig.IndexVectorRange_swigregister(IndexVectorRange)

def IndexVectorRange_getPoints(grid: "FullGrid", points: "DataMatrix") -> "void":
    return _pysgpp_swig.IndexVectorRange_getPoints(grid, points)

class BasisVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.BasisVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.BasisVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.BasisVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::size_type":
        return _pysgpp_swig.BasisVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::difference_type", j: "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::difference_type") -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > *,std::allocator< sgpp::base::Basis< unsigned int,unsigned int > * > > *":
        return _pysgpp_swig.BasisVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.BasisVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::difference_type", j: "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::difference_type") -> "void":
        return _pysgpp_swig.BasisVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.BasisVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::value_type":
        return _pysgpp_swig.BasisVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.BasisVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::value_type":
        return _pysgpp_swig.BasisVector_pop(self)

    def append(self, x: "SBasis") -> "void":
        return _pysgpp_swig.BasisVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.BasisVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::size_type":
        return _pysgpp_swig.BasisVector_size(self)

    def swap(self, v: "BasisVector") -> "void":
        return _pysgpp_swig.BasisVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::iterator":
        return _pysgpp_swig.BasisVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::iterator":
        return _pysgpp_swig.BasisVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::reverse_iterator":
        return _pysgpp_swig.BasisVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::reverse_iterator":
        return _pysgpp_swig.BasisVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.BasisVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::allocator_type":
        return _pysgpp_swig.BasisVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.BasisVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::iterator":
        return _pysgpp_swig.BasisVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.BasisVector_swiginit(self, _pysgpp_swig.new_BasisVector(*args))

    def push_back(self, x: "SBasis") -> "void":
        return _pysgpp_swig.BasisVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::value_type":
        return _pysgpp_swig.BasisVector_front(self)

    def back(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::value_type":
        return _pysgpp_swig.BasisVector_back(self)

    def assign(self, n: "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::size_type", x: "SBasis") -> "void":
        return _pysgpp_swig.BasisVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.BasisVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.BasisVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::size_type") -> "void":
        return _pysgpp_swig.BasisVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::Basis< unsigned int,unsigned int > * >::size_type":
        return _pysgpp_swig.BasisVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_BasisVector

# Register BasisVector in _pysgpp_swig:
_pysgpp_swig.BasisVector_swigregister(BasisVector)

class FullGridVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.FullGridVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.FullGridVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.FullGridVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::combigrid::FullGrid >::size_type":
        return _pysgpp_swig.FullGridVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::combigrid::FullGrid >::difference_type", j: "std::vector< sgpp::combigrid::FullGrid >::difference_type") -> "std::vector< sgpp::combigrid::FullGrid,std::allocator< sgpp::combigrid::FullGrid > > *":
        return _pysgpp_swig.FullGridVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.FullGridVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::combigrid::FullGrid >::difference_type", j: "std::vector< sgpp::combigrid::FullGrid >::difference_type") -> "void":
        return _pysgpp_swig.FullGridVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.FullGridVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::combigrid::FullGrid >::value_type const &":
        return _pysgpp_swig.FullGridVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.FullGridVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::combigrid::FullGrid >::value_type":
        return _pysgpp_swig.FullGridVector_pop(self)

    def append(self, x: "FullGrid") -> "void":
        return _pysgpp_swig.FullGridVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.FullGridVector_empty(self)

    def size(self) -> "std::vector< sgpp::combigrid::FullGrid >::size_type":
        return _pysgpp_swig.FullGridVector_size(self)

    def swap(self, v: "FullGridVector") -> "void":
        return _pysgpp_swig.FullGridVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::combigrid::FullGrid >::iterator":
        return _pysgpp_swig.FullGridVector_begin(self)

    def end(self) -> "std::vector< sgpp::combigrid::FullGrid >::iterator":
        return _pysgpp_swig.FullGridVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::combigrid::FullGrid >::reverse_iterator":
        return _pysgpp_swig.FullGridVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::combigrid::FullGrid >::reverse_iterator":
        return _pysgpp_swig.FullGridVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.FullGridVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::combigrid::FullGrid >::allocator_type":
        return _pysgpp_swig.FullGridVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.FullGridVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::combigrid::FullGrid >::iterator":
        return _pysgpp_swig.FullGridVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.FullGridVector_swiginit(self, _pysgpp_swig.new_FullGridVector(*args))

    def push_back(self, x: "FullGrid") -> "void":
        return _pysgpp_swig.FullGridVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::combigrid::FullGrid >::value_type const &":
        return _pysgpp_swig.FullGridVector_front(self)

    def back(self) -> "std::vector< sgpp::combigrid::FullGrid >::value_type const &":
        return _pysgpp_swig.FullGridVector_back(self)

    def assign(self, n: "std::vector< sgpp::combigrid::FullGrid >::size_type", x: "FullGrid") -> "void":
        return _pysgpp_swig.FullGridVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.FullGridVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.FullGridVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::combigrid::FullGrid >::size_type") -> "void":
        return _pysgpp_swig.FullGridVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::combigrid::FullGrid >::size_type":
        return _pysgpp_swig.FullGridVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_FullGridVector

# Register FullGridVector in _pysgpp_swig:
_pysgpp_swig.FullGridVector_swigregister(FullGridVector)

class LevelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.LevelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.LevelVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.LevelVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _pysgpp_swig.LevelVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _pysgpp_swig.LevelVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.LevelVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        return _pysgpp_swig.LevelVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.LevelVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _pysgpp_swig.LevelVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.LevelVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _pysgpp_swig.LevelVector_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _pysgpp_swig.LevelVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.LevelVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _pysgpp_swig.LevelVector_size(self)

    def swap(self, v: "LevelVector") -> "void":
        return _pysgpp_swig.LevelVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _pysgpp_swig.LevelVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _pysgpp_swig.LevelVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _pysgpp_swig.LevelVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _pysgpp_swig.LevelVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.LevelVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _pysgpp_swig.LevelVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.LevelVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _pysgpp_swig.LevelVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.LevelVector_swiginit(self, _pysgpp_swig.new_LevelVector(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _pysgpp_swig.LevelVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _pysgpp_swig.LevelVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _pysgpp_swig.LevelVector_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _pysgpp_swig.LevelVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.LevelVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.LevelVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        return _pysgpp_swig.LevelVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _pysgpp_swig.LevelVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_LevelVector

# Register LevelVector in _pysgpp_swig:
_pysgpp_swig.LevelVector_swigregister(LevelVector)

class LevelVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.LevelVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.LevelVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.LevelVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::size_type":
        return _pysgpp_swig.LevelVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::difference_type", j: "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::difference_type") -> "std::vector< std::vector< sgpp::base::level_t,std::allocator< sgpp::base::level_t > >,std::allocator< std::vector< sgpp::base::level_t,std::allocator< sgpp::base::level_t > > > > *":
        return _pysgpp_swig.LevelVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.LevelVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::difference_type", j: "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::difference_type") -> "void":
        return _pysgpp_swig.LevelVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.LevelVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::value_type const &":
        return _pysgpp_swig.LevelVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.LevelVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::value_type":
        return _pysgpp_swig.LevelVectorVector_pop(self)

    def append(self, x: "LevelVector") -> "void":
        return _pysgpp_swig.LevelVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.LevelVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::size_type":
        return _pysgpp_swig.LevelVectorVector_size(self)

    def swap(self, v: "LevelVectorVector") -> "void":
        return _pysgpp_swig.LevelVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::iterator":
        return _pysgpp_swig.LevelVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::iterator":
        return _pysgpp_swig.LevelVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::reverse_iterator":
        return _pysgpp_swig.LevelVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::reverse_iterator":
        return _pysgpp_swig.LevelVectorVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.LevelVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::allocator_type":
        return _pysgpp_swig.LevelVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.LevelVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::iterator":
        return _pysgpp_swig.LevelVectorVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.LevelVectorVector_swiginit(self, _pysgpp_swig.new_LevelVectorVector(*args))

    def push_back(self, x: "LevelVector") -> "void":
        return _pysgpp_swig.LevelVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::value_type const &":
        return _pysgpp_swig.LevelVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::value_type const &":
        return _pysgpp_swig.LevelVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::size_type", x: "LevelVector") -> "void":
        return _pysgpp_swig.LevelVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.LevelVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.LevelVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::size_type") -> "void":
        return _pysgpp_swig.LevelVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > > >::size_type":
        return _pysgpp_swig.LevelVectorVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_LevelVectorVector

# Register LevelVectorVector in _pysgpp_swig:
_pysgpp_swig.LevelVectorVector_swigregister(LevelVectorVector)

class OperationPoleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.OperationPoleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.OperationPoleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.OperationPoleVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::combigrid::OperationPole * >::size_type":
        return _pysgpp_swig.OperationPoleVector___len__(self)

    def __getslice__(self, i: "std::vector< sgpp::combigrid::OperationPole * >::difference_type", j: "std::vector< sgpp::combigrid::OperationPole * >::difference_type") -> "std::vector< sgpp::combigrid::OperationPole *,std::allocator< sgpp::combigrid::OperationPole * > > *":
        return _pysgpp_swig.OperationPoleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.OperationPoleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< sgpp::combigrid::OperationPole * >::difference_type", j: "std::vector< sgpp::combigrid::OperationPole * >::difference_type") -> "void":
        return _pysgpp_swig.OperationPoleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.OperationPoleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::combigrid::OperationPole * >::value_type":
        return _pysgpp_swig.OperationPoleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.OperationPoleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::combigrid::OperationPole * >::value_type":
        return _pysgpp_swig.OperationPoleVector_pop(self)

    def append(self, x: "OperationPole") -> "void":
        return _pysgpp_swig.OperationPoleVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.OperationPoleVector_empty(self)

    def size(self) -> "std::vector< sgpp::combigrid::OperationPole * >::size_type":
        return _pysgpp_swig.OperationPoleVector_size(self)

    def swap(self, v: "OperationPoleVector") -> "void":
        return _pysgpp_swig.OperationPoleVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::combigrid::OperationPole * >::iterator":
        return _pysgpp_swig.OperationPoleVector_begin(self)

    def end(self) -> "std::vector< sgpp::combigrid::OperationPole * >::iterator":
        return _pysgpp_swig.OperationPoleVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::combigrid::OperationPole * >::reverse_iterator":
        return _pysgpp_swig.OperationPoleVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::combigrid::OperationPole * >::reverse_iterator":
        return _pysgpp_swig.OperationPoleVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.OperationPoleVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::combigrid::OperationPole * >::allocator_type":
        return _pysgpp_swig.OperationPoleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.OperationPoleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::combigrid::OperationPole * >::iterator":
        return _pysgpp_swig.OperationPoleVector_erase(self, *args)

    def __init__(self, *args):
        _pysgpp_swig.OperationPoleVector_swiginit(self, _pysgpp_swig.new_OperationPoleVector(*args))

    def push_back(self, x: "OperationPole") -> "void":
        return _pysgpp_swig.OperationPoleVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::combigrid::OperationPole * >::value_type":
        return _pysgpp_swig.OperationPoleVector_front(self)

    def back(self) -> "std::vector< sgpp::combigrid::OperationPole * >::value_type":
        return _pysgpp_swig.OperationPoleVector_back(self)

    def assign(self, n: "std::vector< sgpp::combigrid::OperationPole * >::size_type", x: "OperationPole") -> "void":
        return _pysgpp_swig.OperationPoleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.OperationPoleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.OperationPoleVector_insert(self, *args)

    def reserve(self, n: "std::vector< sgpp::combigrid::OperationPole * >::size_type") -> "void":
        return _pysgpp_swig.OperationPoleVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::combigrid::OperationPole * >::size_type":
        return _pysgpp_swig.OperationPoleVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_OperationPoleVector

# Register OperationPoleVector in _pysgpp_swig:
_pysgpp_swig.OperationPoleVector_swigregister(OperationPoleVector)



