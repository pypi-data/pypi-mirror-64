{"version":3,"sources":["webpack:///./src/resources/codemirror.ondemand.ts","webpack:///./src/components/ha-code-editor.ts","webpack:///./src/components/ha-yaml-editor.ts"],"names":["loaded","_decorate","customElement","_initialize","_UpdatingElement","HaCodeEditor","[object Object]","args","super","this","F","d","kind","key","value","decorators","property","_value","codemirror","getValue","shadowRoot","querySelector","_get","_getPrototypeOf","prototype","call","refresh","autofocus","focus","changedProps","has","setOption","mode","setValue","_calcGutters","_setScrollBarDirection","classList","toggle","error","_load","async","Promise","all","__webpack_require__","e","then","bind","loadCodeMirror","codeMirror","attachShadow","innerHTML","codeMirrorCss","lineNumbers","tabSize","viewportMargin","Infinity","extraKeys","Tab","Shift-Tab","gutters","on","_onChange","newValue","fireEvent","rtl","getWrapperElement","UpdatingElement","_LitElement","query","_yaml","obj","hasOwnProperty","isEmpty","safeDump","err","alert","afterNextRender","_this$_editor","_editor","defaultValue","undefined","html","label","isValid","ev","stopPropagation","detail","parsed","safeLoad","LitElement"],"mappings":"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","file":"chunk.91da55ba82c258df0006.js","sourcesContent":["interface LoadedCodeMirror {\n  codeMirror: any;\n  codeMirrorCss: any;\n}\n\nlet loaded: Promise<LoadedCodeMirror>;\n\nexport const loadCodeMirror = async (): Promise<LoadedCodeMirror> => {\n  if (!loaded) {\n    loaded = import(/* webpackChunkName: \"codemirror\" */ \"./codemirror\");\n  }\n  return loaded;\n};\n","import { loadCodeMirror } from \"../resources/codemirror.ondemand\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  UpdatingElement,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\nimport { Editor } from \"codemirror\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends UpdatingElement {\n  public codemirror?: Editor;\n  @property() public mode?: string;\n  @property() public autofocus = false;\n  @property() public rtl = false;\n  @property() public error = false;\n  @property() private _value = \"\";\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.getValue() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    return this.shadowRoot!.querySelector(\"span.cm-comment\") ? true : false;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    this.codemirror.refresh();\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.setOption(\"mode\", this.mode);\n    }\n    if (changedProps.has(\"autofocus\")) {\n      this.codemirror.setOption(\"autofocus\", this.autofocus !== false);\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.setValue(this._value);\n    }\n    if (changedProps.has(\"rtl\")) {\n      this.codemirror.setOption(\"gutters\", this._calcGutters());\n      this._setScrollBarDirection();\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._load();\n  }\n\n  private async _load(): Promise<void> {\n    const loaded = await loadCodeMirror();\n\n    const codeMirror = loaded.codeMirror;\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot!.innerHTML = `\n    <style>\n      ${loaded.codeMirrorCss}\n      .CodeMirror {\n        height: var(--code-mirror-height, auto);\n        direction: var(--code-mirror-direction, ltr);\n      }\n      .CodeMirror-scroll {\n        max-height: var(--code-mirror-max-height, --code-mirror-height);\n      }\n      .CodeMirror-gutters {\n        border-right: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        background-color: var(--paper-dialog-background-color, var(--primary-background-color));\n        transition: 0.2s ease border-right;\n      }\n      :host(.error-state) .CodeMirror-gutters {\n        border-color: var(--error-state-color, red);\n      }\n      .CodeMirror-focused .CodeMirror-gutters {\n        border-right: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n      }\n      .CodeMirror-linenumber {\n        color: var(--paper-dialog-color, var(--primary-text-color));\n      }\n      .rtl .CodeMirror-vscrollbar {\n        right: auto;\n        left: 0px;\n      }\n      .rtl-gutter {\n        width: 20px;\n      }\n    </style>`;\n\n    this.codemirror = codeMirror(shadowRoot, {\n      value: this._value,\n      lineNumbers: true,\n      tabSize: 2,\n      mode: this.mode,\n      autofocus: this.autofocus !== false,\n      viewportMargin: Infinity,\n      extraKeys: {\n        Tab: \"indentMore\",\n        \"Shift-Tab\": \"indentLess\",\n      },\n      gutters: this._calcGutters(),\n    });\n    this._setScrollBarDirection();\n    this.codemirror!.on(\"changes\", () => this._onChange());\n  }\n\n  private _onChange(): void {\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  private _calcGutters(): string[] {\n    return this.rtl ? [\"rtl-gutter\", \"CodeMirror-linenumbers\"] : [];\n  }\n\n  private _setScrollBarDirection(): void {\n    if (this.codemirror) {\n      this.codemirror.getWrapperElement().classList.toggle(\"rtl\", this.rtl);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { safeDump, safeLoad } from \"js-yaml\";\nimport \"./ha-code-editor\";\nimport { LitElement, property, customElement, html, query } from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { afterNextRender } from \"../common/util/render-status\";\n// tslint:disable-next-line\nimport { HaCodeEditor } from \"./ha-code-editor\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"editor-refreshed\": undefined;\n  }\n}\n\nconst isEmpty = (obj: object) => {\n  if (typeof obj !== \"object\") {\n    return false;\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property() public value?: any;\n  @property() public defaultValue?: any;\n  @property() public isValid = true;\n  @property() public label?: string;\n  @property() private _yaml: string = \"\";\n  @query(\"ha-code-editor\") private _editor?: HaCodeEditor;\n\n  public setValue(value) {\n    try {\n      this._yaml = value && !isEmpty(value) ? safeDump(value) : \"\";\n    } catch (err) {\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n    afterNextRender(() => {\n      if (this._editor?.codemirror) {\n        this._editor.codemirror.refresh();\n      }\n      afterNextRender(() => fireEvent(this, \"editor-refreshed\"));\n    });\n  }\n\n  protected firstUpdated() {\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected render() {\n    if (this._yaml === undefined) {\n      return;\n    }\n    return html`\n      ${this.label\n        ? html`\n            <p>${this.label}</p>\n          `\n        : \"\"}\n      <ha-code-editor\n        .value=${this._yaml}\n        mode=\"yaml\"\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n      ></ha-code-editor>\n    `;\n  }\n\n  private _onChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n    let parsed;\n    let isValid = true;\n\n    if (value) {\n      try {\n        parsed = safeLoad(value);\n      } catch (err) {\n        // Invalid YAML\n        isValid = false;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", { value: parsed, isValid } as any);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n"],"sourceRoot":""}