{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-stack-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","cardConfigStruct","type","cards","title","HuiStackCardEditor","_decorate","customElement","_initialize","_LitElement","F","_LitElement2","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","kind","decorators","property","key","query","config","_config","_this$_cardEditorEl","_this$_cardEditorEl2","hass","html","_templateObject","selected","_selectedCard","numcards","_templateObject2","_handleSelectedCard","map","_card","i","_templateObject3","undefined","_templateObject4","_toggleMode","_cardEditorEl","hasWarning","hasError","localize","_GUImode","_handleMove","_handleDeleteCard","lovelace","_handleConfigChanged","_handleGUIModeChanged","_templateObject5","_handleCardPicked","ev","target","id","parseInt","stopPropagation","detail","fireEvent","push","splice","Math","max","source","card","guiMode","_this$_cardEditorEl3","toggleMode","static","css","_templateObject6","LitElement"],"mappings":"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","file":"chunk.e379b5333b16557a1660.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  CSSResult,\n  css,\n  query,\n} from \"lit-element\";\nimport \"@polymer/paper-tabs\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { StackCardConfig } from \"../../cards/types\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HuiCardEditor } from \"../card-editor/hui-card-editor\";\nimport { GUIModeChangedEvent } from \"../types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  cards: [\"any\"],\n  title: \"string?\",\n});\n\n@customElement(\"hui-stack-card-editor\")\nexport class HuiStackCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n  @property() public lovelace?: LovelaceConfig;\n  @property() private _config?: StackCardConfig;\n  @property() private _selectedCard: number = 0;\n  @property() private _GUImode?: boolean;\n  @query(\"hui-card-editor\") private _cardEditorEl?: HuiCardEditor;\n\n  public setConfig(config: StackCardConfig): void {\n    this._config = cardConfigStruct(config);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const selected = this._selectedCard!;\n    const numcards = this._config.cards.length;\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"toolbar\">\n          <paper-tabs\n            .selected=${selected}\n            scrollable\n            @iron-select=${this._handleSelectedCard}\n          >\n            ${this._config.cards.map((_card, i) => {\n              return html`\n                <paper-tab>\n                  ${i + 1}\n                </paper-tab>\n              `;\n            })}\n          </paper-tabs>\n          <paper-tabs\n            id=\"add-card\"\n            .selected=${selected === numcards ? \"0\" : undefined}\n            @iron-select=${this._handleSelectedCard}\n          >\n            <paper-tab>\n              <ha-icon icon=\"hass:plus\"></ha-icon>\n            </paper-tab>\n          <paper-tabs>\n        </div>\n\n        <div id=\"editor\">\n          ${\n            selected < numcards\n              ? html`\n                  <div id=\"card-options\">\n                    <mwc-button\n                      @click=${this._toggleMode}\n                      ?disabled=${this._cardEditorEl?.hasWarning ||\n                        this._cardEditorEl?.hasError}\n                      class=\"gui-mode-button\"\n                    >\n                      ${this.hass!.localize(\n                        !this._cardEditorEl || this._GUImode\n                          ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                          : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                      )}\n                    </mwc-button>\n                    <paper-icon-button\n                      id=\"move-before\"\n                      title=\"Move card before\"\n                      icon=\"hass:arrow-left\"\n                      ?disabled=${selected === 0}\n                      @click=${this._handleMove}\n                    ></paper-icon-button>\n\n                    <paper-icon-button\n                      id=\"move-after\"\n                      title=\"Move card after\"\n                      icon=\"hass:arrow-right\"\n                      ?disabled=${selected === numcards - 1}\n                      @click=${this._handleMove}\n                    ></paper-icon-button>\n\n                    <paper-icon-button\n                      icon=\"hass:delete\"\n                      @click=${this._handleDeleteCard}\n                    ></paper-icon-button>\n                  </div>\n\n                  <hui-card-editor\n                    .hass=${this.hass}\n                    .value=${this._config.cards[selected]}\n                    .lovelace=${this.lovelace}\n                    @config-changed=${this._handleConfigChanged}\n                    @GUImode-changed=${this._handleGUIModeChanged}\n                  ></hui-card-editor>\n                `\n              : html`\n                  <hui-card-picker\n                    .hass=${this.hass}\n                    .lovelace=${this.lovelace}\n                    @config-changed=\"${this._handleCardPicked}\"\n                  ></hui-card-picker>\n                `\n          }\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleSelectedCard(ev) {\n    this._selectedCard =\n      ev.target.id === \"add-card\"\n        ? this._config!.cards.length\n        : parseInt(ev.target.selected, 10);\n  }\n\n  private _handleConfigChanged(ev) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._config.cards[this._selectedCard] = ev.detail.config;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleCardPicked(ev) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const config = ev.detail.config;\n    this._config.cards.push(config);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleDeleteCard() {\n    if (!this._config) {\n      return;\n    }\n    this._config.cards.splice(this._selectedCard, 1);\n    this._selectedCard = Math.max(0, this._selectedCard - 1);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleMove(ev) {\n    if (!this._config) {\n      return;\n    }\n    const source = this._selectedCard;\n    const target = ev.target.id === \"move-before\" ? source - 1 : source + 1;\n    const card = this._config.cards.splice(this._selectedCard, 1)[0];\n    this._config.cards.splice(target, 0, card);\n    this._selectedCard = target;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n  }\n\n  private _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .toolbar {\n        display: flex;\n        --paper-tabs-selection-bar-color: var(--primary-color);\n        --paper-tab-ink: var(--primary-color);\n      }\n      paper-tabs {\n        display: flex;\n        font-size: 14px;\n        flex-grow: 1;\n      }\n      #add-card {\n        max-width: 32px;\n        padding: 0;\n      }\n\n      #card-options {\n        display: flex;\n        justify-content: flex-end;\n        width: 100%;\n      }\n\n      #editor {\n        border: 1px solid var(--divider-color);\n        padding: 12px;\n      }\n      @media (max-width: 450px) {\n        #editor {\n          margin: 0 -12px;\n        }\n      }\n\n      .gui-mode-button {\n        margin-right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-stack-card-editor\": HuiStackCardEditor;\n  }\n}\n"],"sourceRoot":""}