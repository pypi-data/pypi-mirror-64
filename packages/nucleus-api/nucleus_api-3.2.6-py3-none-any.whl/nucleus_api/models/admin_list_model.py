# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v3.2.7
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdminListModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'bool',
        'dashboard': 'bool',
        'dbsize': 'int',
        'user_sel': 'str',
        'company': 'str'
    }

    attribute_map = {
        'dataset': 'dataset',
        'dashboard': 'dashboard',
        'dbsize': 'dbsize',
        'user_sel': 'user_sel',
        'company': 'company'
    }

    def __init__(self, dataset=False, dashboard=False, dbsize=None, user_sel=None, company=None):  # noqa: E501
        """AdminListModel - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._dashboard = None
        self._dbsize = None
        self._user_sel = None
        self._company = None
        self.discriminator = None

        if dataset is not None:
            self.dataset = dataset
        if dashboard is not None:
            self.dashboard = dashboard
        if dbsize is not None:
            self.dbsize = dbsize
        if user_sel is not None:
            self.user_sel = user_sel
        if company is not None:
            self.company = company

    @property
    def dataset(self):
        """Gets the dataset of this AdminListModel.  # noqa: E501

        If True, list dataset information  # noqa: E501

        :return: The dataset of this AdminListModel.  # noqa: E501
        :rtype: bool
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AdminListModel.

        If True, list dataset information  # noqa: E501

        :param dataset: The dataset of this AdminListModel.  # noqa: E501
        :type: bool
        """

        self._dataset = dataset

    @property
    def dashboard(self):
        """Gets the dashboard of this AdminListModel.  # noqa: E501

        If True, list dashboard information  # noqa: E501

        :return: The dashboard of this AdminListModel.  # noqa: E501
        :rtype: bool
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """Sets the dashboard of this AdminListModel.

        If True, list dashboard information  # noqa: E501

        :param dashboard: The dashboard of this AdminListModel.  # noqa: E501
        :type: bool
        """

        self._dashboard = dashboard

    @property
    def dbsize(self):
        """Gets the dbsize of this AdminListModel.  # noqa: E501

        Show database size bigger than dbsize  # noqa: E501

        :return: The dbsize of this AdminListModel.  # noqa: E501
        :rtype: int
        """
        return self._dbsize

    @dbsize.setter
    def dbsize(self, dbsize):
        """Sets the dbsize of this AdminListModel.

        Show database size bigger than dbsize  # noqa: E501

        :param dbsize: The dbsize of this AdminListModel.  # noqa: E501
        :type: int
        """

        self._dbsize = dbsize

    @property
    def user_sel(self):
        """Gets the user_sel of this AdminListModel.  # noqa: E501

        Only show information for selected user  # noqa: E501

        :return: The user_sel of this AdminListModel.  # noqa: E501
        :rtype: str
        """
        return self._user_sel

    @user_sel.setter
    def user_sel(self, user_sel):
        """Sets the user_sel of this AdminListModel.

        Only show information for selected user  # noqa: E501

        :param user_sel: The user_sel of this AdminListModel.  # noqa: E501
        :type: str
        """

        self._user_sel = user_sel

    @property
    def company(self):
        """Gets the company of this AdminListModel.  # noqa: E501

        Only show information for users at the selected company  # noqa: E501

        :return: The company of this AdminListModel.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this AdminListModel.

        Only show information for users at the selected company  # noqa: E501

        :param company: The company of this AdminListModel.  # noqa: E501
        :type: str
        """

        self._company = company

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminListModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminListModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
