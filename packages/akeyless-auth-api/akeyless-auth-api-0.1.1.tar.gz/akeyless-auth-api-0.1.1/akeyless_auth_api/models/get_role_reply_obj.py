# coding: utf-8

"""
    Auth - Application API

    Auth manages access for services that need accesses management for their clients. Auth also issues temporary credentials for the services' clients and validates them for the services  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from akeyless_auth_api.models.role_auth_method_association import RoleAuthMethodAssociation  # noqa: F401,E501
from akeyless_auth_api.models.rules import Rules  # noqa: F401,E501


class GetRoleReplyObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'role_auth_methods_assoc': 'list[RoleAuthMethodAssociation]',
        'role_name': 'str',
        'rules': 'Rules'
    }

    attribute_map = {
        'comment': 'comment',
        'role_auth_methods_assoc': 'role_auth_methods_assoc',
        'role_name': 'role_name',
        'rules': 'rules'
    }

    def __init__(self, comment=None, role_auth_methods_assoc=None, role_name=None, rules=None):  # noqa: E501
        """GetRoleReplyObj - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._role_auth_methods_assoc = None
        self._role_name = None
        self._rules = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if role_auth_methods_assoc is not None:
            self.role_auth_methods_assoc = role_auth_methods_assoc
        if role_name is not None:
            self.role_name = role_name
        if rules is not None:
            self.rules = rules

    @property
    def comment(self):
        """Gets the comment of this GetRoleReplyObj.  # noqa: E501


        :return: The comment of this GetRoleReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GetRoleReplyObj.


        :param comment: The comment of this GetRoleReplyObj.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def role_auth_methods_assoc(self):
        """Gets the role_auth_methods_assoc of this GetRoleReplyObj.  # noqa: E501


        :return: The role_auth_methods_assoc of this GetRoleReplyObj.  # noqa: E501
        :rtype: list[RoleAuthMethodAssociation]
        """
        return self._role_auth_methods_assoc

    @role_auth_methods_assoc.setter
    def role_auth_methods_assoc(self, role_auth_methods_assoc):
        """Sets the role_auth_methods_assoc of this GetRoleReplyObj.


        :param role_auth_methods_assoc: The role_auth_methods_assoc of this GetRoleReplyObj.  # noqa: E501
        :type: list[RoleAuthMethodAssociation]
        """

        self._role_auth_methods_assoc = role_auth_methods_assoc

    @property
    def role_name(self):
        """Gets the role_name of this GetRoleReplyObj.  # noqa: E501


        :return: The role_name of this GetRoleReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this GetRoleReplyObj.


        :param role_name: The role_name of this GetRoleReplyObj.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def rules(self):
        """Gets the rules of this GetRoleReplyObj.  # noqa: E501


        :return: The rules of this GetRoleReplyObj.  # noqa: E501
        :rtype: Rules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this GetRoleReplyObj.


        :param rules: The rules of this GetRoleReplyObj.  # noqa: E501
        :type: Rules
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetRoleReplyObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRoleReplyObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
