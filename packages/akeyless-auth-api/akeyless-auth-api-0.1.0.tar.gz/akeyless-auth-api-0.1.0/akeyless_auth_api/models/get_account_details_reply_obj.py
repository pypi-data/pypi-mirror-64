# coding: utf-8

"""
    Auth - Application API

    Auth manages access for services that need accesses management for their clients. Auth also issues temporary credentials for the services' clients and validates them for the services  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from akeyless_auth_api.models.account_status import AccountStatus  # noqa: F401,E501


class GetAccountDetailsReplyObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'admin_access_id': 'str',
        'customer_address': 'str',
        'customer_email': 'str',
        'customer_id': 'str',
        'customer_name': 'str',
        'customer_phone': 'str',
        'num_of_auth_methods': 'int',
        'num_of_dynamic_secrets': 'int',
        'num_of_items': 'int',
        'num_of_keys': 'int',
        'num_of_roles': 'int',
        'num_of_secrets': 'int',
        'num_of_ssh_cert_issuers': 'int',
        'status': 'AccountStatus'
    }

    attribute_map = {
        'account_id': 'account_id',
        'admin_access_id': 'admin_access_id',
        'customer_address': 'customer_address',
        'customer_email': 'customer_email',
        'customer_id': 'customer_id',
        'customer_name': 'customer_name',
        'customer_phone': 'customer_phone',
        'num_of_auth_methods': 'num_of_auth_methods',
        'num_of_dynamic_secrets': 'num_of_dynamic_secrets',
        'num_of_items': 'num_of_items',
        'num_of_keys': 'num_of_keys',
        'num_of_roles': 'num_of_roles',
        'num_of_secrets': 'num_of_secrets',
        'num_of_ssh_cert_issuers': 'num_of_ssh_cert_issuers',
        'status': 'status'
    }

    def __init__(self, account_id=None, admin_access_id=None, customer_address=None, customer_email=None, customer_id=None, customer_name=None, customer_phone=None, num_of_auth_methods=None, num_of_dynamic_secrets=None, num_of_items=None, num_of_keys=None, num_of_roles=None, num_of_secrets=None, num_of_ssh_cert_issuers=None, status=None):  # noqa: E501
        """GetAccountDetailsReplyObj - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._admin_access_id = None
        self._customer_address = None
        self._customer_email = None
        self._customer_id = None
        self._customer_name = None
        self._customer_phone = None
        self._num_of_auth_methods = None
        self._num_of_dynamic_secrets = None
        self._num_of_items = None
        self._num_of_keys = None
        self._num_of_roles = None
        self._num_of_secrets = None
        self._num_of_ssh_cert_issuers = None
        self._status = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if admin_access_id is not None:
            self.admin_access_id = admin_access_id
        if customer_address is not None:
            self.customer_address = customer_address
        if customer_email is not None:
            self.customer_email = customer_email
        if customer_id is not None:
            self.customer_id = customer_id
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_phone is not None:
            self.customer_phone = customer_phone
        if num_of_auth_methods is not None:
            self.num_of_auth_methods = num_of_auth_methods
        if num_of_dynamic_secrets is not None:
            self.num_of_dynamic_secrets = num_of_dynamic_secrets
        if num_of_items is not None:
            self.num_of_items = num_of_items
        if num_of_keys is not None:
            self.num_of_keys = num_of_keys
        if num_of_roles is not None:
            self.num_of_roles = num_of_roles
        if num_of_secrets is not None:
            self.num_of_secrets = num_of_secrets
        if num_of_ssh_cert_issuers is not None:
            self.num_of_ssh_cert_issuers = num_of_ssh_cert_issuers
        if status is not None:
            self.status = status

    @property
    def account_id(self):
        """Gets the account_id of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The account_id of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetAccountDetailsReplyObj.


        :param account_id: The account_id of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def admin_access_id(self):
        """Gets the admin_access_id of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The admin_access_id of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._admin_access_id

    @admin_access_id.setter
    def admin_access_id(self, admin_access_id):
        """Sets the admin_access_id of this GetAccountDetailsReplyObj.


        :param admin_access_id: The admin_access_id of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: str
        """

        self._admin_access_id = admin_access_id

    @property
    def customer_address(self):
        """Gets the customer_address of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The customer_address of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this GetAccountDetailsReplyObj.


        :param customer_address: The customer_address of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: str
        """

        self._customer_address = customer_address

    @property
    def customer_email(self):
        """Gets the customer_email of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The customer_email of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this GetAccountDetailsReplyObj.


        :param customer_email: The customer_email of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: str
        """

        self._customer_email = customer_email

    @property
    def customer_id(self):
        """Gets the customer_id of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The customer_id of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this GetAccountDetailsReplyObj.


        :param customer_id: The customer_id of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The customer_name of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this GetAccountDetailsReplyObj.


        :param customer_name: The customer_name of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_phone(self):
        """Gets the customer_phone of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The customer_phone of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._customer_phone

    @customer_phone.setter
    def customer_phone(self, customer_phone):
        """Sets the customer_phone of this GetAccountDetailsReplyObj.


        :param customer_phone: The customer_phone of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: str
        """

        self._customer_phone = customer_phone

    @property
    def num_of_auth_methods(self):
        """Gets the num_of_auth_methods of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The num_of_auth_methods of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._num_of_auth_methods

    @num_of_auth_methods.setter
    def num_of_auth_methods(self, num_of_auth_methods):
        """Sets the num_of_auth_methods of this GetAccountDetailsReplyObj.


        :param num_of_auth_methods: The num_of_auth_methods of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: int
        """

        self._num_of_auth_methods = num_of_auth_methods

    @property
    def num_of_dynamic_secrets(self):
        """Gets the num_of_dynamic_secrets of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The num_of_dynamic_secrets of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._num_of_dynamic_secrets

    @num_of_dynamic_secrets.setter
    def num_of_dynamic_secrets(self, num_of_dynamic_secrets):
        """Sets the num_of_dynamic_secrets of this GetAccountDetailsReplyObj.


        :param num_of_dynamic_secrets: The num_of_dynamic_secrets of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: int
        """

        self._num_of_dynamic_secrets = num_of_dynamic_secrets

    @property
    def num_of_items(self):
        """Gets the num_of_items of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The num_of_items of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._num_of_items

    @num_of_items.setter
    def num_of_items(self, num_of_items):
        """Sets the num_of_items of this GetAccountDetailsReplyObj.


        :param num_of_items: The num_of_items of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: int
        """

        self._num_of_items = num_of_items

    @property
    def num_of_keys(self):
        """Gets the num_of_keys of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The num_of_keys of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._num_of_keys

    @num_of_keys.setter
    def num_of_keys(self, num_of_keys):
        """Sets the num_of_keys of this GetAccountDetailsReplyObj.


        :param num_of_keys: The num_of_keys of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: int
        """

        self._num_of_keys = num_of_keys

    @property
    def num_of_roles(self):
        """Gets the num_of_roles of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The num_of_roles of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._num_of_roles

    @num_of_roles.setter
    def num_of_roles(self, num_of_roles):
        """Sets the num_of_roles of this GetAccountDetailsReplyObj.


        :param num_of_roles: The num_of_roles of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: int
        """

        self._num_of_roles = num_of_roles

    @property
    def num_of_secrets(self):
        """Gets the num_of_secrets of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The num_of_secrets of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._num_of_secrets

    @num_of_secrets.setter
    def num_of_secrets(self, num_of_secrets):
        """Sets the num_of_secrets of this GetAccountDetailsReplyObj.


        :param num_of_secrets: The num_of_secrets of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: int
        """

        self._num_of_secrets = num_of_secrets

    @property
    def num_of_ssh_cert_issuers(self):
        """Gets the num_of_ssh_cert_issuers of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The num_of_ssh_cert_issuers of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: int
        """
        return self._num_of_ssh_cert_issuers

    @num_of_ssh_cert_issuers.setter
    def num_of_ssh_cert_issuers(self, num_of_ssh_cert_issuers):
        """Sets the num_of_ssh_cert_issuers of this GetAccountDetailsReplyObj.


        :param num_of_ssh_cert_issuers: The num_of_ssh_cert_issuers of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: int
        """

        self._num_of_ssh_cert_issuers = num_of_ssh_cert_issuers

    @property
    def status(self):
        """Gets the status of this GetAccountDetailsReplyObj.  # noqa: E501


        :return: The status of this GetAccountDetailsReplyObj.  # noqa: E501
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetAccountDetailsReplyObj.


        :param status: The status of this GetAccountDetailsReplyObj.  # noqa: E501
        :type: AccountStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAccountDetailsReplyObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAccountDetailsReplyObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
