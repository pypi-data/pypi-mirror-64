# coding: utf-8

"""
    Auth - Application API

    Auth manages access for services that need accesses management for their clients. Auth also issues temporary credentials for the services' clients and validates them for the services  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SSHCertificateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_type': 'int',
        'critical_options': 'dict(str, str)',
        'extensions': 'dict(str, str)',
        'key_id': 'str',
        'nonce': 'list[int]',
        'pub_key_base64': 'str',
        'reserved': 'list[int]',
        'serial': 'int',
        'signer_pub_key_base64': 'str',
        'valid_after': 'int',
        'valid_before': 'int',
        'valid_principals': 'list[str]'
    }

    attribute_map = {
        'cert_type': 'cert_type',
        'critical_options': 'critical_options',
        'extensions': 'extensions',
        'key_id': 'key_id',
        'nonce': 'nonce',
        'pub_key_base64': 'pub_key_base64',
        'reserved': 'reserved',
        'serial': 'serial',
        'signer_pub_key_base64': 'signer_pub_key_base64',
        'valid_after': 'valid_after',
        'valid_before': 'valid_before',
        'valid_principals': 'valid_principals'
    }

    def __init__(self, cert_type=None, critical_options=None, extensions=None, key_id=None, nonce=None, pub_key_base64=None, reserved=None, serial=None, signer_pub_key_base64=None, valid_after=None, valid_before=None, valid_principals=None):  # noqa: E501
        """SSHCertificateParams - a model defined in Swagger"""  # noqa: E501

        self._cert_type = None
        self._critical_options = None
        self._extensions = None
        self._key_id = None
        self._nonce = None
        self._pub_key_base64 = None
        self._reserved = None
        self._serial = None
        self._signer_pub_key_base64 = None
        self._valid_after = None
        self._valid_before = None
        self._valid_principals = None
        self.discriminator = None

        if cert_type is not None:
            self.cert_type = cert_type
        if critical_options is not None:
            self.critical_options = critical_options
        if extensions is not None:
            self.extensions = extensions
        if key_id is not None:
            self.key_id = key_id
        if nonce is not None:
            self.nonce = nonce
        if pub_key_base64 is not None:
            self.pub_key_base64 = pub_key_base64
        if reserved is not None:
            self.reserved = reserved
        if serial is not None:
            self.serial = serial
        if signer_pub_key_base64 is not None:
            self.signer_pub_key_base64 = signer_pub_key_base64
        if valid_after is not None:
            self.valid_after = valid_after
        if valid_before is not None:
            self.valid_before = valid_before
        if valid_principals is not None:
            self.valid_principals = valid_principals

    @property
    def cert_type(self):
        """Gets the cert_type of this SSHCertificateParams.  # noqa: E501


        :return: The cert_type of this SSHCertificateParams.  # noqa: E501
        :rtype: int
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this SSHCertificateParams.


        :param cert_type: The cert_type of this SSHCertificateParams.  # noqa: E501
        :type: int
        """

        self._cert_type = cert_type

    @property
    def critical_options(self):
        """Gets the critical_options of this SSHCertificateParams.  # noqa: E501


        :return: The critical_options of this SSHCertificateParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._critical_options

    @critical_options.setter
    def critical_options(self, critical_options):
        """Sets the critical_options of this SSHCertificateParams.


        :param critical_options: The critical_options of this SSHCertificateParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._critical_options = critical_options

    @property
    def extensions(self):
        """Gets the extensions of this SSHCertificateParams.  # noqa: E501


        :return: The extensions of this SSHCertificateParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this SSHCertificateParams.


        :param extensions: The extensions of this SSHCertificateParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._extensions = extensions

    @property
    def key_id(self):
        """Gets the key_id of this SSHCertificateParams.  # noqa: E501


        :return: The key_id of this SSHCertificateParams.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this SSHCertificateParams.


        :param key_id: The key_id of this SSHCertificateParams.  # noqa: E501
        :type: str
        """

        self._key_id = key_id

    @property
    def nonce(self):
        """Gets the nonce of this SSHCertificateParams.  # noqa: E501


        :return: The nonce of this SSHCertificateParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this SSHCertificateParams.


        :param nonce: The nonce of this SSHCertificateParams.  # noqa: E501
        :type: list[int]
        """

        self._nonce = nonce

    @property
    def pub_key_base64(self):
        """Gets the pub_key_base64 of this SSHCertificateParams.  # noqa: E501


        :return: The pub_key_base64 of this SSHCertificateParams.  # noqa: E501
        :rtype: str
        """
        return self._pub_key_base64

    @pub_key_base64.setter
    def pub_key_base64(self, pub_key_base64):
        """Sets the pub_key_base64 of this SSHCertificateParams.


        :param pub_key_base64: The pub_key_base64 of this SSHCertificateParams.  # noqa: E501
        :type: str
        """

        self._pub_key_base64 = pub_key_base64

    @property
    def reserved(self):
        """Gets the reserved of this SSHCertificateParams.  # noqa: E501


        :return: The reserved of this SSHCertificateParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this SSHCertificateParams.


        :param reserved: The reserved of this SSHCertificateParams.  # noqa: E501
        :type: list[int]
        """

        self._reserved = reserved

    @property
    def serial(self):
        """Gets the serial of this SSHCertificateParams.  # noqa: E501


        :return: The serial of this SSHCertificateParams.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this SSHCertificateParams.


        :param serial: The serial of this SSHCertificateParams.  # noqa: E501
        :type: int
        """

        self._serial = serial

    @property
    def signer_pub_key_base64(self):
        """Gets the signer_pub_key_base64 of this SSHCertificateParams.  # noqa: E501


        :return: The signer_pub_key_base64 of this SSHCertificateParams.  # noqa: E501
        :rtype: str
        """
        return self._signer_pub_key_base64

    @signer_pub_key_base64.setter
    def signer_pub_key_base64(self, signer_pub_key_base64):
        """Sets the signer_pub_key_base64 of this SSHCertificateParams.


        :param signer_pub_key_base64: The signer_pub_key_base64 of this SSHCertificateParams.  # noqa: E501
        :type: str
        """

        self._signer_pub_key_base64 = signer_pub_key_base64

    @property
    def valid_after(self):
        """Gets the valid_after of this SSHCertificateParams.  # noqa: E501


        :return: The valid_after of this SSHCertificateParams.  # noqa: E501
        :rtype: int
        """
        return self._valid_after

    @valid_after.setter
    def valid_after(self, valid_after):
        """Sets the valid_after of this SSHCertificateParams.


        :param valid_after: The valid_after of this SSHCertificateParams.  # noqa: E501
        :type: int
        """

        self._valid_after = valid_after

    @property
    def valid_before(self):
        """Gets the valid_before of this SSHCertificateParams.  # noqa: E501


        :return: The valid_before of this SSHCertificateParams.  # noqa: E501
        :rtype: int
        """
        return self._valid_before

    @valid_before.setter
    def valid_before(self, valid_before):
        """Sets the valid_before of this SSHCertificateParams.


        :param valid_before: The valid_before of this SSHCertificateParams.  # noqa: E501
        :type: int
        """

        self._valid_before = valid_before

    @property
    def valid_principals(self):
        """Gets the valid_principals of this SSHCertificateParams.  # noqa: E501


        :return: The valid_principals of this SSHCertificateParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._valid_principals

    @valid_principals.setter
    def valid_principals(self, valid_principals):
        """Sets the valid_principals of this SSHCertificateParams.


        :param valid_principals: The valid_principals of this SSHCertificateParams.  # noqa: E501
        :type: list[str]
        """

        self._valid_principals = valid_principals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSHCertificateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSHCertificateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
