# coding: utf-8

"""
    Auth - Application API

    Auth manages access for services that need accesses management for their clients. Auth also issues temporary credentials for the services' clients and validates them for the services  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from akeyless_auth_api.models.get_item_reply_obj import GetItemReplyObj  # noqa: F401,E501


class ListItemsInPathReplyObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folders': 'list[str]',
        'items': 'list[GetItemReplyObj]'
    }

    attribute_map = {
        'folders': 'folders',
        'items': 'items'
    }

    def __init__(self, folders=None, items=None):  # noqa: E501
        """ListItemsInPathReplyObj - a model defined in Swagger"""  # noqa: E501

        self._folders = None
        self._items = None
        self.discriminator = None

        if folders is not None:
            self.folders = folders
        if items is not None:
            self.items = items

    @property
    def folders(self):
        """Gets the folders of this ListItemsInPathReplyObj.  # noqa: E501

        List of folders in the requested path  # noqa: E501

        :return: The folders of this ListItemsInPathReplyObj.  # noqa: E501
        :rtype: list[str]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this ListItemsInPathReplyObj.

        List of folders in the requested path  # noqa: E501

        :param folders: The folders of this ListItemsInPathReplyObj.  # noqa: E501
        :type: list[str]
        """

        self._folders = folders

    @property
    def items(self):
        """Gets the items of this ListItemsInPathReplyObj.  # noqa: E501

        List of items in the requested path  # noqa: E501

        :return: The items of this ListItemsInPathReplyObj.  # noqa: E501
        :rtype: list[GetItemReplyObj]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ListItemsInPathReplyObj.

        List of items in the requested path  # noqa: E501

        :param items: The items of this ListItemsInPathReplyObj.  # noqa: E501
        :type: list[GetItemReplyObj]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListItemsInPathReplyObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListItemsInPathReplyObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
