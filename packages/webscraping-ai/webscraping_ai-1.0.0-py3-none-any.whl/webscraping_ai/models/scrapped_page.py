# coding: utf-8

"""
    WebScraping.AI

    A client for https://webscraping.ai API. It provides Chrome JS rendering, rotating proxies and HTML parsing for web scraping.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from webscraping_ai.configuration import Configuration


class ScrappedPage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'size_bytes': 'int',
        'html': 'str',
        'status': 'int',
        'status_message': 'str'
    }

    attribute_map = {
        'size_bytes': 'size_bytes',
        'html': 'html',
        'status': 'status',
        'status_message': 'statusMessage'
    }

    def __init__(self, size_bytes=None, html=None, status=None, status_message=None, local_vars_configuration=None):  # noqa: E501
        """ScrappedPage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._size_bytes = None
        self._html = None
        self._status = None
        self._status_message = None
        self.discriminator = None

        if size_bytes is not None:
            self.size_bytes = size_bytes
        if html is not None:
            self.html = html
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message

    @property
    def size_bytes(self):
        """Gets the size_bytes of this ScrappedPage.  # noqa: E501

        Page HTML content size in bytes  # noqa: E501

        :return: The size_bytes of this ScrappedPage.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this ScrappedPage.

        Page HTML content size in bytes  # noqa: E501

        :param size_bytes: The size_bytes of this ScrappedPage.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def html(self):
        """Gets the html of this ScrappedPage.  # noqa: E501

        HTML of the full page or a selected area  # noqa: E501

        :return: The html of this ScrappedPage.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ScrappedPage.

        HTML of the full page or a selected area  # noqa: E501

        :param html: The html of this ScrappedPage.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def status(self):
        """Gets the status of this ScrappedPage.  # noqa: E501

        Response HTTP status code (200, 404, 302, etc)  # noqa: E501

        :return: The status of this ScrappedPage.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScrappedPage.

        Response HTTP status code (200, 404, 302, etc)  # noqa: E501

        :param status: The status of this ScrappedPage.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ScrappedPage.  # noqa: E501

        Response HTTP status message  # noqa: E501

        :return: The status_message of this ScrappedPage.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ScrappedPage.

        Response HTTP status message  # noqa: E501

        :param status_message: The status_message of this ScrappedPage.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScrappedPage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScrappedPage):
            return True

        return self.to_dict() != other.to_dict()
