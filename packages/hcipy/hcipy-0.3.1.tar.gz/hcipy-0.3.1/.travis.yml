# A workaround for supporting Python in MacOS:
# https://pythonhosted.org/CodeChat/.travis.yml.html

env:
  global:
    - TEST_COVERAGE=false
    - MAKE_DOCS=false
    - RUN_TESTS=true

matrix:
  include:
  - name: "Tests for Python 3.5 on Linux"
    os: linux
    python: "3.5"
    language: python
  - name: "Tests for Python 3.6 on Linux"
    os: linux
    python: "3.6"
    language: python
  - name: "Tests for Python 3.7 on Linux"
    os: linux
    python: "3.7"
    language: python
    env: TEST_COVERAGE=true
  - name: "Tests for Python 3.5 on MacOS"
    os: osx
    language: generic
    env: PYTHON_VERSION=3.5.8
  - name: "Tests for Python 3.6 on MacOS"
    os: osx
    language: generic
    env: PYTHON_VERSION=3.6.9
  - name: "Tests for Python 3.7 on MacOS"
    os: osx
    language: generic
    env: PYTHON_VERSION=3.7.5
  - name: "Make documentation"
    os: linux
    python: "3.7"
    language: python
    env: RUN_TESTS=false MAKE_DOCS=true

before_install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      eval "$(pyenv init -)";
      env PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install "$PYTHON_VERSION";
      pyenv global "$PYTHON_VERSION";

      PYTHON_CMD="python";
    else
      PYTHON_CMD="python";
    fi

  - pip install --upgrade pip

install:
  - pip install --upgrade numpy

  - if [ "$MAKE_DOCS" = true ]; then
      git fetch --unshallow;
    fi

  - pip install .
  
  - if [ "$RUN_TESTS" = true ]; then
      pip install ".[dev]";
    fi

  - if [ "$MAKE_DOCS" = true ]; then
      pip install ".[doc]";
      sudo apt-get -y install ffmpeg pandoc;
      pip install awscli;
    fi

  - $PYTHON_CMD --version
  - $PYTHON_CMD -c "import numpy; print('Numpy', numpy.__version__)"
  - $PYTHON_CMD -c "import scipy; print('Scipy', scipy.__version__)"
  - $PYTHON_CMD -c "import matplotlib; print('Matplotlib', matplotlib.__version__)"
  - $PYTHON_CMD -c "import hcipy; print('HCIPy', hcipy.__version__)"

script:
  - if [ "$RUN_TESTS" = true ] && [ "$TEST_COVERAGE" = true ]; then
      $PYTHON_CMD -m coverage run -m pytest ./tests || travis_terminate 1;
    fi
  
  - if [ "$RUN_TESTS" = true ] && [ "$TEST_COVERAGE" = false ]; then
      $PYTHON_CMD -m pytest ./tests || travis_terminate 1;
    fi
  
  - if [ "$MAKE_DOCS" = true ]; then
      cd doc;
      make html || travis_terminate 1;
      cd ..;
    fi

after_success:
  - if [ "$TEST_COVERAGE" = true ]; then
      travis_retry codecov;
    fi

  - if [ "$MAKE_DOCS" = true ] && [ "$TRAVIS_BRANCH" = "master" ] && [ "$TRAVIS_PULL_REQUEST" = false ]; then
      aws s3 sync --acl public-read --delete --cache-control max-age=86400,public ./doc/_build/html s3://docs.hcipy.org/dev || travis_terminate 1;
    fi
