# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gympp_bindings')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gympp_bindings')
    _gympp_bindings = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gympp_bindings', [dirname(__file__)])
        except ImportError:
            import _gympp_bindings
            return _gympp_bindings
        try:
            _mod = imp.load_module('_gympp_bindings', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gympp_bindings = swig_import_helper()
    del swig_import_helper
else:
    import _gympp_bindings
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gympp_bindings.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _gympp_bindings.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gympp_bindings.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gympp_bindings.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gympp_bindings.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gympp_bindings.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gympp_bindings.SwigPyIterator_copy(self)

    def next(self):
        return _gympp_bindings.SwigPyIterator_next(self)

    def __next__(self):
        return _gympp_bindings.SwigPyIterator___next__(self)

    def previous(self):
        return _gympp_bindings.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gympp_bindings.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gympp_bindings.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gympp_bindings.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gympp_bindings.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gympp_bindings.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gympp_bindings.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gympp_bindings.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gympp_bindings.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Vector_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_i, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Vector_i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Vector_i___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Vector_i___bool__(self)

    def __len__(self):
        return _gympp_bindings.Vector_i___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Vector_i___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Vector_i___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Vector_i___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Vector_i___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Vector_i___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Vector_i___setitem__(self, *args)

    def pop(self):
        return _gympp_bindings.Vector_i_pop(self)

    def append(self, x):
        return _gympp_bindings.Vector_i_append(self, x)

    def empty(self):
        return _gympp_bindings.Vector_i_empty(self)

    def size(self):
        return _gympp_bindings.Vector_i_size(self)

    def swap(self, v):
        return _gympp_bindings.Vector_i_swap(self, v)

    def begin(self):
        return _gympp_bindings.Vector_i_begin(self)

    def end(self):
        return _gympp_bindings.Vector_i_end(self)

    def rbegin(self):
        return _gympp_bindings.Vector_i_rbegin(self)

    def rend(self):
        return _gympp_bindings.Vector_i_rend(self)

    def clear(self):
        return _gympp_bindings.Vector_i_clear(self)

    def get_allocator(self):
        return _gympp_bindings.Vector_i_get_allocator(self)

    def pop_back(self):
        return _gympp_bindings.Vector_i_pop_back(self)

    def erase(self, *args):
        return _gympp_bindings.Vector_i_erase(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Vector_i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gympp_bindings.Vector_i_push_back(self, x)

    def front(self):
        return _gympp_bindings.Vector_i_front(self)

    def back(self):
        return _gympp_bindings.Vector_i_back(self)

    def assign(self, n, x):
        return _gympp_bindings.Vector_i_assign(self, n, x)

    def resize(self, *args):
        return _gympp_bindings.Vector_i_resize(self, *args)

    def insert(self, *args):
        return _gympp_bindings.Vector_i_insert(self, *args)

    def reserve(self, n):
        return _gympp_bindings.Vector_i_reserve(self, n)

    def capacity(self):
        return _gympp_bindings.Vector_i_capacity(self)
    __swig_destroy__ = _gympp_bindings.delete_Vector_i
    __del__ = lambda self: None
Vector_i_swigregister = _gympp_bindings.Vector_i_swigregister
Vector_i_swigregister(Vector_i)

class Vector_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_u, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Vector_u_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Vector_u___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Vector_u___bool__(self)

    def __len__(self):
        return _gympp_bindings.Vector_u___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Vector_u___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Vector_u___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Vector_u___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Vector_u___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Vector_u___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Vector_u___setitem__(self, *args)

    def pop(self):
        return _gympp_bindings.Vector_u_pop(self)

    def append(self, x):
        return _gympp_bindings.Vector_u_append(self, x)

    def empty(self):
        return _gympp_bindings.Vector_u_empty(self)

    def size(self):
        return _gympp_bindings.Vector_u_size(self)

    def swap(self, v):
        return _gympp_bindings.Vector_u_swap(self, v)

    def begin(self):
        return _gympp_bindings.Vector_u_begin(self)

    def end(self):
        return _gympp_bindings.Vector_u_end(self)

    def rbegin(self):
        return _gympp_bindings.Vector_u_rbegin(self)

    def rend(self):
        return _gympp_bindings.Vector_u_rend(self)

    def clear(self):
        return _gympp_bindings.Vector_u_clear(self)

    def get_allocator(self):
        return _gympp_bindings.Vector_u_get_allocator(self)

    def pop_back(self):
        return _gympp_bindings.Vector_u_pop_back(self)

    def erase(self, *args):
        return _gympp_bindings.Vector_u_erase(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Vector_u(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gympp_bindings.Vector_u_push_back(self, x)

    def front(self):
        return _gympp_bindings.Vector_u_front(self)

    def back(self):
        return _gympp_bindings.Vector_u_back(self)

    def assign(self, n, x):
        return _gympp_bindings.Vector_u_assign(self, n, x)

    def resize(self, *args):
        return _gympp_bindings.Vector_u_resize(self, *args)

    def insert(self, *args):
        return _gympp_bindings.Vector_u_insert(self, *args)

    def reserve(self, n):
        return _gympp_bindings.Vector_u_reserve(self, n)

    def capacity(self):
        return _gympp_bindings.Vector_u_capacity(self)
    __swig_destroy__ = _gympp_bindings.delete_Vector_u
    __del__ = lambda self: None
Vector_u_swigregister = _gympp_bindings.Vector_u_swigregister
Vector_u_swigregister(Vector_u)

class Vector_f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_f, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Vector_f_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Vector_f___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Vector_f___bool__(self)

    def __len__(self):
        return _gympp_bindings.Vector_f___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Vector_f___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Vector_f___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Vector_f___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Vector_f___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Vector_f___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Vector_f___setitem__(self, *args)

    def pop(self):
        return _gympp_bindings.Vector_f_pop(self)

    def append(self, x):
        return _gympp_bindings.Vector_f_append(self, x)

    def empty(self):
        return _gympp_bindings.Vector_f_empty(self)

    def size(self):
        return _gympp_bindings.Vector_f_size(self)

    def swap(self, v):
        return _gympp_bindings.Vector_f_swap(self, v)

    def begin(self):
        return _gympp_bindings.Vector_f_begin(self)

    def end(self):
        return _gympp_bindings.Vector_f_end(self)

    def rbegin(self):
        return _gympp_bindings.Vector_f_rbegin(self)

    def rend(self):
        return _gympp_bindings.Vector_f_rend(self)

    def clear(self):
        return _gympp_bindings.Vector_f_clear(self)

    def get_allocator(self):
        return _gympp_bindings.Vector_f_get_allocator(self)

    def pop_back(self):
        return _gympp_bindings.Vector_f_pop_back(self)

    def erase(self, *args):
        return _gympp_bindings.Vector_f_erase(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Vector_f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gympp_bindings.Vector_f_push_back(self, x)

    def front(self):
        return _gympp_bindings.Vector_f_front(self)

    def back(self):
        return _gympp_bindings.Vector_f_back(self)

    def assign(self, n, x):
        return _gympp_bindings.Vector_f_assign(self, n, x)

    def resize(self, *args):
        return _gympp_bindings.Vector_f_resize(self, *args)

    def insert(self, *args):
        return _gympp_bindings.Vector_f_insert(self, *args)

    def reserve(self, n):
        return _gympp_bindings.Vector_f_reserve(self, n)

    def capacity(self):
        return _gympp_bindings.Vector_f_capacity(self)
    __swig_destroy__ = _gympp_bindings.delete_Vector_f
    __del__ = lambda self: None
Vector_f_swigregister = _gympp_bindings.Vector_f_swigregister
Vector_f_swigregister(Vector_f)

class Vector_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Vector_d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Vector_d___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Vector_d___bool__(self)

    def __len__(self):
        return _gympp_bindings.Vector_d___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Vector_d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Vector_d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Vector_d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Vector_d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Vector_d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Vector_d___setitem__(self, *args)

    def pop(self):
        return _gympp_bindings.Vector_d_pop(self)

    def append(self, x):
        return _gympp_bindings.Vector_d_append(self, x)

    def empty(self):
        return _gympp_bindings.Vector_d_empty(self)

    def size(self):
        return _gympp_bindings.Vector_d_size(self)

    def swap(self, v):
        return _gympp_bindings.Vector_d_swap(self, v)

    def begin(self):
        return _gympp_bindings.Vector_d_begin(self)

    def end(self):
        return _gympp_bindings.Vector_d_end(self)

    def rbegin(self):
        return _gympp_bindings.Vector_d_rbegin(self)

    def rend(self):
        return _gympp_bindings.Vector_d_rend(self)

    def clear(self):
        return _gympp_bindings.Vector_d_clear(self)

    def get_allocator(self):
        return _gympp_bindings.Vector_d_get_allocator(self)

    def pop_back(self):
        return _gympp_bindings.Vector_d_pop_back(self)

    def erase(self, *args):
        return _gympp_bindings.Vector_d_erase(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Vector_d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gympp_bindings.Vector_d_push_back(self, x)

    def front(self):
        return _gympp_bindings.Vector_d_front(self)

    def back(self):
        return _gympp_bindings.Vector_d_back(self)

    def assign(self, n, x):
        return _gympp_bindings.Vector_d_assign(self, n, x)

    def resize(self, *args):
        return _gympp_bindings.Vector_d_resize(self, *args)

    def insert(self, *args):
        return _gympp_bindings.Vector_d_insert(self, *args)

    def reserve(self, n):
        return _gympp_bindings.Vector_d_reserve(self, n)

    def capacity(self):
        return _gympp_bindings.Vector_d_capacity(self)
    __swig_destroy__ = _gympp_bindings.delete_Vector_d
    __del__ = lambda self: None
Vector_d_swigregister = _gympp_bindings.Vector_d_swigregister
Vector_d_swigregister(Vector_d)

class Vector_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_s, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Vector_s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Vector_s___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Vector_s___bool__(self)

    def __len__(self):
        return _gympp_bindings.Vector_s___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Vector_s___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Vector_s___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Vector_s___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Vector_s___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Vector_s___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Vector_s___setitem__(self, *args)

    def pop(self):
        return _gympp_bindings.Vector_s_pop(self)

    def append(self, x):
        return _gympp_bindings.Vector_s_append(self, x)

    def empty(self):
        return _gympp_bindings.Vector_s_empty(self)

    def size(self):
        return _gympp_bindings.Vector_s_size(self)

    def swap(self, v):
        return _gympp_bindings.Vector_s_swap(self, v)

    def begin(self):
        return _gympp_bindings.Vector_s_begin(self)

    def end(self):
        return _gympp_bindings.Vector_s_end(self)

    def rbegin(self):
        return _gympp_bindings.Vector_s_rbegin(self)

    def rend(self):
        return _gympp_bindings.Vector_s_rend(self)

    def clear(self):
        return _gympp_bindings.Vector_s_clear(self)

    def get_allocator(self):
        return _gympp_bindings.Vector_s_get_allocator(self)

    def pop_back(self):
        return _gympp_bindings.Vector_s_pop_back(self)

    def erase(self, *args):
        return _gympp_bindings.Vector_s_erase(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Vector_s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gympp_bindings.Vector_s_push_back(self, x)

    def front(self):
        return _gympp_bindings.Vector_s_front(self)

    def back(self):
        return _gympp_bindings.Vector_s_back(self)

    def assign(self, n, x):
        return _gympp_bindings.Vector_s_assign(self, n, x)

    def resize(self, *args):
        return _gympp_bindings.Vector_s_resize(self, *args)

    def insert(self, *args):
        return _gympp_bindings.Vector_s_insert(self, *args)

    def reserve(self, n):
        return _gympp_bindings.Vector_s_reserve(self, n)

    def capacity(self):
        return _gympp_bindings.Vector_s_capacity(self)
    __swig_destroy__ = _gympp_bindings.delete_Vector_s
    __del__ = lambda self: None
Vector_s_swigregister = _gympp_bindings.Vector_s_swigregister
Vector_s_swigregister(Vector_s)

class Array3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array3d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Array3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Array3d___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Array3d___bool__(self)

    def __len__(self):
        return _gympp_bindings.Array3d___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Array3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Array3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Array3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Array3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Array3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Array3d___setitem__(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Array3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gympp_bindings.Array3d_empty(self)

    def size(self):
        return _gympp_bindings.Array3d_size(self)

    def swap(self, v):
        return _gympp_bindings.Array3d_swap(self, v)

    def begin(self):
        return _gympp_bindings.Array3d_begin(self)

    def end(self):
        return _gympp_bindings.Array3d_end(self)

    def rbegin(self):
        return _gympp_bindings.Array3d_rbegin(self)

    def rend(self):
        return _gympp_bindings.Array3d_rend(self)

    def front(self):
        return _gympp_bindings.Array3d_front(self)

    def back(self):
        return _gympp_bindings.Array3d_back(self)

    def fill(self, u):
        return _gympp_bindings.Array3d_fill(self, u)
    __swig_destroy__ = _gympp_bindings.delete_Array3d
    __del__ = lambda self: None
Array3d_swigregister = _gympp_bindings.Array3d_swigregister
Array3d_swigregister(Array3d)

class Array4d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array4d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Array4d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Array4d___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Array4d___bool__(self)

    def __len__(self):
        return _gympp_bindings.Array4d___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Array4d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Array4d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Array4d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Array4d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Array4d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Array4d___setitem__(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Array4d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gympp_bindings.Array4d_empty(self)

    def size(self):
        return _gympp_bindings.Array4d_size(self)

    def swap(self, v):
        return _gympp_bindings.Array4d_swap(self, v)

    def begin(self):
        return _gympp_bindings.Array4d_begin(self)

    def end(self):
        return _gympp_bindings.Array4d_end(self)

    def rbegin(self):
        return _gympp_bindings.Array4d_rbegin(self)

    def rend(self):
        return _gympp_bindings.Array4d_rend(self)

    def front(self):
        return _gympp_bindings.Array4d_front(self)

    def back(self):
        return _gympp_bindings.Array4d_back(self)

    def fill(self, u):
        return _gympp_bindings.Array4d_fill(self, u)
    __swig_destroy__ = _gympp_bindings.delete_Array4d
    __del__ = lambda self: None
Array4d_swigregister = _gympp_bindings.Array4d_swigregister
Array4d_swigregister(Array4d)

class Array6d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array6d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array6d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Array6d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Array6d___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Array6d___bool__(self)

    def __len__(self):
        return _gympp_bindings.Array6d___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Array6d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Array6d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Array6d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Array6d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Array6d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Array6d___setitem__(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Array6d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gympp_bindings.Array6d_empty(self)

    def size(self):
        return _gympp_bindings.Array6d_size(self)

    def swap(self, v):
        return _gympp_bindings.Array6d_swap(self, v)

    def begin(self):
        return _gympp_bindings.Array6d_begin(self)

    def end(self):
        return _gympp_bindings.Array6d_end(self)

    def rbegin(self):
        return _gympp_bindings.Array6d_rbegin(self)

    def rend(self):
        return _gympp_bindings.Array6d_rend(self)

    def front(self):
        return _gympp_bindings.Array6d_front(self)

    def back(self):
        return _gympp_bindings.Array6d_back(self)

    def fill(self, u):
        return _gympp_bindings.Array6d_fill(self, u)
    __swig_destroy__ = _gympp_bindings.delete_Array6d
    __del__ = lambda self: None
Array6d_swigregister = _gympp_bindings.Array6d_swigregister
Array6d_swigregister(Array6d)

class Sample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sample, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer"] = _gympp_bindings.Sample_buffer_set
    __swig_getmethods__["buffer"] = _gympp_bindings.Sample_buffer_get
    if _newclass:
        buffer = _swig_property(_gympp_bindings.Sample_buffer_get, _gympp_bindings.Sample_buffer_set)

    def __init__(self, *args):
        this = _gympp_bindings.new_Sample(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_i(self, i):
        return _gympp_bindings.Sample_get_i(self, i)

    def get_u(self, i):
        return _gympp_bindings.Sample_get_u(self, i)

    def get_f(self, i):
        return _gympp_bindings.Sample_get_f(self, i)

    def get_d(self, i):
        return _gympp_bindings.Sample_get_d(self, i)

    def getBuffer_i(self, *args):
        return _gympp_bindings.Sample_getBuffer_i(self, *args)

    def getBuffer_u(self, *args):
        return _gympp_bindings.Sample_getBuffer_u(self, *args)

    def getBuffer_f(self, *args):
        return _gympp_bindings.Sample_getBuffer_f(self, *args)

    def getBuffer_d(self, *args):
        return _gympp_bindings.Sample_getBuffer_d(self, *args)
    __swig_destroy__ = _gympp_bindings.delete_Sample
    __del__ = lambda self: None
Sample_swigregister = _gympp_bindings.Sample_swigregister
Sample_swigregister(Sample)

class Range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Range(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["min"] = _gympp_bindings.Range_min_set
    __swig_getmethods__["min"] = _gympp_bindings.Range_min_get
    if _newclass:
        min = _swig_property(_gympp_bindings.Range_min_get, _gympp_bindings.Range_min_set)
    __swig_setmethods__["max"] = _gympp_bindings.Range_max_set
    __swig_getmethods__["max"] = _gympp_bindings.Range_max_get
    if _newclass:
        max = _swig_property(_gympp_bindings.Range_max_get, _gympp_bindings.Range_max_set)

    def contains(self, value):
        return _gympp_bindings.Range_contains(self, value)
    __swig_destroy__ = _gympp_bindings.delete_Range
    __del__ = lambda self: None
Range_swigregister = _gympp_bindings.Range_swigregister
Range_swigregister(Range)

class BufferContainer_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferContainer_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferContainer_i, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gympp_bindings.new_BufferContainer_i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_BufferContainer_i
    __del__ = lambda self: None
BufferContainer_i_swigregister = _gympp_bindings.BufferContainer_i_swigregister
BufferContainer_i_swigregister(BufferContainer_i)

class BufferContainer_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferContainer_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferContainer_u, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gympp_bindings.new_BufferContainer_u()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_BufferContainer_u
    __del__ = lambda self: None
BufferContainer_u_swigregister = _gympp_bindings.BufferContainer_u_swigregister
BufferContainer_u_swigregister(BufferContainer_u)

class BufferContainer_f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferContainer_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferContainer_f, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gympp_bindings.new_BufferContainer_f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_BufferContainer_f
    __del__ = lambda self: None
BufferContainer_f_swigregister = _gympp_bindings.BufferContainer_f_swigregister
BufferContainer_f_swigregister(BufferContainer_f)

class BufferContainer_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferContainer_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferContainer_d, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gympp_bindings.new_BufferContainer_d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_BufferContainer_d
    __del__ = lambda self: None
BufferContainer_d_swigregister = _gympp_bindings.BufferContainer_d_swigregister
BufferContainer_d_swigregister(BufferContainer_d)

class Optional_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optional_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optional_i, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Optional_i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def has_value(self):
        return _gympp_bindings.Optional_i_has_value(self)

    def value(self):
        return _gympp_bindings.Optional_i_value(self)
    __swig_destroy__ = _gympp_bindings.delete_Optional_i
    __del__ = lambda self: None
Optional_i_swigregister = _gympp_bindings.Optional_i_swigregister
Optional_i_swigregister(Optional_i)

class Optional_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optional_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optional_u, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Optional_u(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def has_value(self):
        return _gympp_bindings.Optional_u_has_value(self)

    def value(self):
        return _gympp_bindings.Optional_u_value(self)
    __swig_destroy__ = _gympp_bindings.delete_Optional_u
    __del__ = lambda self: None
Optional_u_swigregister = _gympp_bindings.Optional_u_swigregister
Optional_u_swigregister(Optional_u)

class Optional_f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optional_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optional_f, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Optional_f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def has_value(self):
        return _gympp_bindings.Optional_f_has_value(self)

    def value(self):
        return _gympp_bindings.Optional_f_value(self)
    __swig_destroy__ = _gympp_bindings.delete_Optional_f
    __del__ = lambda self: None
Optional_f_swigregister = _gympp_bindings.Optional_f_swigregister
Optional_f_swigregister(Optional_f)

class Optional_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optional_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optional_d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Optional_d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def has_value(self):
        return _gympp_bindings.Optional_d_has_value(self)

    def value(self):
        return _gympp_bindings.Optional_d_value(self)
    __swig_destroy__ = _gympp_bindings.delete_Optional_d
    __del__ = lambda self: None
Optional_d_swigregister = _gympp_bindings.Optional_d_swigregister
Optional_d_swigregister(Optional_d)

class Optional_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optional_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optional_state, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Optional_state(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def has_value(self):
        return _gympp_bindings.Optional_state_has_value(self)

    def value(self):
        return _gympp_bindings.Optional_state_value(self)
    __swig_destroy__ = _gympp_bindings.delete_Optional_state
    __del__ = lambda self: None
Optional_state_swigregister = _gympp_bindings.Optional_state_swigregister
Optional_state_swigregister(Optional_state)

class Optional_sample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optional_sample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optional_sample, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Optional_sample(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def has_value(self):
        return _gympp_bindings.Optional_sample_has_value(self)

    def value(self):
        return _gympp_bindings.Optional_sample_value(self)
    __swig_destroy__ = _gympp_bindings.delete_Optional_sample
    __del__ = lambda self: None
Optional_sample_swigregister = _gympp_bindings.Optional_sample_swigregister
Optional_sample_swigregister(Optional_sample)

SHARED_PTR_DISOWN = _gympp_bindings.SHARED_PTR_DISOWN
class Space(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Space, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Space, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gympp_bindings.delete_Space
    __del__ = lambda self: None

    def sample(self):
        return _gympp_bindings.Space_sample(self)

    def contains(self, data):
        return _gympp_bindings.Space_contains(self, data)
Space_swigregister = _gympp_bindings.Space_swigregister
Space_swigregister(Space)

class Box(Space):
    __swig_setmethods__ = {}
    for _s in [Space]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [Space]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_Box(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_Box
    __del__ = lambda self: None

    def sample(self):
        return _gympp_bindings.Box_sample(self)

    def contains(self, data):
        return _gympp_bindings.Box_contains(self, data)

    def high(self):
        return _gympp_bindings.Box_high(self)

    def low(self):
        return _gympp_bindings.Box_low(self)

    def shape(self):
        return _gympp_bindings.Box_shape(self)
Box_swigregister = _gympp_bindings.Box_swigregister
Box_swigregister(Box)

class Discrete(Space):
    __swig_setmethods__ = {}
    for _s in [Space]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Discrete, name, value)
    __swig_getmethods__ = {}
    for _s in [Space]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Discrete, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _gympp_bindings.new_Discrete(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_Discrete
    __del__ = lambda self: None

    def sample(self):
        return _gympp_bindings.Discrete_sample(self)

    def contains(self, data):
        return _gympp_bindings.Discrete_contains(self, data)

    def n(self):
        return _gympp_bindings.Discrete_n(self)

    def shape(self):
        return _gympp_bindings.Discrete_shape(self)
Discrete_swigregister = _gympp_bindings.Discrete_swigregister
Discrete_swigregister(Discrete)

class GymFactorySingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GymFactorySingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GymFactorySingleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Instance = staticmethod(_gympp_bindings.GymFactorySingleton_Instance)
    else:
        Instance = _gympp_bindings.GymFactorySingleton_Instance
GymFactorySingleton_swigregister = _gympp_bindings.GymFactorySingleton_swigregister
GymFactorySingleton_swigregister(GymFactorySingleton)

def GymFactorySingleton_Instance():
    return _gympp_bindings.GymFactorySingleton_Instance()
GymFactorySingleton_Instance = _gympp_bindings.GymFactorySingleton_Instance

class State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["done"] = _gympp_bindings.State_done_set
    __swig_getmethods__["done"] = _gympp_bindings.State_done_get
    if _newclass:
        done = _swig_property(_gympp_bindings.State_done_get, _gympp_bindings.State_done_set)
    __swig_setmethods__["info"] = _gympp_bindings.State_info_set
    __swig_getmethods__["info"] = _gympp_bindings.State_info_get
    if _newclass:
        info = _swig_property(_gympp_bindings.State_info_get, _gympp_bindings.State_info_set)
    __swig_setmethods__["reward"] = _gympp_bindings.State_reward_set
    __swig_getmethods__["reward"] = _gympp_bindings.State_reward_get
    if _newclass:
        reward = _swig_property(_gympp_bindings.State_reward_get, _gympp_bindings.State_reward_set)
    __swig_setmethods__["observation"] = _gympp_bindings.State_observation_set
    __swig_getmethods__["observation"] = _gympp_bindings.State_observation_get
    if _newclass:
        observation = _swig_property(_gympp_bindings.State_observation_get, _gympp_bindings.State_observation_set)

    def __init__(self):
        this = _gympp_bindings.new_State()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_State
    __del__ = lambda self: None
State_swigregister = _gympp_bindings.State_swigregister
State_swigregister(State)

class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RenderMode_HUMAN = _gympp_bindings.Environment_RenderMode_HUMAN
    RenderMode_RGB_ARRAY = _gympp_bindings.Environment_RenderMode_RGB_ARRAY
    RenderMode_ANSI = _gympp_bindings.Environment_RenderMode_ANSI
    __swig_setmethods__["action_space"] = _gympp_bindings.Environment_action_space_set
    __swig_getmethods__["action_space"] = _gympp_bindings.Environment_action_space_get
    if _newclass:
        action_space = _swig_property(_gympp_bindings.Environment_action_space_get, _gympp_bindings.Environment_action_space_set)
    __swig_setmethods__["observation_space"] = _gympp_bindings.Environment_observation_space_set
    __swig_getmethods__["observation_space"] = _gympp_bindings.Environment_observation_space_get
    if _newclass:
        observation_space = _swig_property(_gympp_bindings.Environment_observation_space_get, _gympp_bindings.Environment_observation_space_set)
    __swig_setmethods__["reward_range"] = _gympp_bindings.Environment_reward_range_set
    __swig_getmethods__["reward_range"] = _gympp_bindings.Environment_reward_range_get
    if _newclass:
        reward_range = _swig_property(_gympp_bindings.Environment_reward_range_get, _gympp_bindings.Environment_reward_range_set)
    __swig_destroy__ = _gympp_bindings.delete_Environment
    __del__ = lambda self: None

    def step(self, action):
        return _gympp_bindings.Environment_step(self, action)

    def reset(self):
        return _gympp_bindings.Environment_reset(self)

    def render(self, mode):
        return _gympp_bindings.Environment_render(self, mode)

    def seed(self, seed=0):
        return _gympp_bindings.Environment_seed(self, seed)
Environment_swigregister = _gympp_bindings.Environment_swigregister
Environment_swigregister(Environment)

DEFAULT_VERBOSITY = _gympp_bindings.DEFAULT_VERBOSITY
class ModelInitData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelInitData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelInitData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sdfString"] = _gympp_bindings.ModelInitData_sdfString_set
    __swig_getmethods__["sdfString"] = _gympp_bindings.ModelInitData_sdfString_get
    if _newclass:
        sdfString = _swig_property(_gympp_bindings.ModelInitData_sdfString_get, _gympp_bindings.ModelInitData_sdfString_set)
    __swig_setmethods__["fixedPose"] = _gympp_bindings.ModelInitData_fixedPose_set
    __swig_getmethods__["fixedPose"] = _gympp_bindings.ModelInitData_fixedPose_get
    if _newclass:
        fixedPose = _swig_property(_gympp_bindings.ModelInitData_fixedPose_get, _gympp_bindings.ModelInitData_fixedPose_set)
    __swig_setmethods__["baseLink"] = _gympp_bindings.ModelInitData_baseLink_set
    __swig_getmethods__["baseLink"] = _gympp_bindings.ModelInitData_baseLink_get
    if _newclass:
        baseLink = _swig_property(_gympp_bindings.ModelInitData_baseLink_get, _gympp_bindings.ModelInitData_baseLink_set)
    __swig_setmethods__["modelName"] = _gympp_bindings.ModelInitData_modelName_set
    __swig_getmethods__["modelName"] = _gympp_bindings.ModelInitData_modelName_get
    if _newclass:
        modelName = _swig_property(_gympp_bindings.ModelInitData_modelName_get, _gympp_bindings.ModelInitData_modelName_set)
    __swig_setmethods__["position"] = _gympp_bindings.ModelInitData_position_set
    __swig_getmethods__["position"] = _gympp_bindings.ModelInitData_position_get
    if _newclass:
        position = _swig_property(_gympp_bindings.ModelInitData_position_get, _gympp_bindings.ModelInitData_position_set)
    __swig_setmethods__["orientation"] = _gympp_bindings.ModelInitData_orientation_set
    __swig_getmethods__["orientation"] = _gympp_bindings.ModelInitData_orientation_get
    if _newclass:
        orientation = _swig_property(_gympp_bindings.ModelInitData_orientation_get, _gympp_bindings.ModelInitData_orientation_set)

    def __init__(self):
        this = _gympp_bindings.new_ModelInitData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_ModelInitData
    __del__ = lambda self: None
ModelInitData_swigregister = _gympp_bindings.ModelInitData_swigregister
ModelInitData_swigregister(ModelInitData)

class PluginData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["libName"] = _gympp_bindings.PluginData_libName_set
    __swig_getmethods__["libName"] = _gympp_bindings.PluginData_libName_get
    if _newclass:
        libName = _swig_property(_gympp_bindings.PluginData_libName_get, _gympp_bindings.PluginData_libName_set)
    __swig_setmethods__["className"] = _gympp_bindings.PluginData_className_set
    __swig_getmethods__["className"] = _gympp_bindings.PluginData_className_get
    if _newclass:
        className = _swig_property(_gympp_bindings.PluginData_className_get, _gympp_bindings.PluginData_className_set)

    def __init__(self):
        this = _gympp_bindings.new_PluginData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_PluginData
    __del__ = lambda self: None
PluginData_swigregister = _gympp_bindings.PluginData_swigregister
PluginData_swigregister(PluginData)

class GazeboWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GazeboWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GazeboWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_GazeboWrapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_GazeboWrapper
    __del__ = lambda self: None

    def initialize(self):
        return _gympp_bindings.GazeboWrapper_initialize(self)

    def run(self):
        return _gympp_bindings.GazeboWrapper_run(self)

    def gui(self):
        return _gympp_bindings.GazeboWrapper_gui(self)

    def close(self):
        return _gympp_bindings.GazeboWrapper_close(self)

    def initialized(self):
        return _gympp_bindings.GazeboWrapper_initialized(self)

    def getSimulatedTime(self):
        return _gympp_bindings.GazeboWrapper_getSimulatedTime(self)

    def getPhysicsData(self):
        return _gympp_bindings.GazeboWrapper_getPhysicsData(self)
    if _newclass:
        setVerbosity = staticmethod(_gympp_bindings.GazeboWrapper_setVerbosity)
    else:
        setVerbosity = _gympp_bindings.GazeboWrapper_setVerbosity

    def insertModel(self, *args):
        return _gympp_bindings.GazeboWrapper_insertModel(self, *args)

    def removeModel(self, modelName):
        return _gympp_bindings.GazeboWrapper_removeModel(self, modelName)
    if _newclass:
        getModelNameFromSDF = staticmethod(_gympp_bindings.GazeboWrapper_getModelNameFromSDF)
    else:
        getModelNameFromSDF = _gympp_bindings.GazeboWrapper_getModelNameFromSDF

    def getWorldName(self):
        return _gympp_bindings.GazeboWrapper_getWorldName(self)

    def setupGazeboWorld(self, worldFile):
        return _gympp_bindings.GazeboWrapper_setupGazeboWorld(self, worldFile)
GazeboWrapper_swigregister = _gympp_bindings.GazeboWrapper_swigregister
GazeboWrapper_swigregister(GazeboWrapper)

def GazeboWrapper_setVerbosity(level=4):
    return _gympp_bindings.GazeboWrapper_setVerbosity(level)
GazeboWrapper_setVerbosity = _gympp_bindings.GazeboWrapper_setVerbosity

def GazeboWrapper_getModelNameFromSDF(sdfString):
    return _gympp_bindings.GazeboWrapper_getModelNameFromSDF(sdfString)
GazeboWrapper_getModelNameFromSDF = _gympp_bindings.GazeboWrapper_getModelNameFromSDF

class PhysicsData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicsData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicsData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rtf"] = _gympp_bindings.PhysicsData_rtf_set
    __swig_getmethods__["rtf"] = _gympp_bindings.PhysicsData_rtf_get
    if _newclass:
        rtf = _swig_property(_gympp_bindings.PhysicsData_rtf_get, _gympp_bindings.PhysicsData_rtf_set)
    __swig_setmethods__["maxStepSize"] = _gympp_bindings.PhysicsData_maxStepSize_set
    __swig_getmethods__["maxStepSize"] = _gympp_bindings.PhysicsData_maxStepSize_get
    if _newclass:
        maxStepSize = _swig_property(_gympp_bindings.PhysicsData_maxStepSize_get, _gympp_bindings.PhysicsData_maxStepSize_set)
    __swig_getmethods__["realTimeUpdateRate"] = _gympp_bindings.PhysicsData_realTimeUpdateRate_get
    if _newclass:
        realTimeUpdateRate = _swig_property(_gympp_bindings.PhysicsData_realTimeUpdateRate_get)

    def __init__(self, *args):
        this = _gympp_bindings.new_PhysicsData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _gympp_bindings.PhysicsData___eq__(self, other)
    __swig_destroy__ = _gympp_bindings.delete_PhysicsData
    __del__ = lambda self: None
PhysicsData_swigregister = _gympp_bindings.PhysicsData_swigregister
PhysicsData_swigregister(PhysicsData)

class IgnitionEnvironment(Environment, GazeboWrapper):
    __swig_setmethods__ = {}
    for _s in [Environment, GazeboWrapper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IgnitionEnvironment, name, value)
    __swig_getmethods__ = {}
    for _s in [Environment, GazeboWrapper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IgnitionEnvironment, name)
    __repr__ = _swig_repr

    def __init__(self, aSpace, oSpace, agentUpdateRate, realTimeFactor=1, physicsUpdateRate=1000):
        this = _gympp_bindings.new_IgnitionEnvironment(aSpace, oSpace, agentUpdateRate, realTimeFactor, physicsUpdateRate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_IgnitionEnvironment
    __del__ = lambda self: None

    def render(self, mode):
        return _gympp_bindings.IgnitionEnvironment_render(self, mode)

    def reset(self):
        return _gympp_bindings.IgnitionEnvironment_reset(self)

    def step(self, action):
        return _gympp_bindings.IgnitionEnvironment_step(self, action)

    def seed(self, seed=0):
        return _gympp_bindings.IgnitionEnvironment_seed(self, seed)

    def env(self):
        return _gympp_bindings.IgnitionEnvironment_env(self)
IgnitionEnvironment_swigregister = _gympp_bindings.IgnitionEnvironment_swigregister
IgnitionEnvironment_swigregister(IgnitionEnvironment)

class RobotWeakPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotWeakPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotWeakPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_RobotWeakPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def swap(self, arg2):
        return _gympp_bindings.RobotWeakPtr_swap(self, arg2)

    def reset(self):
        return _gympp_bindings.RobotWeakPtr_reset(self)

    def use_count(self):
        return _gympp_bindings.RobotWeakPtr_use_count(self)

    def expired(self):
        return _gympp_bindings.RobotWeakPtr_expired(self)

    def lock(self):
        return _gympp_bindings.RobotWeakPtr_lock(self)
    __swig_destroy__ = _gympp_bindings.delete_RobotWeakPtr
    __del__ = lambda self: None
RobotWeakPtr_swigregister = _gympp_bindings.RobotWeakPtr_swigregister
RobotWeakPtr_swigregister(RobotWeakPtr)

JointControlMode_Position = _gympp_bindings.JointControlMode_Position
JointControlMode_PositionInterpolated = _gympp_bindings.JointControlMode_PositionInterpolated
JointControlMode_Velocity = _gympp_bindings.JointControlMode_Velocity
JointControlMode_Torque = _gympp_bindings.JointControlMode_Torque
JointType_Invalid = _gympp_bindings.JointType_Invalid
JointType_Fixed = _gympp_bindings.JointType_Fixed
JointType_Revolute = _gympp_bindings.JointType_Revolute
JointType_Prismatic = _gympp_bindings.JointType_Prismatic
class PID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gympp_bindings.new_PID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["p"] = _gympp_bindings.PID_p_set
    __swig_getmethods__["p"] = _gympp_bindings.PID_p_get
    if _newclass:
        p = _swig_property(_gympp_bindings.PID_p_get, _gympp_bindings.PID_p_set)
    __swig_setmethods__["i"] = _gympp_bindings.PID_i_set
    __swig_getmethods__["i"] = _gympp_bindings.PID_i_get
    if _newclass:
        i = _swig_property(_gympp_bindings.PID_i_get, _gympp_bindings.PID_i_set)
    __swig_setmethods__["d"] = _gympp_bindings.PID_d_set
    __swig_getmethods__["d"] = _gympp_bindings.PID_d_get
    if _newclass:
        d = _swig_property(_gympp_bindings.PID_d_get, _gympp_bindings.PID_d_set)
    __swig_destroy__ = _gympp_bindings.delete_PID
    __del__ = lambda self: None
PID_swigregister = _gympp_bindings.PID_swigregister
PID_swigregister(PID)

class Pose(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pose, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pose, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _gympp_bindings.Pose_position_set
    __swig_getmethods__["position"] = _gympp_bindings.Pose_position_get
    if _newclass:
        position = _swig_property(_gympp_bindings.Pose_position_get, _gympp_bindings.Pose_position_set)
    __swig_setmethods__["orientation"] = _gympp_bindings.Pose_orientation_set
    __swig_getmethods__["orientation"] = _gympp_bindings.Pose_orientation_get
    if _newclass:
        orientation = _swig_property(_gympp_bindings.Pose_orientation_get, _gympp_bindings.Pose_orientation_set)

    def __init__(self):
        this = _gympp_bindings.new_Pose()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_Pose
    __del__ = lambda self: None
Pose_swigregister = _gympp_bindings.Pose_swigregister
Pose_swigregister(Pose)

class Velocity6D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Velocity6D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Velocity6D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["linear"] = _gympp_bindings.Velocity6D_linear_set
    __swig_getmethods__["linear"] = _gympp_bindings.Velocity6D_linear_get
    if _newclass:
        linear = _swig_property(_gympp_bindings.Velocity6D_linear_get, _gympp_bindings.Velocity6D_linear_set)
    __swig_setmethods__["angular"] = _gympp_bindings.Velocity6D_angular_set
    __swig_getmethods__["angular"] = _gympp_bindings.Velocity6D_angular_get
    if _newclass:
        angular = _swig_property(_gympp_bindings.Velocity6D_angular_get, _gympp_bindings.Velocity6D_angular_set)

    def __init__(self):
        this = _gympp_bindings.new_Velocity6D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_Velocity6D
    __del__ = lambda self: None
Velocity6D_swigregister = _gympp_bindings.Velocity6D_swigregister
Velocity6D_swigregister(Velocity6D)

class Acceleration6D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acceleration6D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Acceleration6D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["linear"] = _gympp_bindings.Acceleration6D_linear_set
    __swig_getmethods__["linear"] = _gympp_bindings.Acceleration6D_linear_get
    if _newclass:
        linear = _swig_property(_gympp_bindings.Acceleration6D_linear_get, _gympp_bindings.Acceleration6D_linear_set)
    __swig_setmethods__["angular"] = _gympp_bindings.Acceleration6D_angular_set
    __swig_getmethods__["angular"] = _gympp_bindings.Acceleration6D_angular_get
    if _newclass:
        angular = _swig_property(_gympp_bindings.Acceleration6D_angular_get, _gympp_bindings.Acceleration6D_angular_set)

    def __init__(self):
        this = _gympp_bindings.new_Acceleration6D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_Acceleration6D
    __del__ = lambda self: None
Acceleration6D_swigregister = _gympp_bindings.Acceleration6D_swigregister
Acceleration6D_swigregister(Acceleration6D)

class Limit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Limit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Limit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _gympp_bindings.Limit_min_set
    __swig_getmethods__["min"] = _gympp_bindings.Limit_min_get
    if _newclass:
        min = _swig_property(_gympp_bindings.Limit_min_get, _gympp_bindings.Limit_min_set)
    __swig_setmethods__["max"] = _gympp_bindings.Limit_max_set
    __swig_getmethods__["max"] = _gympp_bindings.Limit_max_get
    if _newclass:
        max = _swig_property(_gympp_bindings.Limit_max_get, _gympp_bindings.Limit_max_set)

    def __init__(self):
        this = _gympp_bindings.new_Limit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_Limit
    __del__ = lambda self: None
Limit_swigregister = _gympp_bindings.Limit_swigregister
Limit_swigregister(Limit)

class ContactData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bodyA"] = _gympp_bindings.ContactData_bodyA_set
    __swig_getmethods__["bodyA"] = _gympp_bindings.ContactData_bodyA_get
    if _newclass:
        bodyA = _swig_property(_gympp_bindings.ContactData_bodyA_get, _gympp_bindings.ContactData_bodyA_set)
    __swig_setmethods__["bodyB"] = _gympp_bindings.ContactData_bodyB_set
    __swig_getmethods__["bodyB"] = _gympp_bindings.ContactData_bodyB_get
    if _newclass:
        bodyB = _swig_property(_gympp_bindings.ContactData_bodyB_get, _gympp_bindings.ContactData_bodyB_set)
    __swig_setmethods__["depth"] = _gympp_bindings.ContactData_depth_set
    __swig_getmethods__["depth"] = _gympp_bindings.ContactData_depth_get
    if _newclass:
        depth = _swig_property(_gympp_bindings.ContactData_depth_get, _gympp_bindings.ContactData_depth_set)
    __swig_setmethods__["wrench"] = _gympp_bindings.ContactData_wrench_set
    __swig_getmethods__["wrench"] = _gympp_bindings.ContactData_wrench_get
    if _newclass:
        wrench = _swig_property(_gympp_bindings.ContactData_wrench_get, _gympp_bindings.ContactData_wrench_set)
    __swig_setmethods__["normal"] = _gympp_bindings.ContactData_normal_set
    __swig_getmethods__["normal"] = _gympp_bindings.ContactData_normal_get
    if _newclass:
        normal = _swig_property(_gympp_bindings.ContactData_normal_get, _gympp_bindings.ContactData_normal_set)
    __swig_setmethods__["position"] = _gympp_bindings.ContactData_position_set
    __swig_getmethods__["position"] = _gympp_bindings.ContactData_position_get
    if _newclass:
        position = _swig_property(_gympp_bindings.ContactData_position_get, _gympp_bindings.ContactData_position_set)

    def __init__(self):
        this = _gympp_bindings.new_ContactData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_ContactData
    __del__ = lambda self: None
ContactData_swigregister = _gympp_bindings.ContactData_swigregister
ContactData_swigregister(ContactData)

class Robot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Robot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Robot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gympp_bindings.delete_Robot
    __del__ = lambda self: None

    def valid(self):
        return _gympp_bindings.Robot_valid(self)

    def dofs(self):
        return _gympp_bindings.Robot_dofs(self)

    def name(self):
        return _gympp_bindings.Robot_name(self)

    def jointNames(self):
        return _gympp_bindings.Robot_jointNames(self)

    def jointType(self, jointName):
        return _gympp_bindings.Robot_jointType(self, jointName)

    def jointForce(self, jointName):
        return _gympp_bindings.Robot_jointForce(self, jointName)

    def jointPosition(self, jointName):
        return _gympp_bindings.Robot_jointPosition(self, jointName)

    def jointVelocity(self, jointName):
        return _gympp_bindings.Robot_jointVelocity(self, jointName)

    def jointControlMode(self, jointName):
        return _gympp_bindings.Robot_jointControlMode(self, jointName)

    def jointPositions(self):
        return _gympp_bindings.Robot_jointPositions(self)

    def jointVelocities(self):
        return _gympp_bindings.Robot_jointVelocities(self)

    def initialJointPositions(self):
        return _gympp_bindings.Robot_initialJointPositions(self)

    def jointEffortLimit(self, jointName):
        return _gympp_bindings.Robot_jointEffortLimit(self, jointName)

    def jointPositionLimits(self, jointName):
        return _gympp_bindings.Robot_jointPositionLimits(self, jointName)

    def jointPID(self, jointName):
        return _gympp_bindings.Robot_jointPID(self, jointName)

    def linksInContact(self):
        return _gympp_bindings.Robot_linksInContact(self)

    def contactData(self, linkName):
        return _gympp_bindings.Robot_contactData(self, linkName)

    def linkNames(self):
        return _gympp_bindings.Robot_linkNames(self)

    def linkPose(self, linkName):
        return _gympp_bindings.Robot_linkPose(self, linkName)

    def linkVelocity(self, linkName):
        return _gympp_bindings.Robot_linkVelocity(self, linkName)

    def linkAcceleration(self, linkName):
        return _gympp_bindings.Robot_linkAcceleration(self, linkName)

    def linkBodyFixedVelocity(self, linkName):
        return _gympp_bindings.Robot_linkBodyFixedVelocity(self, linkName)

    def linkBodyFixedAcceleration(self, linkName):
        return _gympp_bindings.Robot_linkBodyFixedAcceleration(self, linkName)

    def setJointForce(self, jointName, jointForce):
        return _gympp_bindings.Robot_setJointForce(self, jointName, jointForce)

    def setJointEffortLimit(self, jointName, effortLimit):
        return _gympp_bindings.Robot_setJointEffortLimit(self, jointName, effortLimit)

    def setJointPositionTarget(self, jointName, jointPositionReference):
        return _gympp_bindings.Robot_setJointPositionTarget(self, jointName, jointPositionReference)

    def setJointVelocityTarget(self, jointName, jointVelocityReference):
        return _gympp_bindings.Robot_setJointVelocityTarget(self, jointName, jointVelocityReference)

    def setJointPosition(self, jointName, jointPosition):
        return _gympp_bindings.Robot_setJointPosition(self, jointName, jointPosition)

    def setJointVelocity(self, jointName, jointVelocity):
        return _gympp_bindings.Robot_setJointVelocity(self, jointName, jointVelocity)

    def setJointControlMode(self, jointName, controlMode):
        return _gympp_bindings.Robot_setJointControlMode(self, jointName, controlMode)

    def setJointPID(self, jointName, pid):
        return _gympp_bindings.Robot_setJointPID(self, jointName, pid)

    def resetJoint(self, jointName, jointPosition=0, jointVelocity=0):
        return _gympp_bindings.Robot_resetJoint(self, jointName, jointPosition, jointVelocity)

    def addExternalWrench(self, linkName, force, torque):
        return _gympp_bindings.Robot_addExternalWrench(self, linkName, force, torque)

    def update(self, simTime):
        return _gympp_bindings.Robot_update(self, simTime)

    def baseFrame(self):
        return _gympp_bindings.Robot_baseFrame(self)

    def setBaseFrame(self, baseLink):
        return _gympp_bindings.Robot_setBaseFrame(self, baseLink)

    def basePose(self):
        return _gympp_bindings.Robot_basePose(self)

    def baseVelocity(self):
        return _gympp_bindings.Robot_baseVelocity(self)

    def setAsFloatingBase(self, isFloating):
        return _gympp_bindings.Robot_setAsFloatingBase(self, isFloating)

    def resetBasePose(self, position, orientation):
        return _gympp_bindings.Robot_resetBasePose(self, position, orientation)

    def resetBaseVelocity(self, linear, angular):
        return _gympp_bindings.Robot_resetBaseVelocity(self, linear, angular)

    def baseWrench(self):
        return _gympp_bindings.Robot_baseWrench(self)

    def setdt(self, dt):
        return _gympp_bindings.Robot_setdt(self, dt)

    def dt(self):
        return _gympp_bindings.Robot_dt(self)
Robot_swigregister = _gympp_bindings.Robot_swigregister
Robot_swigregister(Robot)

class Vector_contact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_contact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_contact, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gympp_bindings.Vector_contact_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gympp_bindings.Vector_contact___nonzero__(self)

    def __bool__(self):
        return _gympp_bindings.Vector_contact___bool__(self)

    def __len__(self):
        return _gympp_bindings.Vector_contact___len__(self)

    def __getslice__(self, i, j):
        return _gympp_bindings.Vector_contact___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gympp_bindings.Vector_contact___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gympp_bindings.Vector_contact___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gympp_bindings.Vector_contact___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gympp_bindings.Vector_contact___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gympp_bindings.Vector_contact___setitem__(self, *args)

    def pop(self):
        return _gympp_bindings.Vector_contact_pop(self)

    def append(self, x):
        return _gympp_bindings.Vector_contact_append(self, x)

    def empty(self):
        return _gympp_bindings.Vector_contact_empty(self)

    def size(self):
        return _gympp_bindings.Vector_contact_size(self)

    def swap(self, v):
        return _gympp_bindings.Vector_contact_swap(self, v)

    def begin(self):
        return _gympp_bindings.Vector_contact_begin(self)

    def end(self):
        return _gympp_bindings.Vector_contact_end(self)

    def rbegin(self):
        return _gympp_bindings.Vector_contact_rbegin(self)

    def rend(self):
        return _gympp_bindings.Vector_contact_rend(self)

    def clear(self):
        return _gympp_bindings.Vector_contact_clear(self)

    def get_allocator(self):
        return _gympp_bindings.Vector_contact_get_allocator(self)

    def pop_back(self):
        return _gympp_bindings.Vector_contact_pop_back(self)

    def erase(self, *args):
        return _gympp_bindings.Vector_contact_erase(self, *args)

    def __init__(self, *args):
        this = _gympp_bindings.new_Vector_contact(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gympp_bindings.Vector_contact_push_back(self, x)

    def front(self):
        return _gympp_bindings.Vector_contact_front(self)

    def back(self):
        return _gympp_bindings.Vector_contact_back(self)

    def assign(self, n, x):
        return _gympp_bindings.Vector_contact_assign(self, n, x)

    def resize(self, *args):
        return _gympp_bindings.Vector_contact_resize(self, *args)

    def insert(self, *args):
        return _gympp_bindings.Vector_contact_insert(self, *args)

    def reserve(self, n):
        return _gympp_bindings.Vector_contact_reserve(self, n)

    def capacity(self):
        return _gympp_bindings.Vector_contact_capacity(self)
    __swig_destroy__ = _gympp_bindings.delete_Vector_contact
    __del__ = lambda self: None
Vector_contact_swigregister = _gympp_bindings.Vector_contact_swigregister
Vector_contact_swigregister(Vector_contact)


def envToIgnEnv(env):
    return _gympp_bindings.envToIgnEnv(env)
envToIgnEnv = _gympp_bindings.envToIgnEnv

def envToGazeboWrapper(env):
    return _gympp_bindings.envToGazeboWrapper(env)
envToGazeboWrapper = _gympp_bindings.envToGazeboWrapper
SpaceType_Discrete = _gympp_bindings.SpaceType_Discrete
SpaceType_Box = _gympp_bindings.SpaceType_Box
class SpaceMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpaceMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpaceMetadata, name)
    __repr__ = _swig_repr

    def getType(self):
        return _gympp_bindings.SpaceMetadata_getType(self)

    def getDimensions(self):
        return _gympp_bindings.SpaceMetadata_getDimensions(self)

    def getLowLimit(self):
        return _gympp_bindings.SpaceMetadata_getLowLimit(self)

    def getHighLimit(self):
        return _gympp_bindings.SpaceMetadata_getHighLimit(self)

    def setType(self, type):
        return _gympp_bindings.SpaceMetadata_setType(self, type)

    def setDimensions(self, dims):
        return _gympp_bindings.SpaceMetadata_setDimensions(self, dims)

    def setLowLimit(self, limit):
        return _gympp_bindings.SpaceMetadata_setLowLimit(self, limit)

    def setHighLimit(self, limit):
        return _gympp_bindings.SpaceMetadata_setHighLimit(self, limit)

    def isValid(self):
        return _gympp_bindings.SpaceMetadata_isValid(self)

    def __init__(self):
        this = _gympp_bindings.new_SpaceMetadata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_SpaceMetadata
    __del__ = lambda self: None
SpaceMetadata_swigregister = _gympp_bindings.SpaceMetadata_swigregister
SpaceMetadata_swigregister(SpaceMetadata)

class PluginMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginMetadata, name)
    __repr__ = _swig_repr

    def getEnvironmentName(self):
        return _gympp_bindings.PluginMetadata_getEnvironmentName(self)

    def getLibraryName(self):
        return _gympp_bindings.PluginMetadata_getLibraryName(self)

    def getClassName(self):
        return _gympp_bindings.PluginMetadata_getClassName(self)

    def getModelFileName(self):
        return _gympp_bindings.PluginMetadata_getModelFileName(self)

    def getWorldFileName(self):
        return _gympp_bindings.PluginMetadata_getWorldFileName(self)

    def getAgentRate(self):
        return _gympp_bindings.PluginMetadata_getAgentRate(self)

    def getPhysicsData(self):
        return _gympp_bindings.PluginMetadata_getPhysicsData(self)

    def getActionSpaceMetadata(self):
        return _gympp_bindings.PluginMetadata_getActionSpaceMetadata(self)

    def getObservationSpaceMetadata(self):
        return _gympp_bindings.PluginMetadata_getObservationSpaceMetadata(self)

    def setEnvironmentName(self, environmentName):
        return _gympp_bindings.PluginMetadata_setEnvironmentName(self, environmentName)

    def setActionSpaceMetadata(self, actionSpaceMetadata):
        return _gympp_bindings.PluginMetadata_setActionSpaceMetadata(self, actionSpaceMetadata)

    def setObservationSpaceMetadata(self, observationSpaceMetadata):
        return _gympp_bindings.PluginMetadata_setObservationSpaceMetadata(self, observationSpaceMetadata)

    def setLibraryName(self, libraryName):
        return _gympp_bindings.PluginMetadata_setLibraryName(self, libraryName)

    def setClassName(self, className):
        return _gympp_bindings.PluginMetadata_setClassName(self, className)

    def setModelFileName(self, modelFileName):
        return _gympp_bindings.PluginMetadata_setModelFileName(self, modelFileName)

    def setWorldFileName(self, worldFileName):
        return _gympp_bindings.PluginMetadata_setWorldFileName(self, worldFileName)

    def setAgentRate(self, agentRate):
        return _gympp_bindings.PluginMetadata_setAgentRate(self, agentRate)

    def setPhysicsData(self, physicsData):
        return _gympp_bindings.PluginMetadata_setPhysicsData(self, physicsData)

    def isValid(self):
        return _gympp_bindings.PluginMetadata_isValid(self)

    def __init__(self):
        this = _gympp_bindings.new_PluginMetadata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_PluginMetadata
    __del__ = lambda self: None
PluginMetadata_swigregister = _gympp_bindings.PluginMetadata_swigregister
PluginMetadata_swigregister(PluginMetadata)

class GymFactory(GymFactorySingleton):
    __swig_setmethods__ = {}
    for _s in [GymFactorySingleton]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GymFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [GymFactorySingleton]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GymFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gympp_bindings.new_GymFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def make(self, envName):
        return _gympp_bindings.GymFactory_make(self, envName)

    def registerPlugin(self, md):
        return _gympp_bindings.GymFactory_registerPlugin(self, md)
    __swig_destroy__ = _gympp_bindings.delete_GymFactory
    __del__ = lambda self: None
GymFactory_swigregister = _gympp_bindings.GymFactory_swigregister
GymFactory_swigregister(GymFactory)

class RobotSingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotSingleton, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gympp_bindings.new_RobotSingleton()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gympp_bindings.delete_RobotSingleton
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_gympp_bindings.RobotSingleton_get)
    else:
        get = _gympp_bindings.RobotSingleton_get

    def exists(self, robotName):
        return _gympp_bindings.RobotSingleton_exists(self, robotName)

    def getRobot(self, robotName):
        return _gympp_bindings.RobotSingleton_getRobot(self, robotName)

    def storeRobot(self, robot):
        return _gympp_bindings.RobotSingleton_storeRobot(self, robot)

    def deleteRobot(self, robotName):
        return _gympp_bindings.RobotSingleton_deleteRobot(self, robotName)
RobotSingleton_swigregister = _gympp_bindings.RobotSingleton_swigregister
RobotSingleton_swigregister(RobotSingleton)

def RobotSingleton_get():
    return _gympp_bindings.RobotSingleton_get()
RobotSingleton_get = _gympp_bindings.RobotSingleton_get

# This file is compatible with both classic and new-style classes.


