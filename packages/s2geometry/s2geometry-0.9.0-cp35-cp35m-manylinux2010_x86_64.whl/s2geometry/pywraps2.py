# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pywraps2')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pywraps2')
    _pywraps2 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywraps2', [dirname(__file__)])
        except ImportError:
            import _pywraps2
            return _pywraps2
        try:
            _mod = imp.load_module('_pywraps2', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pywraps2 = swig_import_helper()
    del swig_import_helper
else:
    import _pywraps2
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraps2.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pywraps2.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pywraps2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pywraps2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pywraps2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pywraps2.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pywraps2.SwigPyIterator_copy(self)

    def next(self):
        return _pywraps2.SwigPyIterator_next(self)

    def __next__(self):
        return _pywraps2.SwigPyIterator___next__(self)

    def previous(self):
        return _pywraps2.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pywraps2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pywraps2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pywraps2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pywraps2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pywraps2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pywraps2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pywraps2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pywraps2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Encoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Encoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Encoder, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraps2.delete_Encoder
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pywraps2.new_Encoder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self, buf):
        return _pywraps2.Encoder_reset(self, buf)

    def clear(self):
        return _pywraps2.Encoder_clear(self)

    def put8(self, v):
        return _pywraps2.Encoder_put8(self, v)

    def put16(self, v):
        return _pywraps2.Encoder_put16(self, v)

    def put32(self, v):
        return _pywraps2.Encoder_put32(self, v)

    def put64(self, v):
        return _pywraps2.Encoder_put64(self, v)

    def putfloat(self, f):
        return _pywraps2.Encoder_putfloat(self, f)

    def putdouble(self, d):
        return _pywraps2.Encoder_putdouble(self, d)

    def length(self):
        return _pywraps2.Encoder_length(self)

    def avail(self):
        return _pywraps2.Encoder_avail(self)

    def Ensure(self, N):
        return _pywraps2.Encoder_Ensure(self, N)

    def buffer(self):
        return _pywraps2.Encoder_buffer(self)
Encoder_swigregister = _pywraps2.Encoder_swigregister
Encoder_swigregister(Encoder)

class Decoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Decoder, name)
    __repr__ = _swig_repr

    def reset(self, buf):

        self._data_keepalive = args[0]


        return _pywraps2.Decoder_reset(self, buf)


    def get8(self):
        return _pywraps2.Decoder_get8(self)

    def get16(self):
        return _pywraps2.Decoder_get16(self)

    def get32(self):
        return _pywraps2.Decoder_get32(self)

    def get64(self):
        return _pywraps2.Decoder_get64(self)

    def getfloat(self):
        return _pywraps2.Decoder_getfloat(self)

    def getdouble(self):
        return _pywraps2.Decoder_getdouble(self)

    def pos(self):
        return _pywraps2.Decoder_pos(self)

    def avail(self):
        return _pywraps2.Decoder_avail(self)

    def __init__(self, *args):

        if len(args) == 1:
          self._data_keepalive = args[0]


        this = _pywraps2.new_Decoder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywraps2.delete_Decoder
    __del__ = lambda self: None
Decoder_swigregister = _pywraps2.Decoder_swigregister
Decoder_swigregister(Decoder)


def FromS2CellId(cell_id):
    return _pywraps2.FromS2CellId(cell_id)
FromS2CellId = _pywraps2.FromS2CellId
class S2Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2Point, name)
    __repr__ = _swig_repr

    def Norm(self):
        return _pywraps2.S2Point_Norm(self)

    def Normalize(self):
        return _pywraps2.S2Point_Normalize(self)
    __swig_destroy__ = _pywraps2.delete_S2Point
    __del__ = lambda self: None

    def __init__(self):
        this = _pywraps2.new_S2Point()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
S2Point_swigregister = _pywraps2.S2Point_swigregister
S2Point_swigregister(S2Point)

class R1Interval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, R1Interval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, R1Interval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_R1Interval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLength(self):
        return _pywraps2.R1Interval_GetLength(self)

    def __eq__(self, y):
        return _pywraps2.R1Interval___eq__(self, y)

    def __ne__(self, y):
        return _pywraps2.R1Interval___ne__(self, y)
    __swig_destroy__ = _pywraps2.delete_R1Interval
    __del__ = lambda self: None
R1Interval_swigregister = _pywraps2.R1Interval_swigregister
R1Interval_swigregister(R1Interval)

class S1Angle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1Angle, name)
    __repr__ = _swig_repr
    if _newclass:
        Radians = staticmethod(_pywraps2.S1Angle_Radians)
    else:
        Radians = _pywraps2.S1Angle_Radians
    if _newclass:
        Degrees = staticmethod(_pywraps2.S1Angle_Degrees)
    else:
        Degrees = _pywraps2.S1Angle_Degrees
    if _newclass:
        E5 = staticmethod(_pywraps2.S1Angle_E5)
    else:
        E5 = _pywraps2.S1Angle_E5
    if _newclass:
        E6 = staticmethod(_pywraps2.S1Angle_E6)
    else:
        E6 = _pywraps2.S1Angle_E6
    if _newclass:
        E7 = staticmethod(_pywraps2.S1Angle_E7)
    else:
        E7 = _pywraps2.S1Angle_E7
    if _newclass:
        UnsignedE6 = staticmethod(_pywraps2.S1Angle_UnsignedE6)
    else:
        UnsignedE6 = _pywraps2.S1Angle_UnsignedE6

    def __init__(self, *args):
        this = _pywraps2.new_S1Angle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def radians(self):
        return _pywraps2.S1Angle_radians(self)

    def degrees(self):
        return _pywraps2.S1Angle_degrees(self)

    def e6(self):
        return _pywraps2.S1Angle_e6(self)

    def e7(self):
        return _pywraps2.S1Angle_e7(self)

    def abs(self):
        return _pywraps2.S1Angle_abs(self)

    def __iadd__(self, a):
        return _pywraps2.S1Angle___iadd__(self, a)

    def __isub__(self, a):
        return _pywraps2.S1Angle___isub__(self, a)

    def __imul__(self, m):
        return _pywraps2.S1Angle___imul__(self, m)

    def __itruediv__(self, *args):
        return _pywraps2.S1Angle___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Normalized(self):
        return _pywraps2.S1Angle_Normalized(self)

    def Normalize(self):
        return _pywraps2.S1Angle_Normalize(self)

    def __str__(self):
        return _pywraps2.S1Angle___str__(self)

    def __eq__(self, other):
        return _pywraps2.S1Angle___eq__(self, other)

    def __ne__(self, other):
        return _pywraps2.S1Angle___ne__(self, other)

    def __lt__(self, other):
        return _pywraps2.S1Angle___lt__(self, other)

    def __gt__(self, other):
        return _pywraps2.S1Angle___gt__(self, other)
    __swig_destroy__ = _pywraps2.delete_S1Angle
    __del__ = lambda self: None
S1Angle_swigregister = _pywraps2.S1Angle_swigregister
S1Angle_swigregister(S1Angle)

def S1Angle_Radians(radians):
    return _pywraps2.S1Angle_Radians(radians)
S1Angle_Radians = _pywraps2.S1Angle_Radians

def S1Angle_Degrees(degrees):
    return _pywraps2.S1Angle_Degrees(degrees)
S1Angle_Degrees = _pywraps2.S1Angle_Degrees

def S1Angle_E5(e5):
    return _pywraps2.S1Angle_E5(e5)
S1Angle_E5 = _pywraps2.S1Angle_E5

def S1Angle_E6(e6):
    return _pywraps2.S1Angle_E6(e6)
S1Angle_E6 = _pywraps2.S1Angle_E6

def S1Angle_E7(e7):
    return _pywraps2.S1Angle_E7(e7)
S1Angle_E7 = _pywraps2.S1Angle_E7

def S1Angle_UnsignedE6(e6):
    return _pywraps2.S1Angle_UnsignedE6(e6)
S1Angle_UnsignedE6 = _pywraps2.S1Angle_UnsignedE6

class S1ChordAngle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1ChordAngle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1ChordAngle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S1ChordAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ToAngle(self):
        return _pywraps2.S1ChordAngle_ToAngle(self)

    def __iadd__(self, a):
        return _pywraps2.S1ChordAngle___iadd__(self, a)

    def __isub__(self, a):
        return _pywraps2.S1ChordAngle___isub__(self, a)
    __swig_destroy__ = _pywraps2.delete_S1ChordAngle
    __del__ = lambda self: None
S1ChordAngle_swigregister = _pywraps2.S1ChordAngle_swigregister
S1ChordAngle_swigregister(S1ChordAngle)

class S1Interval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1Interval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S1Interval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLength(self):
        return _pywraps2.S1Interval_GetLength(self)

    def __eq__(self, y):
        return _pywraps2.S1Interval___eq__(self, y)

    def __str__(self):
        return _pywraps2.S1Interval___str__(self)
    __swig_destroy__ = _pywraps2.delete_S1Interval
    __del__ = lambda self: None
S1Interval_swigregister = _pywraps2.S1Interval_swigregister
S1Interval_swigregister(S1Interval)

class S2CellId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2CellId, name)
    __repr__ = _swig_repr
    kMaxLevel = _pywraps2.S2CellId_kMaxLevel

    def __init__(self, *args):
        this = _pywraps2.new_S2CellId(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        FromFacePosLevel = staticmethod(_pywraps2.S2CellId_FromFacePosLevel)
    else:
        FromFacePosLevel = _pywraps2.S2CellId_FromFacePosLevel

    def ToPoint(self):
        return _pywraps2.S2CellId_ToPoint(self)

    def GetCenterSiTi(self):
        return _pywraps2.S2CellId_GetCenterSiTi(self)

    def ToLatLng(self):
        return _pywraps2.S2CellId_ToLatLng(self)

    def id(self):
        return _pywraps2.S2CellId_id(self)

    def is_valid(self):
        return _pywraps2.S2CellId_is_valid(self)

    def face(self):
        return _pywraps2.S2CellId_face(self)

    def pos(self):
        return _pywraps2.S2CellId_pos(self)

    def level(self):
        return _pywraps2.S2CellId_level(self)

    def is_face(self):
        return _pywraps2.S2CellId_is_face(self)

    def range_min(self):
        return _pywraps2.S2CellId_range_min(self)

    def range_max(self):
        return _pywraps2.S2CellId_range_max(self)

    def contains(self, other):
        return _pywraps2.S2CellId_contains(self, other)

    def intersects(self, other):
        return _pywraps2.S2CellId_intersects(self, other)

    def parent(self, *args):
        return _pywraps2.S2CellId_parent(self, *args)

    def child(self, position):
        return _pywraps2.S2CellId_child(self, position)

    def child_begin(self, *args):
        return _pywraps2.S2CellId_child_begin(self, *args)

    def child_end(self, *args):
        return _pywraps2.S2CellId_child_end(self, *args)

    def next(self):
        return _pywraps2.S2CellId_next(self)

    def prev(self):
        return _pywraps2.S2CellId_prev(self)
    if _newclass:
        Begin = staticmethod(_pywraps2.S2CellId_Begin)
    else:
        Begin = _pywraps2.S2CellId_Begin
    if _newclass:
        End = staticmethod(_pywraps2.S2CellId_End)
    else:
        End = _pywraps2.S2CellId_End

    def ToToken(self):
        return _pywraps2.S2CellId_ToToken(self)
    if _newclass:
        FromToken = staticmethod(_pywraps2.S2CellId_FromToken)
    else:
        FromToken = _pywraps2.S2CellId_FromToken

    def ToString(self):
        return _pywraps2.S2CellId_ToString(self)

    def GetEdgeNeighbors(self):
        return _pywraps2.S2CellId_GetEdgeNeighbors(self)
    if _newclass:
        FromFaceIJ = staticmethod(_pywraps2.S2CellId_FromFaceIJ)
    else:
        FromFaceIJ = _pywraps2.S2CellId_FromFaceIJ

    def ToFaceIJOrientation(self):
        return _pywraps2.S2CellId_ToFaceIJOrientation(self)

    def __str__(self):
        return _pywraps2.S2CellId___str__(self)

    def __eq__(self, other):
        return _pywraps2.S2CellId___eq__(self, other)

    def __ne__(self, other):
        return _pywraps2.S2CellId___ne__(self, other)

    def __lt__(self, other):
        return _pywraps2.S2CellId___lt__(self, other)

    def __gt__(self, other):
        return _pywraps2.S2CellId___gt__(self, other)

    def __hash__(self):
        return _pywraps2.S2CellId___hash__(self)
    __swig_destroy__ = _pywraps2.delete_S2CellId
    __del__ = lambda self: None
S2CellId_swigregister = _pywraps2.S2CellId_swigregister
S2CellId_swigregister(S2CellId)

def S2CellId_FromFacePosLevel(face, pos, level):
    return _pywraps2.S2CellId_FromFacePosLevel(face, pos, level)
S2CellId_FromFacePosLevel = _pywraps2.S2CellId_FromFacePosLevel

def S2CellId_Begin(level):
    return _pywraps2.S2CellId_Begin(level)
S2CellId_Begin = _pywraps2.S2CellId_Begin

def S2CellId_End(level):
    return _pywraps2.S2CellId_End(level)
S2CellId_End = _pywraps2.S2CellId_End

def S2CellId_FromToken(*args):
    return _pywraps2.S2CellId_FromToken(*args)
S2CellId_FromToken = _pywraps2.S2CellId_FromToken

def S2CellId_FromFaceIJ(face, i, j):
    return _pywraps2.S2CellId_FromFaceIJ(face, i, j)
S2CellId_FromFaceIJ = _pywraps2.S2CellId_FromFaceIJ


def CrossingSign(a, b, c, d):
    return _pywraps2.CrossingSign(a, b, c, d)
CrossingSign = _pywraps2.CrossingSign

def GetIntersection(a, b, c, d):
    return _pywraps2.GetIntersection(a, b, c, d)
GetIntersection = _pywraps2.GetIntersection
class S2Cap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2Cap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S2Cap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        FromPoint = staticmethod(_pywraps2.S2Cap_FromPoint)
    else:
        FromPoint = _pywraps2.S2Cap_FromPoint
    if _newclass:
        Empty = staticmethod(_pywraps2.S2Cap_Empty)
    else:
        Empty = _pywraps2.S2Cap_Empty
    if _newclass:
        Full = staticmethod(_pywraps2.S2Cap_Full)
    else:
        Full = _pywraps2.S2Cap_Full
    __swig_destroy__ = _pywraps2.delete_S2Cap
    __del__ = lambda self: None

    def center(self):
        return _pywraps2.S2Cap_center(self)

    def height(self):
        return _pywraps2.S2Cap_height(self)

    def GetCentroid(self):
        return _pywraps2.S2Cap_GetCentroid(self)

    def is_valid(self):
        return _pywraps2.S2Cap_is_valid(self)

    def is_empty(self):
        return _pywraps2.S2Cap_is_empty(self)

    def Intersects(self, other):
        return _pywraps2.S2Cap_Intersects(self, other)

    def AddPoint(self, p):
        return _pywraps2.S2Cap_AddPoint(self, p)

    def Expanded(self, distance):
        return _pywraps2.S2Cap_Expanded(self, distance)

    def Union(self, other):
        return _pywraps2.S2Cap_Union(self, other)

    def Clone(self):
        return _pywraps2.S2Cap_Clone(self)

    def GetCapBound(self):
        return _pywraps2.S2Cap_GetCapBound(self)

    def GetRectBound(self):
        return _pywraps2.S2Cap_GetRectBound(self)

    def MayIntersect(self, cell):
        return _pywraps2.S2Cap_MayIntersect(self, cell)

    def Contains(self, *args):
        return _pywraps2.S2Cap_Contains(self, *args)

    def Encode(self, encoder):
        return _pywraps2.S2Cap_Encode(self, encoder)

    def Decode(self, decoder):
        return _pywraps2.S2Cap_Decode(self, decoder)

    def __eq__(self, other):
        return _pywraps2.S2Cap___eq__(self, other)

    def ApproxEquals(self, *args):
        return _pywraps2.S2Cap_ApproxEquals(self, *args)

    def __str__(self):
        return _pywraps2.S2Cap___str__(self)
S2Cap_swigregister = _pywraps2.S2Cap_swigregister
S2Cap_swigregister(S2Cap)

def S2Cap_FromPoint(center):
    return _pywraps2.S2Cap_FromPoint(center)
S2Cap_FromPoint = _pywraps2.S2Cap_FromPoint

def S2Cap_Empty():
    return _pywraps2.S2Cap_Empty()
S2Cap_Empty = _pywraps2.S2Cap_Empty

def S2Cap_Full():
    return _pywraps2.S2Cap_Full()
S2Cap_Full = _pywraps2.S2Cap_Full

class S2LatLng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLng, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S2LatLng(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        FromRadians = staticmethod(_pywraps2.S2LatLng_FromRadians)
    else:
        FromRadians = _pywraps2.S2LatLng_FromRadians
    if _newclass:
        FromDegrees = staticmethod(_pywraps2.S2LatLng_FromDegrees)
    else:
        FromDegrees = _pywraps2.S2LatLng_FromDegrees
    if _newclass:
        FromE6 = staticmethod(_pywraps2.S2LatLng_FromE6)
    else:
        FromE6 = _pywraps2.S2LatLng_FromE6
    if _newclass:
        FromE7 = staticmethod(_pywraps2.S2LatLng_FromE7)
    else:
        FromE7 = _pywraps2.S2LatLng_FromE7
    if _newclass:
        FromUnsignedE6 = staticmethod(_pywraps2.S2LatLng_FromUnsignedE6)
    else:
        FromUnsignedE6 = _pywraps2.S2LatLng_FromUnsignedE6
    if _newclass:
        FromUnsignedE7 = staticmethod(_pywraps2.S2LatLng_FromUnsignedE7)
    else:
        FromUnsignedE7 = _pywraps2.S2LatLng_FromUnsignedE7

    def lat(self):
        return _pywraps2.S2LatLng_lat(self)

    def lng(self):
        return _pywraps2.S2LatLng_lng(self)

    def coords(self):
        return _pywraps2.S2LatLng_coords(self)

    def is_valid(self):
        return _pywraps2.S2LatLng_is_valid(self)

    def Normalized(self):
        return _pywraps2.S2LatLng_Normalized(self)

    def ToPoint(self):
        return _pywraps2.S2LatLng_ToPoint(self)

    def GetDistance(self, o):
        return _pywraps2.S2LatLng_GetDistance(self, o)

    def __eq__(self, o):
        return _pywraps2.S2LatLng___eq__(self, o)

    def __ne__(self, o):
        return _pywraps2.S2LatLng___ne__(self, o)

    def __lt__(self, o):
        return _pywraps2.S2LatLng___lt__(self, o)

    def __gt__(self, o):
        return _pywraps2.S2LatLng___gt__(self, o)

    def __le__(self, o):
        return _pywraps2.S2LatLng___le__(self, o)

    def __ge__(self, o):
        return _pywraps2.S2LatLng___ge__(self, o)

    def ApproxEquals(self, *args):
        return _pywraps2.S2LatLng_ApproxEquals(self, *args)

    def ToStringInDegrees(self, *args):
        return _pywraps2.S2LatLng_ToStringInDegrees(self, *args)

    def __str__(self):
        return _pywraps2.S2LatLng___str__(self)
    __swig_destroy__ = _pywraps2.delete_S2LatLng
    __del__ = lambda self: None
S2LatLng_swigregister = _pywraps2.S2LatLng_swigregister
S2LatLng_swigregister(S2LatLng)

def S2LatLng_FromRadians(lat_radians, lng_radians):
    return _pywraps2.S2LatLng_FromRadians(lat_radians, lng_radians)
S2LatLng_FromRadians = _pywraps2.S2LatLng_FromRadians

def S2LatLng_FromDegrees(lat_degrees, lng_degrees):
    return _pywraps2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)
S2LatLng_FromDegrees = _pywraps2.S2LatLng_FromDegrees

def S2LatLng_FromE6(lat_e6, lng_e6):
    return _pywraps2.S2LatLng_FromE6(lat_e6, lng_e6)
S2LatLng_FromE6 = _pywraps2.S2LatLng_FromE6

def S2LatLng_FromE7(lat_e7, lng_e7):
    return _pywraps2.S2LatLng_FromE7(lat_e7, lng_e7)
S2LatLng_FromE7 = _pywraps2.S2LatLng_FromE7

def S2LatLng_FromUnsignedE6(lat_e6, lng_e6):
    return _pywraps2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)
S2LatLng_FromUnsignedE6 = _pywraps2.S2LatLng_FromUnsignedE6

def S2LatLng_FromUnsignedE7(lat_e7, lng_e7):
    return _pywraps2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)
S2LatLng_FromUnsignedE7 = _pywraps2.S2LatLng_FromUnsignedE7

class S2LatLngRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLngRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLngRect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S2LatLngRect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        FromCenterSize = staticmethod(_pywraps2.S2LatLngRect_FromCenterSize)
    else:
        FromCenterSize = _pywraps2.S2LatLngRect_FromCenterSize
    if _newclass:
        FromPoint = staticmethod(_pywraps2.S2LatLngRect_FromPoint)
    else:
        FromPoint = _pywraps2.S2LatLngRect_FromPoint
    if _newclass:
        FromPointPair = staticmethod(_pywraps2.S2LatLngRect_FromPointPair)
    else:
        FromPointPair = _pywraps2.S2LatLngRect_FromPointPair

    def lat_lo(self):
        return _pywraps2.S2LatLngRect_lat_lo(self)

    def lat_hi(self):
        return _pywraps2.S2LatLngRect_lat_hi(self)

    def lng_lo(self):
        return _pywraps2.S2LatLngRect_lng_lo(self)

    def lng_hi(self):
        return _pywraps2.S2LatLngRect_lng_hi(self)

    def lat(self):
        return _pywraps2.S2LatLngRect_lat(self)

    def lng(self):
        return _pywraps2.S2LatLngRect_lng(self)

    def lo(self):
        return _pywraps2.S2LatLngRect_lo(self)

    def hi(self):
        return _pywraps2.S2LatLngRect_hi(self)
    if _newclass:
        Empty = staticmethod(_pywraps2.S2LatLngRect_Empty)
    else:
        Empty = _pywraps2.S2LatLngRect_Empty
    if _newclass:
        Full = staticmethod(_pywraps2.S2LatLngRect_Full)
    else:
        Full = _pywraps2.S2LatLngRect_Full

    def is_valid(self):
        return _pywraps2.S2LatLngRect_is_valid(self)

    def is_empty(self):
        return _pywraps2.S2LatLngRect_is_empty(self)

    def is_point(self):
        return _pywraps2.S2LatLngRect_is_point(self)

    def GetVertex(self, k):
        return _pywraps2.S2LatLngRect_GetVertex(self, k)

    def GetCenter(self):
        return _pywraps2.S2LatLngRect_GetCenter(self)

    def GetSize(self):
        return _pywraps2.S2LatLngRect_GetSize(self)

    def Area(self):
        return _pywraps2.S2LatLngRect_Area(self)

    def GetCentroid(self):
        return _pywraps2.S2LatLngRect_GetCentroid(self)

    def Intersects(self, *args):
        return _pywraps2.S2LatLngRect_Intersects(self, *args)

    def AddPoint(self, *args):
        return _pywraps2.S2LatLngRect_AddPoint(self, *args)

    def Union(self, other):
        return _pywraps2.S2LatLngRect_Union(self, other)

    def Intersection(self, other):
        return _pywraps2.S2LatLngRect_Intersection(self, other)

    def ExpandedByDistance(self, distance):
        return _pywraps2.S2LatLngRect_ExpandedByDistance(self, distance)

    def GetDistance(self, *args):
        return _pywraps2.S2LatLngRect_GetDistance(self, *args)

    def __eq__(self, other):
        return _pywraps2.S2LatLngRect___eq__(self, other)

    def __ne__(self, other):
        return _pywraps2.S2LatLngRect___ne__(self, other)

    def ApproxEquals(self, *args):
        return _pywraps2.S2LatLngRect_ApproxEquals(self, *args)

    def Clone(self):
        return _pywraps2.S2LatLngRect_Clone(self)

    def GetCapBound(self):
        return _pywraps2.S2LatLngRect_GetCapBound(self)

    def GetRectBound(self):
        return _pywraps2.S2LatLngRect_GetRectBound(self)

    def MayIntersect(self, cell):
        return _pywraps2.S2LatLngRect_MayIntersect(self, cell)

    def Contains(self, *args):
        return _pywraps2.S2LatLngRect_Contains(self, *args)

    def Encode(self, encoder):
        return _pywraps2.S2LatLngRect_Encode(self, encoder)

    def Decode(self, decoder):
        return _pywraps2.S2LatLngRect_Decode(self, decoder)

    def __str__(self):
        return _pywraps2.S2LatLngRect___str__(self)
    __swig_destroy__ = _pywraps2.delete_S2LatLngRect
    __del__ = lambda self: None
S2LatLngRect_swigregister = _pywraps2.S2LatLngRect_swigregister
S2LatLngRect_swigregister(S2LatLngRect)

def S2LatLngRect_FromCenterSize(center, size):
    return _pywraps2.S2LatLngRect_FromCenterSize(center, size)
S2LatLngRect_FromCenterSize = _pywraps2.S2LatLngRect_FromCenterSize

def S2LatLngRect_FromPoint(p):
    return _pywraps2.S2LatLngRect_FromPoint(p)
S2LatLngRect_FromPoint = _pywraps2.S2LatLngRect_FromPoint

def S2LatLngRect_FromPointPair(p1, p2):
    return _pywraps2.S2LatLngRect_FromPointPair(p1, p2)
S2LatLngRect_FromPointPair = _pywraps2.S2LatLngRect_FromPointPair

def S2LatLngRect_Empty():
    return _pywraps2.S2LatLngRect_Empty()
S2LatLngRect_Empty = _pywraps2.S2LatLngRect_Empty

def S2LatLngRect_Full():
    return _pywraps2.S2LatLngRect_Full()
S2LatLngRect_Full = _pywraps2.S2LatLngRect_Full

class S2Loop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Loop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2Loop, name)
    __repr__ = _swig_repr

    def Init(self, vertices):
        return _pywraps2.S2Loop_Init(self, vertices)

    def __init__(self, *args):
        this = _pywraps2.new_S2Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywraps2.delete_S2Loop
    __del__ = lambda self: None

    def IsValid(self):
        return _pywraps2.S2Loop_IsValid(self)

    def num_vertices(self):
        return _pywraps2.S2Loop_num_vertices(self)

    def vertex(self, i):
        return _pywraps2.S2Loop_vertex(self, i)

    def is_empty(self):
        return _pywraps2.S2Loop_is_empty(self)

    def depth(self):
        return _pywraps2.S2Loop_depth(self)

    def is_hole(self):
        return _pywraps2.S2Loop_is_hole(self)

    def sign(self):
        return _pywraps2.S2Loop_sign(self)

    def Normalize(self):
        return _pywraps2.S2Loop_Normalize(self)

    def GetCentroid(self):
        return _pywraps2.S2Loop_GetCentroid(self)

    def GetDistance(self, x):
        return _pywraps2.S2Loop_GetDistance(self, x)

    def Project(self, x):
        return _pywraps2.S2Loop_Project(self, x)

    def Intersects(self, b):
        return _pywraps2.S2Loop_Intersects(self, b)

    def Equals(self, b):
        return _pywraps2.S2Loop_Equals(self, b)

    def Clone(self):
        return _pywraps2.S2Loop_Clone(self)

    def GetCapBound(self):
        return _pywraps2.S2Loop_GetCapBound(self)

    def GetRectBound(self):
        return _pywraps2.S2Loop_GetRectBound(self)

    def MayIntersect(self, cell):
        return _pywraps2.S2Loop_MayIntersect(self, cell)

    def Contains(self, *args):
        return _pywraps2.S2Loop_Contains(self, *args)

    def Encode(self, encoder):
        return _pywraps2.S2Loop_Encode(self, encoder)

    def Decode(self, decoder):
        return _pywraps2.S2Loop_Decode(self, decoder)

    def GetS2LatLngVertex(self, i):
        return _pywraps2.S2Loop_GetS2LatLngVertex(self, i)
S2Loop_swigregister = _pywraps2.S2Loop_swigregister
S2Loop_swigregister(S2Loop)


def TurnAngle(a, b, c):
    return _pywraps2.TurnAngle(a, b, c)
TurnAngle = _pywraps2.TurnAngle

def Rotate(p, axis, angle):
    return _pywraps2.Rotate(p, axis, angle)
Rotate = _pywraps2.Rotate
class S2Polygon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Polygon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2Polygon, name)
    __repr__ = _swig_repr

    def Copy(self, src):
        return _pywraps2.S2Polygon_Copy(self, src)
    __swig_destroy__ = _pywraps2.delete_S2Polygon
    __del__ = lambda self: None

    def IsValid(self):
        return _pywraps2.S2Polygon_IsValid(self)

    def is_empty(self):
        return _pywraps2.S2Polygon_is_empty(self)

    def num_loops(self):
        return _pywraps2.S2Polygon_num_loops(self)

    def num_vertices(self):
        return _pywraps2.S2Polygon_num_vertices(self)

    def loop(self, *args):
        return _pywraps2.S2Polygon_loop(self, *args)

    def GetArea(self):
        return _pywraps2.S2Polygon_GetArea(self)

    def GetCentroid(self):
        return _pywraps2.S2Polygon_GetCentroid(self)

    def GetDistance(self, x):
        return _pywraps2.S2Polygon_GetDistance(self, x)
    if _newclass:
        GetOverlapFractions = staticmethod(_pywraps2.S2Polygon_GetOverlapFractions)
    else:
        GetOverlapFractions = _pywraps2.S2Polygon_GetOverlapFractions

    def Project(self, x):
        return _pywraps2.S2Polygon_Project(self, x)

    def Intersects(self, *args):
        return _pywraps2.S2Polygon_Intersects(self, *args)

    def Equals(self, b):
        return _pywraps2.S2Polygon_Equals(self, b)

    def Clone(self):
        return _pywraps2.S2Polygon_Clone(self)

    def GetCapBound(self):
        return _pywraps2.S2Polygon_GetCapBound(self)

    def GetRectBound(self):
        return _pywraps2.S2Polygon_GetRectBound(self)

    def MayIntersect(self, cell):
        return _pywraps2.S2Polygon_MayIntersect(self, cell)

    def Contains(self, *args):
        return _pywraps2.S2Polygon_Contains(self, *args)

    def Encode(self, encoder):
        return _pywraps2.S2Polygon_Encode(self, encoder)

    def Decode(self, decoder):
        return _pywraps2.S2Polygon_Decode(self, decoder)

    def __init__(self, *args):
        this = _pywraps2.new_S2Polygon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitNested(self, loops):
        return _pywraps2.S2Polygon_InitNested(self, loops)

    def IntersectWithPolyline(self, arg2):
        return _pywraps2.S2Polygon_IntersectWithPolyline(self, arg2)
S2Polygon_swigregister = _pywraps2.S2Polygon_swigregister
S2Polygon_swigregister(S2Polygon)

def S2Polygon_GetOverlapFractions(a, b):
    return _pywraps2.S2Polygon_GetOverlapFractions(a, b)
S2Polygon_GetOverlapFractions = _pywraps2.S2Polygon_GetOverlapFractions

class S2Polyline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Polyline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2Polyline, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S2Polyline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitFromS2Points(self, vertices):
        return _pywraps2.S2Polyline_InitFromS2Points(self, vertices)

    def InitFromS2LatLngs(self, vertices):
        return _pywraps2.S2Polyline_InitFromS2LatLngs(self, vertices)
    __swig_destroy__ = _pywraps2.delete_S2Polyline
    __del__ = lambda self: None

    def IsValid(self):
        return _pywraps2.S2Polyline_IsValid(self)

    def num_vertices(self):
        return _pywraps2.S2Polyline_num_vertices(self)

    def vertex(self, k):
        return _pywraps2.S2Polyline_vertex(self, k)

    def GetLength(self):
        return _pywraps2.S2Polyline_GetLength(self)

    def GetCentroid(self):
        return _pywraps2.S2Polyline_GetCentroid(self)

    def Interpolate(self, fraction):
        return _pywraps2.S2Polyline_Interpolate(self, fraction)

    def GetSuffix(self, fraction):
        return _pywraps2.S2Polyline_GetSuffix(self, fraction)

    def UnInterpolate(self, point, next_vertex):
        return _pywraps2.S2Polyline_UnInterpolate(self, point, next_vertex)

    def Project(self, point):
        return _pywraps2.S2Polyline_Project(self, point)

    def IsOnRight(self, point):
        return _pywraps2.S2Polyline_IsOnRight(self, point)

    def Intersects(self, line):
        return _pywraps2.S2Polyline_Intersects(self, line)

    def Reverse(self):
        return _pywraps2.S2Polyline_Reverse(self)

    def ApproxEquals(self, *args):
        return _pywraps2.S2Polyline_ApproxEquals(self, *args)

    def Clone(self):
        return _pywraps2.S2Polyline_Clone(self)

    def GetCapBound(self):
        return _pywraps2.S2Polyline_GetCapBound(self)

    def GetRectBound(self):
        return _pywraps2.S2Polyline_GetRectBound(self)

    def MayIntersect(self, cell):
        return _pywraps2.S2Polyline_MayIntersect(self, cell)

    def Contains(self, *args):
        return _pywraps2.S2Polyline_Contains(self, *args)

    def Encode(self, encoder):
        return _pywraps2.S2Polyline_Encode(self, encoder)

    def Decode(self, decoder):
        return _pywraps2.S2Polyline_Decode(self, decoder)
S2Polyline_swigregister = _pywraps2.S2Polyline_swigregister
S2Polyline_swigregister(S2Polyline)

class S2RegionCoverer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2RegionCoverer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pywraps2.new_S2RegionCoverer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywraps2.delete_S2RegionCoverer
    __del__ = lambda self: None

    def GetCovering(self, region):
        return _pywraps2.S2RegionCoverer_GetCovering(self, region)

    def GetInteriorCovering(self, region):
        return _pywraps2.S2RegionCoverer_GetInteriorCovering(self, region)

    def max_cells(self):
        return _pywraps2.S2RegionCoverer_max_cells(self)

    def set_max_cells(self, max_cells):
        return _pywraps2.S2RegionCoverer_set_max_cells(self, max_cells)

    def min_level(self):
        return _pywraps2.S2RegionCoverer_min_level(self)

    def set_min_level(self, min_level):
        return _pywraps2.S2RegionCoverer_set_min_level(self, min_level)

    def max_level(self):
        return _pywraps2.S2RegionCoverer_max_level(self)

    def set_max_level(self, max_level):
        return _pywraps2.S2RegionCoverer_set_max_level(self, max_level)

    def set_fixed_level(self, fixed_level):
        return _pywraps2.S2RegionCoverer_set_fixed_level(self, fixed_level)

    def level_mod(self):
        return _pywraps2.S2RegionCoverer_level_mod(self)

    def set_level_mod(self, level_mod):
        return _pywraps2.S2RegionCoverer_set_level_mod(self, level_mod)
S2RegionCoverer_swigregister = _pywraps2.S2RegionCoverer_swigregister
S2RegionCoverer_swigregister(S2RegionCoverer)

class S2Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2Cell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S2Cell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def id(self):
        return _pywraps2.S2Cell_id(self)

    def face(self):
        return _pywraps2.S2Cell_face(self)

    def level(self):
        return _pywraps2.S2Cell_level(self)

    def GetVertex(self, k):
        return _pywraps2.S2Cell_GetVertex(self, k)

    def GetCenter(self):
        return _pywraps2.S2Cell_GetCenter(self)

    def ApproxArea(self):
        return _pywraps2.S2Cell_ApproxArea(self)

    def ExactArea(self):
        return _pywraps2.S2Cell_ExactArea(self)

    def GetBoundaryDistance(self, target):
        return _pywraps2.S2Cell_GetBoundaryDistance(self, target)

    def GetDistance(self, *args):
        return _pywraps2.S2Cell_GetDistance(self, *args)

    def Clone(self):
        return _pywraps2.S2Cell_Clone(self)

    def GetCapBound(self):
        return _pywraps2.S2Cell_GetCapBound(self)

    def GetRectBound(self):
        return _pywraps2.S2Cell_GetRectBound(self)

    def MayIntersect(self, cell):
        return _pywraps2.S2Cell_MayIntersect(self, cell)

    def Contains(self, *args):
        return _pywraps2.S2Cell_Contains(self, *args)

    def Encode(self, encoder):
        return _pywraps2.S2Cell_Encode(self, encoder)

    def Decode(self, decoder):
        return _pywraps2.S2Cell_Decode(self, decoder)

    def GetS2LatLngVertex(self, k):
        return _pywraps2.S2Cell_GetS2LatLngVertex(self, k)

    def GetS2LatLngEdge(self, k):
        return _pywraps2.S2Cell_GetS2LatLngEdge(self, k)
    __swig_destroy__ = _pywraps2.delete_S2Cell
    __del__ = lambda self: None
S2Cell_swigregister = _pywraps2.S2Cell_swigregister
S2Cell_swigregister(S2Cell)

class S2CellUnion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellUnion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2CellUnion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywraps2.new_S2CellUnion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, cell_ids):
        return _pywraps2.S2CellUnion_Init(self, cell_ids)

    def num_cells(self):
        return _pywraps2.S2CellUnion_num_cells(self)

    def cell_id(self, i):
        return _pywraps2.S2CellUnion_cell_id(self, i)

    def empty(self):
        return _pywraps2.S2CellUnion_empty(self)

    def cell_ids(self):
        return _pywraps2.S2CellUnion_cell_ids(self)

    def IsNormalized(self):
        return _pywraps2.S2CellUnion_IsNormalized(self)

    def NormalizeS2CellUnion(self):
        return _pywraps2.S2CellUnion_NormalizeS2CellUnion(self)

    def Denormalize(self, min_level, level_mod):
        return _pywraps2.S2CellUnion_Denormalize(self, min_level, level_mod)

    def Intersects(self, *args):
        return _pywraps2.S2CellUnion_Intersects(self, *args)

    def Intersection(self, *args):
        return _pywraps2.S2CellUnion_Intersection(self, *args)

    def ApproxArea(self):
        return _pywraps2.S2CellUnion_ApproxArea(self)

    def ExactArea(self):
        return _pywraps2.S2CellUnion_ExactArea(self)

    def Clone(self):
        return _pywraps2.S2CellUnion_Clone(self)

    def GetCapBound(self):
        return _pywraps2.S2CellUnion_GetCapBound(self)

    def GetRectBound(self):
        return _pywraps2.S2CellUnion_GetRectBound(self)

    def MayIntersect(self, cell):
        return _pywraps2.S2CellUnion_MayIntersect(self, cell)

    def Contains(self, *args):
        return _pywraps2.S2CellUnion_Contains(self, *args)

    def Encode(self, encoder):
        return _pywraps2.S2CellUnion_Encode(self, encoder)

    def Decode(self, decoder):
        return _pywraps2.S2CellUnion_Decode(self, decoder)
    if _newclass:
        Normalize = staticmethod(_pywraps2.S2CellUnion_Normalize)
    else:
        Normalize = _pywraps2.S2CellUnion_Normalize
    __swig_destroy__ = _pywraps2.delete_S2CellUnion
    __del__ = lambda self: None
S2CellUnion_swigregister = _pywraps2.S2CellUnion_swigregister
S2CellUnion_swigregister(S2CellUnion)

def S2CellUnion_Normalize(cell_ids):
    return _pywraps2.S2CellUnion_Normalize(cell_ids)
S2CellUnion_Normalize = _pywraps2.S2CellUnion_Normalize

# This file is compatible with both classic and new-style classes.


