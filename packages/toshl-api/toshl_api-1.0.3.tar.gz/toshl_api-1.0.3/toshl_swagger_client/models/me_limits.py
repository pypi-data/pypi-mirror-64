# coding: utf-8

"""
    Toshl

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MeLimits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounts': 'bool',
        'budgets': 'bool',
        'images': 'bool',
        '_import': 'bool',
        'bank': 'bool',
        'repeats': 'bool',
        'reminders': 'bool',
        'export': 'bool',
        'pro_share': 'bool',
        'passcode': 'bool',
        'planning': 'bool',
        'locations': 'bool'
    }

    attribute_map = {
        'accounts': 'accounts',
        'budgets': 'budgets',
        'images': 'images',
        '_import': 'import',
        'bank': 'bank',
        'repeats': 'repeats',
        'reminders': 'reminders',
        'export': 'export',
        'pro_share': 'pro_share',
        'passcode': 'passcode',
        'planning': 'planning',
        'locations': 'locations'
    }

    def __init__(self, accounts=None, budgets=None, images=None, _import=None, bank=None, repeats=None, reminders=None, export=None, pro_share=None, passcode=None, planning=None, locations=None):  # noqa: E501
        """MeLimits - a model defined in Swagger"""  # noqa: E501

        self._accounts = None
        self._budgets = None
        self._images = None
        self.__import = None
        self._bank = None
        self._repeats = None
        self._reminders = None
        self._export = None
        self._pro_share = None
        self._passcode = None
        self._planning = None
        self._locations = None
        self.discriminator = None

        if accounts is not None:
            self.accounts = accounts
        if budgets is not None:
            self.budgets = budgets
        if images is not None:
            self.images = images
        if _import is not None:
            self._import = _import
        if bank is not None:
            self.bank = bank
        if repeats is not None:
            self.repeats = repeats
        if reminders is not None:
            self.reminders = reminders
        if export is not None:
            self.export = export
        if pro_share is not None:
            self.pro_share = pro_share
        if passcode is not None:
            self.passcode = passcode
        if planning is not None:
            self.planning = planning
        if locations is not None:
            self.locations = locations

    @property
    def accounts(self):
        """Gets the accounts of this MeLimits.  # noqa: E501


        :return: The accounts of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this MeLimits.


        :param accounts: The accounts of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._accounts = accounts

    @property
    def budgets(self):
        """Gets the budgets of this MeLimits.  # noqa: E501


        :return: The budgets of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._budgets

    @budgets.setter
    def budgets(self, budgets):
        """Sets the budgets of this MeLimits.


        :param budgets: The budgets of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._budgets = budgets

    @property
    def images(self):
        """Gets the images of this MeLimits.  # noqa: E501


        :return: The images of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this MeLimits.


        :param images: The images of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._images = images

    @property
    def _import(self):
        """Gets the _import of this MeLimits.  # noqa: E501


        :return: The _import of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this MeLimits.


        :param _import: The _import of this MeLimits.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def bank(self):
        """Gets the bank of this MeLimits.  # noqa: E501


        :return: The bank of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this MeLimits.


        :param bank: The bank of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._bank = bank

    @property
    def repeats(self):
        """Gets the repeats of this MeLimits.  # noqa: E501


        :return: The repeats of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._repeats

    @repeats.setter
    def repeats(self, repeats):
        """Sets the repeats of this MeLimits.


        :param repeats: The repeats of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._repeats = repeats

    @property
    def reminders(self):
        """Gets the reminders of this MeLimits.  # noqa: E501


        :return: The reminders of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._reminders

    @reminders.setter
    def reminders(self, reminders):
        """Sets the reminders of this MeLimits.


        :param reminders: The reminders of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._reminders = reminders

    @property
    def export(self):
        """Gets the export of this MeLimits.  # noqa: E501


        :return: The export of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this MeLimits.


        :param export: The export of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._export = export

    @property
    def pro_share(self):
        """Gets the pro_share of this MeLimits.  # noqa: E501


        :return: The pro_share of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._pro_share

    @pro_share.setter
    def pro_share(self, pro_share):
        """Sets the pro_share of this MeLimits.


        :param pro_share: The pro_share of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._pro_share = pro_share

    @property
    def passcode(self):
        """Gets the passcode of this MeLimits.  # noqa: E501


        :return: The passcode of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._passcode

    @passcode.setter
    def passcode(self, passcode):
        """Sets the passcode of this MeLimits.


        :param passcode: The passcode of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._passcode = passcode

    @property
    def planning(self):
        """Gets the planning of this MeLimits.  # noqa: E501


        :return: The planning of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._planning

    @planning.setter
    def planning(self, planning):
        """Sets the planning of this MeLimits.


        :param planning: The planning of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._planning = planning

    @property
    def locations(self):
        """Gets the locations of this MeLimits.  # noqa: E501


        :return: The locations of this MeLimits.  # noqa: E501
        :rtype: bool
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this MeLimits.


        :param locations: The locations of this MeLimits.  # noqa: E501
        :type: bool
        """

        self._locations = locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeLimits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeLimits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
