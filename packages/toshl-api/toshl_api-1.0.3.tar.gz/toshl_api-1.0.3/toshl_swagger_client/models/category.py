# coding: utf-8

"""
    Toshl

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Category(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'name_override': 'bool',
        'modified': 'str',
        'type': 'str',
        'deleted': 'bool',
        'counts': 'CategoryCounts'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'name_override': 'name_override',
        'modified': 'modified',
        'type': 'type',
        'deleted': 'deleted',
        'counts': 'counts'
    }

    def __init__(self, id=None, name=None, name_override=None, modified=None, type=None, deleted=None, counts=None):  # noqa: E501
        """Category - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._name_override = None
        self._modified = None
        self._type = None
        self._deleted = None
        self._counts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if name_override is not None:
            self.name_override = name_override
        if modified is not None:
            self.modified = modified
        if type is not None:
            self.type = type
        if deleted is not None:
            self.deleted = deleted
        if counts is not None:
            self.counts = counts

    @property
    def id(self):
        """Gets the id of this Category.  # noqa: E501


        :return: The id of this Category.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Category.  # noqa: E501


        :return: The name of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.


        :param name: The name of this Category.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_override(self):
        """Gets the name_override of this Category.  # noqa: E501


        :return: The name_override of this Category.  # noqa: E501
        :rtype: bool
        """
        return self._name_override

    @name_override.setter
    def name_override(self, name_override):
        """Sets the name_override of this Category.


        :param name_override: The name_override of this Category.  # noqa: E501
        :type: bool
        """

        self._name_override = name_override

    @property
    def modified(self):
        """Gets the modified of this Category.  # noqa: E501


        :return: The modified of this Category.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Category.


        :param modified: The modified of this Category.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def type(self):
        """Gets the type of this Category.  # noqa: E501


        :return: The type of this Category.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Category.


        :param type: The type of this Category.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def deleted(self):
        """Gets the deleted of this Category.  # noqa: E501


        :return: The deleted of this Category.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Category.


        :param deleted: The deleted of this Category.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def counts(self):
        """Gets the counts of this Category.  # noqa: E501


        :return: The counts of this Category.  # noqa: E501
        :rtype: CategoryCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Category.


        :param counts: The counts of this Category.  # noqa: E501
        :type: CategoryCounts
        """

        self._counts = counts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Category, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
