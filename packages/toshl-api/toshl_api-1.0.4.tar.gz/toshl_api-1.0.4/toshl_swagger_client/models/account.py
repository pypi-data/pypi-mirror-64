# coding: utf-8

"""
    Toshl

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'name_override': 'bool',
        'type': 'str',
        'balance': 'float',
        'initial_balance': 'float',
        'limit': 'float',
        'currency': 'AccountCurrency',
        'daily_sum_median': 'AccountDailySumMedian',
        'avg': 'AccountDailySumMedian',
        'status': 'str',
        'order': 'float',
        'modified': 'str',
        'count': 'float',
        'review': 'float',
        'deleted': 'bool',
        'recalculated': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'name_override': 'name_override',
        'type': 'type',
        'balance': 'balance',
        'initial_balance': 'initial_balance',
        'limit': 'limit',
        'currency': 'currency',
        'daily_sum_median': 'daily_sum_median',
        'avg': 'avg',
        'status': 'status',
        'order': 'order',
        'modified': 'modified',
        'count': 'count',
        'review': 'review',
        'deleted': 'deleted',
        'recalculated': 'recalculated'
    }

    def __init__(self, id=None, name=None, name_override=None, type=None, balance=None, initial_balance=None, limit=None, currency=None, daily_sum_median=None, avg=None, status=None, order=None, modified=None, count=None, review=None, deleted=None, recalculated=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._name_override = None
        self._type = None
        self._balance = None
        self._initial_balance = None
        self._limit = None
        self._currency = None
        self._daily_sum_median = None
        self._avg = None
        self._status = None
        self._order = None
        self._modified = None
        self._count = None
        self._review = None
        self._deleted = None
        self._recalculated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if name_override is not None:
            self.name_override = name_override
        if type is not None:
            self.type = type
        if balance is not None:
            self.balance = balance
        if initial_balance is not None:
            self.initial_balance = initial_balance
        if limit is not None:
            self.limit = limit
        if currency is not None:
            self.currency = currency
        if daily_sum_median is not None:
            self.daily_sum_median = daily_sum_median
        if avg is not None:
            self.avg = avg
        if status is not None:
            self.status = status
        if order is not None:
            self.order = order
        if modified is not None:
            self.modified = modified
        if count is not None:
            self.count = count
        if review is not None:
            self.review = review
        if deleted is not None:
            self.deleted = deleted
        if recalculated is not None:
            self.recalculated = recalculated

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501


        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_override(self):
        """Gets the name_override of this Account.  # noqa: E501


        :return: The name_override of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._name_override

    @name_override.setter
    def name_override(self, name_override):
        """Sets the name_override of this Account.


        :param name_override: The name_override of this Account.  # noqa: E501
        :type: bool
        """

        self._name_override = name_override

    @property
    def type(self):
        """Gets the type of this Account.  # noqa: E501


        :return: The type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.


        :param type: The type of this Account.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def balance(self):
        """Gets the balance of this Account.  # noqa: E501


        :return: The balance of this Account.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.


        :param balance: The balance of this Account.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def initial_balance(self):
        """Gets the initial_balance of this Account.  # noqa: E501


        :return: The initial_balance of this Account.  # noqa: E501
        :rtype: float
        """
        return self._initial_balance

    @initial_balance.setter
    def initial_balance(self, initial_balance):
        """Sets the initial_balance of this Account.


        :param initial_balance: The initial_balance of this Account.  # noqa: E501
        :type: float
        """

        self._initial_balance = initial_balance

    @property
    def limit(self):
        """Gets the limit of this Account.  # noqa: E501


        :return: The limit of this Account.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Account.


        :param limit: The limit of this Account.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def currency(self):
        """Gets the currency of this Account.  # noqa: E501


        :return: The currency of this Account.  # noqa: E501
        :rtype: AccountCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.


        :param currency: The currency of this Account.  # noqa: E501
        :type: AccountCurrency
        """

        self._currency = currency

    @property
    def daily_sum_median(self):
        """Gets the daily_sum_median of this Account.  # noqa: E501


        :return: The daily_sum_median of this Account.  # noqa: E501
        :rtype: AccountDailySumMedian
        """
        return self._daily_sum_median

    @daily_sum_median.setter
    def daily_sum_median(self, daily_sum_median):
        """Sets the daily_sum_median of this Account.


        :param daily_sum_median: The daily_sum_median of this Account.  # noqa: E501
        :type: AccountDailySumMedian
        """

        self._daily_sum_median = daily_sum_median

    @property
    def avg(self):
        """Gets the avg of this Account.  # noqa: E501


        :return: The avg of this Account.  # noqa: E501
        :rtype: AccountDailySumMedian
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this Account.


        :param avg: The avg of this Account.  # noqa: E501
        :type: AccountDailySumMedian
        """

        self._avg = avg

    @property
    def status(self):
        """Gets the status of this Account.  # noqa: E501


        :return: The status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.


        :param status: The status of this Account.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def order(self):
        """Gets the order of this Account.  # noqa: E501


        :return: The order of this Account.  # noqa: E501
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Account.


        :param order: The order of this Account.  # noqa: E501
        :type: float
        """

        self._order = order

    @property
    def modified(self):
        """Gets the modified of this Account.  # noqa: E501


        :return: The modified of this Account.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Account.


        :param modified: The modified of this Account.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def count(self):
        """Gets the count of this Account.  # noqa: E501


        :return: The count of this Account.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Account.


        :param count: The count of this Account.  # noqa: E501
        :type: float
        """

        self._count = count

    @property
    def review(self):
        """Gets the review of this Account.  # noqa: E501


        :return: The review of this Account.  # noqa: E501
        :rtype: float
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this Account.


        :param review: The review of this Account.  # noqa: E501
        :type: float
        """

        self._review = review

    @property
    def deleted(self):
        """Gets the deleted of this Account.  # noqa: E501


        :return: The deleted of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Account.


        :param deleted: The deleted of this Account.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def recalculated(self):
        """Gets the recalculated of this Account.  # noqa: E501


        :return: The recalculated of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._recalculated

    @recalculated.setter
    def recalculated(self, recalculated):
        """Sets the recalculated of this Account.


        :param recalculated: The recalculated of this Account.  # noqa: E501
        :type: bool
        """

        self._recalculated = recalculated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
