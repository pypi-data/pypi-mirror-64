# coding: utf-8

"""
    Toshl

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Me(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'joined': 'str',
        'modified': 'str',
        'pro': 'MePro',
        'trial_eligible': 'bool',
        'currency': 'MeCurrency',
        'start_day': 'int',
        'notifications': 'int',
        'migration': 'MeMigration',
        'limits': 'MeLimits',
        'locale': 'str',
        'language': 'str',
        'timezone': 'str',
        'country': 'str',
        'otp_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'joined': 'joined',
        'modified': 'modified',
        'pro': 'pro',
        'trial_eligible': 'trial_eligible',
        'currency': 'currency',
        'start_day': 'start_day',
        'notifications': 'notifications',
        'migration': 'migration',
        'limits': 'limits',
        'locale': 'locale',
        'language': 'language',
        'timezone': 'timezone',
        'country': 'country',
        'otp_enabled': 'otp_enabled'
    }

    def __init__(self, id=None, email=None, first_name=None, last_name=None, joined=None, modified=None, pro=None, trial_eligible=None, currency=None, start_day=None, notifications=None, migration=None, limits=None, locale=None, language=None, timezone=None, country=None, otp_enabled=None):  # noqa: E501
        """Me - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._joined = None
        self._modified = None
        self._pro = None
        self._trial_eligible = None
        self._currency = None
        self._start_day = None
        self._notifications = None
        self._migration = None
        self._limits = None
        self._locale = None
        self._language = None
        self._timezone = None
        self._country = None
        self._otp_enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if joined is not None:
            self.joined = joined
        if modified is not None:
            self.modified = modified
        if pro is not None:
            self.pro = pro
        if trial_eligible is not None:
            self.trial_eligible = trial_eligible
        if currency is not None:
            self.currency = currency
        if start_day is not None:
            self.start_day = start_day
        if notifications is not None:
            self.notifications = notifications
        if migration is not None:
            self.migration = migration
        if limits is not None:
            self.limits = limits
        if locale is not None:
            self.locale = locale
        if language is not None:
            self.language = language
        if timezone is not None:
            self.timezone = timezone
        if country is not None:
            self.country = country
        if otp_enabled is not None:
            self.otp_enabled = otp_enabled

    @property
    def id(self):
        """Gets the id of this Me.  # noqa: E501


        :return: The id of this Me.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Me.


        :param id: The id of this Me.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this Me.  # noqa: E501


        :return: The email of this Me.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Me.


        :param email: The email of this Me.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Me.  # noqa: E501


        :return: The first_name of this Me.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Me.


        :param first_name: The first_name of this Me.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Me.  # noqa: E501


        :return: The last_name of this Me.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Me.


        :param last_name: The last_name of this Me.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def joined(self):
        """Gets the joined of this Me.  # noqa: E501


        :return: The joined of this Me.  # noqa: E501
        :rtype: str
        """
        return self._joined

    @joined.setter
    def joined(self, joined):
        """Sets the joined of this Me.


        :param joined: The joined of this Me.  # noqa: E501
        :type: str
        """

        self._joined = joined

    @property
    def modified(self):
        """Gets the modified of this Me.  # noqa: E501


        :return: The modified of this Me.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Me.


        :param modified: The modified of this Me.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def pro(self):
        """Gets the pro of this Me.  # noqa: E501


        :return: The pro of this Me.  # noqa: E501
        :rtype: MePro
        """
        return self._pro

    @pro.setter
    def pro(self, pro):
        """Sets the pro of this Me.


        :param pro: The pro of this Me.  # noqa: E501
        :type: MePro
        """

        self._pro = pro

    @property
    def trial_eligible(self):
        """Gets the trial_eligible of this Me.  # noqa: E501


        :return: The trial_eligible of this Me.  # noqa: E501
        :rtype: bool
        """
        return self._trial_eligible

    @trial_eligible.setter
    def trial_eligible(self, trial_eligible):
        """Sets the trial_eligible of this Me.


        :param trial_eligible: The trial_eligible of this Me.  # noqa: E501
        :type: bool
        """

        self._trial_eligible = trial_eligible

    @property
    def currency(self):
        """Gets the currency of this Me.  # noqa: E501


        :return: The currency of this Me.  # noqa: E501
        :rtype: MeCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Me.


        :param currency: The currency of this Me.  # noqa: E501
        :type: MeCurrency
        """

        self._currency = currency

    @property
    def start_day(self):
        """Gets the start_day of this Me.  # noqa: E501


        :return: The start_day of this Me.  # noqa: E501
        :rtype: int
        """
        return self._start_day

    @start_day.setter
    def start_day(self, start_day):
        """Sets the start_day of this Me.


        :param start_day: The start_day of this Me.  # noqa: E501
        :type: int
        """

        self._start_day = start_day

    @property
    def notifications(self):
        """Gets the notifications of this Me.  # noqa: E501


        :return: The notifications of this Me.  # noqa: E501
        :rtype: int
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Me.


        :param notifications: The notifications of this Me.  # noqa: E501
        :type: int
        """

        self._notifications = notifications

    @property
    def migration(self):
        """Gets the migration of this Me.  # noqa: E501


        :return: The migration of this Me.  # noqa: E501
        :rtype: MeMigration
        """
        return self._migration

    @migration.setter
    def migration(self, migration):
        """Sets the migration of this Me.


        :param migration: The migration of this Me.  # noqa: E501
        :type: MeMigration
        """

        self._migration = migration

    @property
    def limits(self):
        """Gets the limits of this Me.  # noqa: E501


        :return: The limits of this Me.  # noqa: E501
        :rtype: MeLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this Me.


        :param limits: The limits of this Me.  # noqa: E501
        :type: MeLimits
        """

        self._limits = limits

    @property
    def locale(self):
        """Gets the locale of this Me.  # noqa: E501


        :return: The locale of this Me.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Me.


        :param locale: The locale of this Me.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def language(self):
        """Gets the language of this Me.  # noqa: E501


        :return: The language of this Me.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Me.


        :param language: The language of this Me.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def timezone(self):
        """Gets the timezone of this Me.  # noqa: E501


        :return: The timezone of this Me.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Me.


        :param timezone: The timezone of this Me.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def country(self):
        """Gets the country of this Me.  # noqa: E501


        :return: The country of this Me.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Me.


        :param country: The country of this Me.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def otp_enabled(self):
        """Gets the otp_enabled of this Me.  # noqa: E501


        :return: The otp_enabled of this Me.  # noqa: E501
        :rtype: bool
        """
        return self._otp_enabled

    @otp_enabled.setter
    def otp_enabled(self, otp_enabled):
        """Sets the otp_enabled of this Me.


        :param otp_enabled: The otp_enabled of this Me.  # noqa: E501
        :type: bool
        """

        self._otp_enabled = otp_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Me, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Me):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
