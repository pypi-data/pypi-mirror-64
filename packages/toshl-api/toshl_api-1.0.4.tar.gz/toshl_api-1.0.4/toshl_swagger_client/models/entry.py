# coding: utf-8

"""
    Toshl

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Entry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'amount': 'float',
        'currency': 'EntryCurrency',
        '_date': 'str',
        'desc': 'str',
        'account': 'str',
        'category': 'str',
        'tags': 'list[str]',
        'created': 'str',
        'modified': 'str',
        '_import': 'EntryImport',
        'readonly': 'list[str]',
        'completed': 'bool',
        'deleted': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'amount': 'amount',
        'currency': 'currency',
        '_date': 'date',
        'desc': 'desc',
        'account': 'account',
        'category': 'category',
        'tags': 'tags',
        'created': 'created',
        'modified': 'modified',
        '_import': 'import',
        'readonly': 'readonly',
        'completed': 'completed',
        'deleted': 'deleted'
    }

    def __init__(self, id=None, amount=None, currency=None, _date=None, desc=None, account=None, category=None, tags=None, created=None, modified=None, _import=None, readonly=None, completed=None, deleted=None):  # noqa: E501
        """Entry - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._amount = None
        self._currency = None
        self.__date = None
        self._desc = None
        self._account = None
        self._category = None
        self._tags = None
        self._created = None
        self._modified = None
        self.__import = None
        self._readonly = None
        self._completed = None
        self._deleted = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if _date is not None:
            self._date = _date
        if desc is not None:
            self.desc = desc
        if account is not None:
            self.account = account
        if category is not None:
            self.category = category
        if tags is not None:
            self.tags = tags
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if _import is not None:
            self._import = _import
        if readonly is not None:
            self.readonly = readonly
        if completed is not None:
            self.completed = completed
        if deleted is not None:
            self.deleted = deleted

    @property
    def id(self):
        """Gets the id of this Entry.  # noqa: E501


        :return: The id of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entry.


        :param id: The id of this Entry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this Entry.  # noqa: E501


        :return: The amount of this Entry.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Entry.


        :param amount: The amount of this Entry.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Entry.  # noqa: E501


        :return: The currency of this Entry.  # noqa: E501
        :rtype: EntryCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Entry.


        :param currency: The currency of this Entry.  # noqa: E501
        :type: EntryCurrency
        """

        self._currency = currency

    @property
    def _date(self):
        """Gets the _date of this Entry.  # noqa: E501


        :return: The _date of this Entry.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Entry.


        :param _date: The _date of this Entry.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def desc(self):
        """Gets the desc of this Entry.  # noqa: E501


        :return: The desc of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Entry.


        :param desc: The desc of this Entry.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def account(self):
        """Gets the account of this Entry.  # noqa: E501


        :return: The account of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Entry.


        :param account: The account of this Entry.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def category(self):
        """Gets the category of this Entry.  # noqa: E501


        :return: The category of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Entry.


        :param category: The category of this Entry.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def tags(self):
        """Gets the tags of this Entry.  # noqa: E501


        :return: The tags of this Entry.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Entry.


        :param tags: The tags of this Entry.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def created(self):
        """Gets the created of this Entry.  # noqa: E501


        :return: The created of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Entry.


        :param created: The created of this Entry.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Entry.  # noqa: E501


        :return: The modified of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Entry.


        :param modified: The modified of this Entry.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def _import(self):
        """Gets the _import of this Entry.  # noqa: E501


        :return: The _import of this Entry.  # noqa: E501
        :rtype: EntryImport
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this Entry.


        :param _import: The _import of this Entry.  # noqa: E501
        :type: EntryImport
        """

        self.__import = _import

    @property
    def readonly(self):
        """Gets the readonly of this Entry.  # noqa: E501


        :return: The readonly of this Entry.  # noqa: E501
        :rtype: list[str]
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Entry.


        :param readonly: The readonly of this Entry.  # noqa: E501
        :type: list[str]
        """

        self._readonly = readonly

    @property
    def completed(self):
        """Gets the completed of this Entry.  # noqa: E501


        :return: The completed of this Entry.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Entry.


        :param completed: The completed of this Entry.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def deleted(self):
        """Gets the deleted of this Entry.  # noqa: E501


        :return: The deleted of this Entry.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Entry.


        :param deleted: The deleted of this Entry.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
