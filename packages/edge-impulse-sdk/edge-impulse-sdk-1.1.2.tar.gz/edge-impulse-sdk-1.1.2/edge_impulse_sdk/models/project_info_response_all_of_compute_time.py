# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ProjectInfoResponseAllOfComputeTime(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'period_start_date': 'datetime',
        'period_end_date': 'datetime',
        'time_used_ms': 'int',
        'time_left_ms': 'int'
    }

    attribute_map = {
        'period_start_date': 'periodStartDate',
        'period_end_date': 'periodEndDate',
        'time_used_ms': 'timeUsedMs',
        'time_left_ms': 'timeLeftMs'
    }

    def __init__(self, period_start_date=None, period_end_date=None, time_used_ms=None, time_left_ms=None, local_vars_configuration=None):  # noqa: E501
        """ProjectInfoResponseAllOfComputeTime - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._period_start_date = None
        self._period_end_date = None
        self._time_used_ms = None
        self._time_left_ms = None
        self.discriminator = None

        self.period_start_date = period_start_date
        self.period_end_date = period_end_date
        self.time_used_ms = time_used_ms
        self.time_left_ms = time_left_ms

    @property
    def period_start_date(self):
        """Gets the period_start_date of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501

        Start of the current time period.  # noqa: E501

        :return: The period_start_date of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start_date

    @period_start_date.setter
    def period_start_date(self, period_start_date):
        """Sets the period_start_date of this ProjectInfoResponseAllOfComputeTime.

        Start of the current time period.  # noqa: E501

        :param period_start_date: The period_start_date of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and period_start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `period_start_date`, must not be `None`")  # noqa: E501

        self._period_start_date = period_start_date

    @property
    def period_end_date(self):
        """Gets the period_end_date of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501

        End of the current time period. This is the date when the compute time resets again.  # noqa: E501

        :return: The period_end_date of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end_date

    @period_end_date.setter
    def period_end_date(self, period_end_date):
        """Sets the period_end_date of this ProjectInfoResponseAllOfComputeTime.

        End of the current time period. This is the date when the compute time resets again.  # noqa: E501

        :param period_end_date: The period_end_date of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and period_end_date is None:  # noqa: E501
            raise ValueError("Invalid value for `period_end_date`, must not be `None`")  # noqa: E501

        self._period_end_date = period_end_date

    @property
    def time_used_ms(self):
        """Gets the time_used_ms of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501

        The amount of compute used for the current time period.  # noqa: E501

        :return: The time_used_ms of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :rtype: int
        """
        return self._time_used_ms

    @time_used_ms.setter
    def time_used_ms(self, time_used_ms):
        """Sets the time_used_ms of this ProjectInfoResponseAllOfComputeTime.

        The amount of compute used for the current time period.  # noqa: E501

        :param time_used_ms: The time_used_ms of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and time_used_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `time_used_ms`, must not be `None`")  # noqa: E501

        self._time_used_ms = time_used_ms

    @property
    def time_left_ms(self):
        """Gets the time_left_ms of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501

        The amount of compute left for the current time period.  # noqa: E501

        :return: The time_left_ms of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :rtype: int
        """
        return self._time_left_ms

    @time_left_ms.setter
    def time_left_ms(self, time_left_ms):
        """Sets the time_left_ms of this ProjectInfoResponseAllOfComputeTime.

        The amount of compute left for the current time period.  # noqa: E501

        :param time_left_ms: The time_left_ms of this ProjectInfoResponseAllOfComputeTime.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and time_left_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `time_left_ms`, must not be `None`")  # noqa: E501

        self._time_left_ms = time_left_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectInfoResponseAllOfComputeTime):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectInfoResponseAllOfComputeTime):
            return True

        return self.to_dict() != other.to_dict()
