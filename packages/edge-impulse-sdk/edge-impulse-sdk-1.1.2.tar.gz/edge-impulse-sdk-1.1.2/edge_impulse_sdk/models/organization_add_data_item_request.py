# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OrganizationAddDataItemRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'bucket_id': 'int',
        'bucket_name': 'str',
        'dataset': 'str',
        'bucket_path': 'str',
        'metadata': 'str',
        'files': 'list[file]'
    }

    attribute_map = {
        'name': 'name',
        'bucket_id': 'bucketId',
        'bucket_name': 'bucketName',
        'dataset': 'dataset',
        'bucket_path': 'bucketPath',
        'metadata': 'metadata',
        'files': 'files[]'
    }

    def __init__(self, name=None, bucket_id=None, bucket_name=None, dataset=None, bucket_path=None, metadata=None, files=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationAddDataItemRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._bucket_id = None
        self._bucket_name = None
        self._dataset = None
        self._bucket_path = None
        self._metadata = None
        self._files = None
        self.discriminator = None

        self.name = name
        if bucket_id is not None:
            self.bucket_id = bucket_id
        if bucket_name is not None:
            self.bucket_name = bucket_name
        self.dataset = dataset
        if bucket_path is not None:
            self.bucket_path = bucket_path
        self.metadata = metadata
        self.files = files

    @property
    def name(self):
        """Gets the name of this OrganizationAddDataItemRequest.  # noqa: E501


        :return: The name of this OrganizationAddDataItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationAddDataItemRequest.


        :param name: The name of this OrganizationAddDataItemRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def bucket_id(self):
        """Gets the bucket_id of this OrganizationAddDataItemRequest.  # noqa: E501


        :return: The bucket_id of this OrganizationAddDataItemRequest.  # noqa: E501
        :rtype: int
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this OrganizationAddDataItemRequest.


        :param bucket_id: The bucket_id of this OrganizationAddDataItemRequest.  # noqa: E501
        :type: int
        """

        self._bucket_id = bucket_id

    @property
    def bucket_name(self):
        """Gets the bucket_name of this OrganizationAddDataItemRequest.  # noqa: E501

        Name of the bucket name (as an Edge Impulse name)  # noqa: E501

        :return: The bucket_name of this OrganizationAddDataItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this OrganizationAddDataItemRequest.

        Name of the bucket name (as an Edge Impulse name)  # noqa: E501

        :param bucket_name: The bucket_name of this OrganizationAddDataItemRequest.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def dataset(self):
        """Gets the dataset of this OrganizationAddDataItemRequest.  # noqa: E501


        :return: The dataset of this OrganizationAddDataItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this OrganizationAddDataItemRequest.


        :param dataset: The dataset of this OrganizationAddDataItemRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dataset is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def bucket_path(self):
        """Gets the bucket_path of this OrganizationAddDataItemRequest.  # noqa: E501

        Optional path in the bucket to create this data item (files are created under this path).  # noqa: E501

        :return: The bucket_path of this OrganizationAddDataItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._bucket_path

    @bucket_path.setter
    def bucket_path(self, bucket_path):
        """Sets the bucket_path of this OrganizationAddDataItemRequest.

        Optional path in the bucket to create this data item (files are created under this path).  # noqa: E501

        :param bucket_path: The bucket_path of this OrganizationAddDataItemRequest.  # noqa: E501
        :type: str
        """

        self._bucket_path = bucket_path

    @property
    def metadata(self):
        """Gets the metadata of this OrganizationAddDataItemRequest.  # noqa: E501

        Key-value pair of metadata (in JSON format)  # noqa: E501

        :return: The metadata of this OrganizationAddDataItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OrganizationAddDataItemRequest.

        Key-value pair of metadata (in JSON format)  # noqa: E501

        :param metadata: The metadata of this OrganizationAddDataItemRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def files(self):
        """Gets the files of this OrganizationAddDataItemRequest.  # noqa: E501


        :return: The files of this OrganizationAddDataItemRequest.  # noqa: E501
        :rtype: list[file]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this OrganizationAddDataItemRequest.


        :param files: The files of this OrganizationAddDataItemRequest.  # noqa: E501
        :type: list[file]
        """
        if self.local_vars_configuration.client_side_validation and files is None:  # noqa: E501
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationAddDataItemRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationAddDataItemRequest):
            return True

        return self.to_dict() != other.to_dict()
