# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class KerasModelMetadataAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'layers': 'list[KerasModelLayer]',
        'classes': 'list[str]',
        'metrics': 'KerasModelMetadataAllOfMetrics',
        'confusion_matrix': 'list[list[float]]',
        'report': 'object'
    }

    attribute_map = {
        'created': 'created',
        'layers': 'layers',
        'classes': 'classes',
        'metrics': 'metrics',
        'confusion_matrix': 'confusion_matrix',
        'report': 'report'
    }

    def __init__(self, created=None, layers=None, classes=None, metrics=None, confusion_matrix=None, report=None, local_vars_configuration=None):  # noqa: E501
        """KerasModelMetadataAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created = None
        self._layers = None
        self._classes = None
        self._metrics = None
        self._confusion_matrix = None
        self._report = None
        self.discriminator = None

        self.created = created
        self.layers = layers
        self.classes = classes
        self.metrics = metrics
        self.confusion_matrix = confusion_matrix
        self.report = report

    @property
    def created(self):
        """Gets the created of this KerasModelMetadataAllOf.  # noqa: E501

        Date when the model was trained  # noqa: E501

        :return: The created of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this KerasModelMetadataAllOf.

        Date when the model was trained  # noqa: E501

        :param created: The created of this KerasModelMetadataAllOf.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def layers(self):
        """Gets the layers of this KerasModelMetadataAllOf.  # noqa: E501

        Layers of the neural network  # noqa: E501

        :return: The layers of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: list[KerasModelLayer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this KerasModelMetadataAllOf.

        Layers of the neural network  # noqa: E501

        :param layers: The layers of this KerasModelMetadataAllOf.  # noqa: E501
        :type: list[KerasModelLayer]
        """
        if self.local_vars_configuration.client_side_validation and layers is None:  # noqa: E501
            raise ValueError("Invalid value for `layers`, must not be `None`")  # noqa: E501

        self._layers = layers

    @property
    def classes(self):
        """Gets the classes of this KerasModelMetadataAllOf.  # noqa: E501

        Labels for the output layer  # noqa: E501

        :return: The classes of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this KerasModelMetadataAllOf.

        Labels for the output layer  # noqa: E501

        :param classes: The classes of this KerasModelMetadataAllOf.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and classes is None:  # noqa: E501
            raise ValueError("Invalid value for `classes`, must not be `None`")  # noqa: E501

        self._classes = classes

    @property
    def metrics(self):
        """Gets the metrics of this KerasModelMetadataAllOf.  # noqa: E501


        :return: The metrics of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: KerasModelMetadataAllOfMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this KerasModelMetadataAllOf.


        :param metrics: The metrics of this KerasModelMetadataAllOf.  # noqa: E501
        :type: KerasModelMetadataAllOfMetrics
        """
        if self.local_vars_configuration.client_side_validation and metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def confusion_matrix(self):
        """Gets the confusion_matrix of this KerasModelMetadataAllOf.  # noqa: E501


        :return: The confusion_matrix of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._confusion_matrix

    @confusion_matrix.setter
    def confusion_matrix(self, confusion_matrix):
        """Sets the confusion_matrix of this KerasModelMetadataAllOf.


        :param confusion_matrix: The confusion_matrix of this KerasModelMetadataAllOf.  # noqa: E501
        :type: list[list[float]]
        """
        if self.local_vars_configuration.client_side_validation and confusion_matrix is None:  # noqa: E501
            raise ValueError("Invalid value for `confusion_matrix`, must not be `None`")  # noqa: E501

        self._confusion_matrix = confusion_matrix

    @property
    def report(self):
        """Gets the report of this KerasModelMetadataAllOf.  # noqa: E501

        Precision, recall, F1 and support scores  # noqa: E501

        :return: The report of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: object
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this KerasModelMetadataAllOf.

        Precision, recall, F1 and support scores  # noqa: E501

        :param report: The report of this KerasModelMetadataAllOf.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and report is None:  # noqa: E501
            raise ValueError("Invalid value for `report`, must not be `None`")  # noqa: E501

        self._report = report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasModelMetadataAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerasModelMetadataAllOf):
            return True

        return self.to_dict() != other.to_dict()
