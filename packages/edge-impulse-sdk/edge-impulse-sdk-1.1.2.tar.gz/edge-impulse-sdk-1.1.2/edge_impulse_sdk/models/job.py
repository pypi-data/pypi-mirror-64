# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'key': 'str',
        'created': 'datetime',
        'started': 'datetime',
        'finished': 'datetime',
        'finished_successful': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'created': 'created',
        'started': 'started',
        'finished': 'finished',
        'finished_successful': 'finishedSuccessful'
    }

    def __init__(self, id=None, key=None, created=None, started=None, finished=None, finished_successful=None, local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._key = None
        self._created = None
        self._started = None
        self._finished = None
        self._finished_successful = None
        self.discriminator = None

        self.id = id
        self.key = key
        self.created = created
        if started is not None:
            self.started = started
        if finished is not None:
            self.finished = finished
        if finished_successful is not None:
            self.finished_successful = finished_successful

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501

        Job id, use this to refer back to the job. The web socket API also uses this ID.  # noqa: E501

        :return: The id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        Job id, use this to refer back to the job. The web socket API also uses this ID.  # noqa: E501

        :param id: The id of this Job.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def key(self):
        """Gets the key of this Job.  # noqa: E501

        External job identifier, this can be used to categorize jobs, and recover job status. E.g. set this to 'keras-192' for a Keras learning block with ID 192. When a user refreshes the page you can check whether a job is active for this ID and re-attach.   # noqa: E501

        :return: The key of this Job.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Job.

        External job identifier, this can be used to categorize jobs, and recover job status. E.g. set this to 'keras-192' for a Keras learning block with ID 192. When a user refreshes the page you can check whether a job is active for this ID and re-attach.   # noqa: E501

        :param key: The key of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def created(self):
        """Gets the created of this Job.  # noqa: E501

        When the job was created.  # noqa: E501

        :return: The created of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Job.

        When the job was created.  # noqa: E501

        :param created: The created of this Job.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def started(self):
        """Gets the started of this Job.  # noqa: E501

        When the job was started.  # noqa: E501

        :return: The started of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Job.

        When the job was started.  # noqa: E501

        :param started: The started of this Job.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def finished(self):
        """Gets the finished of this Job.  # noqa: E501

        When the job was finished.  # noqa: E501

        :return: The finished of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Job.

        When the job was finished.  # noqa: E501

        :param finished: The finished of this Job.  # noqa: E501
        :type: datetime
        """

        self._finished = finished

    @property
    def finished_successful(self):
        """Gets the finished_successful of this Job.  # noqa: E501

        Whether the job finished successfully.  # noqa: E501

        :return: The finished_successful of this Job.  # noqa: E501
        :rtype: bool
        """
        return self._finished_successful

    @finished_successful.setter
    def finished_successful(self, finished_successful):
        """Sets the finished_successful of this Job.

        Whether the job finished successfully.  # noqa: E501

        :param finished_successful: The finished_successful of this Job.  # noqa: E501
        :type: bool
        """

        self._finished_successful = finished_successful

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
