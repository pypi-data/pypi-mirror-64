# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class DspRunGraph(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'image': 'str',
        'image_mime_type': 'str',
        'x': 'dict(str, list[float])',
        'y': 'list[float]',
        'suggested_x_min': 'float',
        'suggested_x_max': 'float',
        'suggested_y_min': 'float',
        'suggested_y_max': 'float',
        'type': 'str',
        'line_width': 'float'
    }

    attribute_map = {
        'name': 'name',
        'image': 'image',
        'image_mime_type': 'imageMimeType',
        'x': 'X',
        'y': 'y',
        'suggested_x_min': 'suggestedXMin',
        'suggested_x_max': 'suggestedXMax',
        'suggested_y_min': 'suggestedYMin',
        'suggested_y_max': 'suggestedYMax',
        'type': 'type',
        'line_width': 'lineWidth'
    }

    def __init__(self, name=None, image=None, image_mime_type=None, x=None, y=None, suggested_x_min=None, suggested_x_max=None, suggested_y_min=None, suggested_y_max=None, type=None, line_width=None, local_vars_configuration=None):  # noqa: E501
        """DspRunGraph - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._image = None
        self._image_mime_type = None
        self._x = None
        self._y = None
        self._suggested_x_min = None
        self._suggested_x_max = None
        self._suggested_y_min = None
        self._suggested_y_max = None
        self._type = None
        self._line_width = None
        self.discriminator = None

        self.name = name
        if image is not None:
            self.image = image
        if image_mime_type is not None:
            self.image_mime_type = image_mime_type
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if suggested_x_min is not None:
            self.suggested_x_min = suggested_x_min
        if suggested_x_max is not None:
            self.suggested_x_max = suggested_x_max
        if suggested_y_min is not None:
            self.suggested_y_min = suggested_y_min
        if suggested_y_max is not None:
            self.suggested_y_max = suggested_y_max
        self.type = type
        if line_width is not None:
            self.line_width = line_width

    @property
    def name(self):
        """Gets the name of this DspRunGraph.  # noqa: E501

        Name of the graph  # noqa: E501

        :return: The name of this DspRunGraph.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DspRunGraph.

        Name of the graph  # noqa: E501

        :param name: The name of this DspRunGraph.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image(self):
        """Gets the image of this DspRunGraph.  # noqa: E501

        Base64 encoded image, only present if type is 'image'  # noqa: E501

        :return: The image of this DspRunGraph.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DspRunGraph.

        Base64 encoded image, only present if type is 'image'  # noqa: E501

        :param image: The image of this DspRunGraph.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_mime_type(self):
        """Gets the image_mime_type of this DspRunGraph.  # noqa: E501

        Mime type of the Base64 encoded image, only present if type is 'image'  # noqa: E501

        :return: The image_mime_type of this DspRunGraph.  # noqa: E501
        :rtype: str
        """
        return self._image_mime_type

    @image_mime_type.setter
    def image_mime_type(self, image_mime_type):
        """Sets the image_mime_type of this DspRunGraph.

        Mime type of the Base64 encoded image, only present if type is 'image'  # noqa: E501

        :param image_mime_type: The image_mime_type of this DspRunGraph.  # noqa: E501
        :type: str
        """

        self._image_mime_type = image_mime_type

    @property
    def x(self):
        """Gets the x of this DspRunGraph.  # noqa: E501

        Values on the x-axis per plot. Key is the name of the raw feature. Present if type is 'logarithmic' or 'linear'.  # noqa: E501

        :return: The x of this DspRunGraph.  # noqa: E501
        :rtype: dict(str, list[float])
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this DspRunGraph.

        Values on the x-axis per plot. Key is the name of the raw feature. Present if type is 'logarithmic' or 'linear'.  # noqa: E501

        :param x: The x of this DspRunGraph.  # noqa: E501
        :type: dict(str, list[float])
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this DspRunGraph.  # noqa: E501

        Values of the y-axis. Present if type is 'logarithmic' or 'linear'.  # noqa: E501

        :return: The y of this DspRunGraph.  # noqa: E501
        :rtype: list[float]
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this DspRunGraph.

        Values of the y-axis. Present if type is 'logarithmic' or 'linear'.  # noqa: E501

        :param y: The y of this DspRunGraph.  # noqa: E501
        :type: list[float]
        """

        self._y = y

    @property
    def suggested_x_min(self):
        """Gets the suggested_x_min of this DspRunGraph.  # noqa: E501

        Suggested minimum value of x-axis  # noqa: E501

        :return: The suggested_x_min of this DspRunGraph.  # noqa: E501
        :rtype: float
        """
        return self._suggested_x_min

    @suggested_x_min.setter
    def suggested_x_min(self, suggested_x_min):
        """Sets the suggested_x_min of this DspRunGraph.

        Suggested minimum value of x-axis  # noqa: E501

        :param suggested_x_min: The suggested_x_min of this DspRunGraph.  # noqa: E501
        :type: float
        """

        self._suggested_x_min = suggested_x_min

    @property
    def suggested_x_max(self):
        """Gets the suggested_x_max of this DspRunGraph.  # noqa: E501

        Suggested maxium value of x-axis  # noqa: E501

        :return: The suggested_x_max of this DspRunGraph.  # noqa: E501
        :rtype: float
        """
        return self._suggested_x_max

    @suggested_x_max.setter
    def suggested_x_max(self, suggested_x_max):
        """Sets the suggested_x_max of this DspRunGraph.

        Suggested maxium value of x-axis  # noqa: E501

        :param suggested_x_max: The suggested_x_max of this DspRunGraph.  # noqa: E501
        :type: float
        """

        self._suggested_x_max = suggested_x_max

    @property
    def suggested_y_min(self):
        """Gets the suggested_y_min of this DspRunGraph.  # noqa: E501

        Suggested minimum value of y-axis  # noqa: E501

        :return: The suggested_y_min of this DspRunGraph.  # noqa: E501
        :rtype: float
        """
        return self._suggested_y_min

    @suggested_y_min.setter
    def suggested_y_min(self, suggested_y_min):
        """Sets the suggested_y_min of this DspRunGraph.

        Suggested minimum value of y-axis  # noqa: E501

        :param suggested_y_min: The suggested_y_min of this DspRunGraph.  # noqa: E501
        :type: float
        """

        self._suggested_y_min = suggested_y_min

    @property
    def suggested_y_max(self):
        """Gets the suggested_y_max of this DspRunGraph.  # noqa: E501

        Suggested maximum value of y-axis  # noqa: E501

        :return: The suggested_y_max of this DspRunGraph.  # noqa: E501
        :rtype: float
        """
        return self._suggested_y_max

    @suggested_y_max.setter
    def suggested_y_max(self, suggested_y_max):
        """Sets the suggested_y_max of this DspRunGraph.

        Suggested maximum value of y-axis  # noqa: E501

        :param suggested_y_max: The suggested_y_max of this DspRunGraph.  # noqa: E501
        :type: float
        """

        self._suggested_y_max = suggested_y_max

    @property
    def type(self):
        """Gets the type of this DspRunGraph.  # noqa: E501

        Type of graph (either `logarithmic`, `linear` or `image`)  # noqa: E501

        :return: The type of this DspRunGraph.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DspRunGraph.

        Type of graph (either `logarithmic`, `linear` or `image`)  # noqa: E501

        :param type: The type of this DspRunGraph.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def line_width(self):
        """Gets the line_width of this DspRunGraph.  # noqa: E501

        Width of the graph line (if type is `logarithmic` or `linear`). Default 3.  # noqa: E501

        :return: The line_width of this DspRunGraph.  # noqa: E501
        :rtype: float
        """
        return self._line_width

    @line_width.setter
    def line_width(self, line_width):
        """Sets the line_width of this DspRunGraph.

        Width of the graph line (if type is `logarithmic` or `linear`). Default 3.  # noqa: E501

        :param line_width: The line_width of this DspRunGraph.  # noqa: E501
        :type: float
        """

        self._line_width = line_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DspRunGraph):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DspRunGraph):
            return True

        return self.to_dict() != other.to_dict()
