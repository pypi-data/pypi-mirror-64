# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class DSPMetadataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success': 'bool',
        'error': 'str',
        'created': 'datetime',
        'dsp_config': 'dict(str, str)',
        'labels': 'list[str]',
        'feature_labels': 'list[str]',
        'window_count': 'int',
        'feature_count': 'int',
        'included_samples': 'list[DSPMetadataIncludedSamples]',
        'window_size_ms': 'int',
        'window_increase_ms': 'int'
    }

    attribute_map = {
        'success': 'success',
        'error': 'error',
        'created': 'created',
        'dsp_config': 'dspConfig',
        'labels': 'labels',
        'feature_labels': 'featureLabels',
        'window_count': 'windowCount',
        'feature_count': 'featureCount',
        'included_samples': 'includedSamples',
        'window_size_ms': 'windowSizeMs',
        'window_increase_ms': 'windowIncreaseMs'
    }

    def __init__(self, success=None, error=None, created=None, dsp_config=None, labels=None, feature_labels=None, window_count=None, feature_count=None, included_samples=None, window_size_ms=None, window_increase_ms=None, local_vars_configuration=None):  # noqa: E501
        """DSPMetadataResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._success = None
        self._error = None
        self._created = None
        self._dsp_config = None
        self._labels = None
        self._feature_labels = None
        self._window_count = None
        self._feature_count = None
        self._included_samples = None
        self._window_size_ms = None
        self._window_increase_ms = None
        self.discriminator = None

        self.success = success
        if error is not None:
            self.error = error
        self.created = created
        self.dsp_config = dsp_config
        self.labels = labels
        self.feature_labels = feature_labels
        self.window_count = window_count
        self.feature_count = feature_count
        self.included_samples = included_samples
        self.window_size_ms = window_size_ms
        self.window_increase_ms = window_increase_ms

    @property
    def success(self):
        """Gets the success of this DSPMetadataResponse.  # noqa: E501

        Whether the operation succeeded  # noqa: E501

        :return: The success of this DSPMetadataResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this DSPMetadataResponse.

        Whether the operation succeeded  # noqa: E501

        :param success: The success of this DSPMetadataResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and success is None:  # noqa: E501
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def error(self):
        """Gets the error of this DSPMetadataResponse.  # noqa: E501

        Optional error description (set if 'success' was false)  # noqa: E501

        :return: The error of this DSPMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DSPMetadataResponse.

        Optional error description (set if 'success' was false)  # noqa: E501

        :param error: The error of this DSPMetadataResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def created(self):
        """Gets the created of this DSPMetadataResponse.  # noqa: E501

        Date when the features were created  # noqa: E501

        :return: The created of this DSPMetadataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DSPMetadataResponse.

        Date when the features were created  # noqa: E501

        :param created: The created of this DSPMetadataResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def dsp_config(self):
        """Gets the dsp_config of this DSPMetadataResponse.  # noqa: E501


        :return: The dsp_config of this DSPMetadataResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dsp_config

    @dsp_config.setter
    def dsp_config(self, dsp_config):
        """Sets the dsp_config of this DSPMetadataResponse.


        :param dsp_config: The dsp_config of this DSPMetadataResponse.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and dsp_config is None:  # noqa: E501
            raise ValueError("Invalid value for `dsp_config`, must not be `None`")  # noqa: E501

        self._dsp_config = dsp_config

    @property
    def labels(self):
        """Gets the labels of this DSPMetadataResponse.  # noqa: E501

        Labels in the dataset when generator ran  # noqa: E501

        :return: The labels of this DSPMetadataResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DSPMetadataResponse.

        Labels in the dataset when generator ran  # noqa: E501

        :param labels: The labels of this DSPMetadataResponse.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and labels is None:  # noqa: E501
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def feature_labels(self):
        """Gets the feature_labels of this DSPMetadataResponse.  # noqa: E501

        Names of the generated features  # noqa: E501

        :return: The feature_labels of this DSPMetadataResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature_labels

    @feature_labels.setter
    def feature_labels(self, feature_labels):
        """Sets the feature_labels of this DSPMetadataResponse.

        Names of the generated features  # noqa: E501

        :param feature_labels: The feature_labels of this DSPMetadataResponse.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and feature_labels is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_labels`, must not be `None`")  # noqa: E501

        self._feature_labels = feature_labels

    @property
    def window_count(self):
        """Gets the window_count of this DSPMetadataResponse.  # noqa: E501


        :return: The window_count of this DSPMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._window_count

    @window_count.setter
    def window_count(self, window_count):
        """Sets the window_count of this DSPMetadataResponse.


        :param window_count: The window_count of this DSPMetadataResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and window_count is None:  # noqa: E501
            raise ValueError("Invalid value for `window_count`, must not be `None`")  # noqa: E501

        self._window_count = window_count

    @property
    def feature_count(self):
        """Gets the feature_count of this DSPMetadataResponse.  # noqa: E501

        Number of features for this DSP block  # noqa: E501

        :return: The feature_count of this DSPMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._feature_count

    @feature_count.setter
    def feature_count(self, feature_count):
        """Sets the feature_count of this DSPMetadataResponse.

        Number of features for this DSP block  # noqa: E501

        :param feature_count: The feature_count of this DSPMetadataResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and feature_count is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_count`, must not be `None`")  # noqa: E501

        self._feature_count = feature_count

    @property
    def included_samples(self):
        """Gets the included_samples of this DSPMetadataResponse.  # noqa: E501

        The included samples in this DSP block. Note that these are sorted in the same way as the `npy` files are laid out. So with the `windowCount` parameter you can exactly search back to see which file contributed to which windows there.  # noqa: E501

        :return: The included_samples of this DSPMetadataResponse.  # noqa: E501
        :rtype: list[DSPMetadataIncludedSamples]
        """
        return self._included_samples

    @included_samples.setter
    def included_samples(self, included_samples):
        """Sets the included_samples of this DSPMetadataResponse.

        The included samples in this DSP block. Note that these are sorted in the same way as the `npy` files are laid out. So with the `windowCount` parameter you can exactly search back to see which file contributed to which windows there.  # noqa: E501

        :param included_samples: The included_samples of this DSPMetadataResponse.  # noqa: E501
        :type: list[DSPMetadataIncludedSamples]
        """
        if self.local_vars_configuration.client_side_validation and included_samples is None:  # noqa: E501
            raise ValueError("Invalid value for `included_samples`, must not be `None`")  # noqa: E501

        self._included_samples = included_samples

    @property
    def window_size_ms(self):
        """Gets the window_size_ms of this DSPMetadataResponse.  # noqa: E501

        Length of the sliding window when generating features.  # noqa: E501

        :return: The window_size_ms of this DSPMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._window_size_ms

    @window_size_ms.setter
    def window_size_ms(self, window_size_ms):
        """Sets the window_size_ms of this DSPMetadataResponse.

        Length of the sliding window when generating features.  # noqa: E501

        :param window_size_ms: The window_size_ms of this DSPMetadataResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and window_size_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `window_size_ms`, must not be `None`")  # noqa: E501

        self._window_size_ms = window_size_ms

    @property
    def window_increase_ms(self):
        """Gets the window_increase_ms of this DSPMetadataResponse.  # noqa: E501

        Increase of the sliding window when generating features.  # noqa: E501

        :return: The window_increase_ms of this DSPMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._window_increase_ms

    @window_increase_ms.setter
    def window_increase_ms(self, window_increase_ms):
        """Sets the window_increase_ms of this DSPMetadataResponse.

        Increase of the sliding window when generating features.  # noqa: E501

        :param window_increase_ms: The window_increase_ms of this DSPMetadataResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and window_increase_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `window_increase_ms`, must not be `None`")  # noqa: E501

        self._window_increase_ms = window_increase_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSPMetadataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSPMetadataResponse):
            return True

        return self.to_dict() != other.to_dict()
