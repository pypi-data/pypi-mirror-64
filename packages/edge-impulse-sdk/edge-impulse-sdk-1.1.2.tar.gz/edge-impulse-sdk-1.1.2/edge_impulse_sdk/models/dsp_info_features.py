# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class DSPInfoFeatures(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'generated': 'bool',
        'count': 'int',
        'labels': 'list[str]'
    }

    attribute_map = {
        'generated': 'generated',
        'count': 'count',
        'labels': 'labels'
    }

    def __init__(self, generated=None, count=None, labels=None, local_vars_configuration=None):  # noqa: E501
        """DSPInfoFeatures - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._generated = None
        self._count = None
        self._labels = None
        self.discriminator = None

        self.generated = generated
        if count is not None:
            self.count = count
        if labels is not None:
            self.labels = labels

    @property
    def generated(self):
        """Gets the generated of this DSPInfoFeatures.  # noqa: E501

        Whether this block has generated features  # noqa: E501

        :return: The generated of this DSPInfoFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this DSPInfoFeatures.

        Whether this block has generated features  # noqa: E501

        :param generated: The generated of this DSPInfoFeatures.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and generated is None:  # noqa: E501
            raise ValueError("Invalid value for `generated`, must not be `None`")  # noqa: E501

        self._generated = generated

    @property
    def count(self):
        """Gets the count of this DSPInfoFeatures.  # noqa: E501

        Number of generated features  # noqa: E501

        :return: The count of this DSPInfoFeatures.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DSPInfoFeatures.

        Number of generated features  # noqa: E501

        :param count: The count of this DSPInfoFeatures.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def labels(self):
        """Gets the labels of this DSPInfoFeatures.  # noqa: E501

        Names of the features  # noqa: E501

        :return: The labels of this DSPInfoFeatures.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DSPInfoFeatures.

        Names of the features  # noqa: E501

        :param labels: The labels of this DSPInfoFeatures.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSPInfoFeatures):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSPInfoFeatures):
            return True

        return self.to_dict() != other.to_dict()
