# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class DSPGroupItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'value': 'str',
        'type': 'str',
        'help': 'str',
        'param': 'str',
        'select_options': 'list[DSPGroupItemSelectOptions]'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'type': 'type',
        'help': 'help',
        'param': 'param',
        'select_options': 'selectOptions'
    }

    def __init__(self, name=None, value=None, type=None, help=None, param=None, select_options=None, local_vars_configuration=None):  # noqa: E501
        """DSPGroupItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._value = None
        self._type = None
        self._help = None
        self._param = None
        self._select_options = None
        self.discriminator = None

        self.name = name
        self.value = value
        self.type = type
        self.help = help
        self.param = param
        if select_options is not None:
            self.select_options = select_options

    @property
    def name(self):
        """Gets the name of this DSPGroupItem.  # noqa: E501


        :return: The name of this DSPGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DSPGroupItem.


        :param name: The name of this DSPGroupItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this DSPGroupItem.  # noqa: E501


        :return: The value of this DSPGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DSPGroupItem.


        :param value: The value of this DSPGroupItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def type(self):
        """Gets the type of this DSPGroupItem.  # noqa: E501


        :return: The type of this DSPGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DSPGroupItem.


        :param type: The type of this DSPGroupItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def help(self):
        """Gets the help of this DSPGroupItem.  # noqa: E501


        :return: The help of this DSPGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this DSPGroupItem.


        :param help: The help of this DSPGroupItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and help is None:  # noqa: E501
            raise ValueError("Invalid value for `help`, must not be `None`")  # noqa: E501

        self._help = help

    @property
    def param(self):
        """Gets the param of this DSPGroupItem.  # noqa: E501


        :return: The param of this DSPGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this DSPGroupItem.


        :param param: The param of this DSPGroupItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and param is None:  # noqa: E501
            raise ValueError("Invalid value for `param`, must not be `None`")  # noqa: E501

        self._param = param

    @property
    def select_options(self):
        """Gets the select_options of this DSPGroupItem.  # noqa: E501


        :return: The select_options of this DSPGroupItem.  # noqa: E501
        :rtype: list[DSPGroupItemSelectOptions]
        """
        return self._select_options

    @select_options.setter
    def select_options(self, select_options):
        """Sets the select_options of this DSPGroupItem.


        :param select_options: The select_options of this DSPGroupItem.  # noqa: E501
        :type: list[DSPGroupItemSelectOptions]
        """

        self._select_options = select_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSPGroupItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSPGroupItem):
            return True

        return self.to_dict() != other.to_dict()
