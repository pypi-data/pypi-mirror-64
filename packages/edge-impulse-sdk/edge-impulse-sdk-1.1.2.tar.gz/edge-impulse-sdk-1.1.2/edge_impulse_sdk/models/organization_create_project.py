# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OrganizationCreateProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filter': 'str',
        'project_api_key': 'str',
        'project_hmac_key': 'str',
        'length_per_sample': 'int',
        'mapping_file': 'str',
        'category': 'str'
    }

    attribute_map = {
        'filter': 'filter',
        'project_api_key': 'projectApiKey',
        'project_hmac_key': 'projectHmacKey',
        'length_per_sample': 'lengthPerSample',
        'mapping_file': 'mappingFile',
        'category': 'category'
    }

    def __init__(self, filter=None, project_api_key=None, project_hmac_key=None, length_per_sample=None, mapping_file=None, category=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationCreateProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filter = None
        self._project_api_key = None
        self._project_hmac_key = None
        self._length_per_sample = None
        self._mapping_file = None
        self._category = None
        self.discriminator = None

        self.filter = filter
        self.project_api_key = project_api_key
        self.project_hmac_key = project_hmac_key
        self.length_per_sample = length_per_sample
        self.mapping_file = mapping_file
        self.category = category

    @property
    def filter(self):
        """Gets the filter of this OrganizationCreateProject.  # noqa: E501


        :return: The filter of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this OrganizationCreateProject.


        :param filter: The filter of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filter is None:  # noqa: E501
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    @property
    def project_api_key(self):
        """Gets the project_api_key of this OrganizationCreateProject.  # noqa: E501


        :return: The project_api_key of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._project_api_key

    @project_api_key.setter
    def project_api_key(self, project_api_key):
        """Sets the project_api_key of this OrganizationCreateProject.


        :param project_api_key: The project_api_key of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_api_key is None:  # noqa: E501
            raise ValueError("Invalid value for `project_api_key`, must not be `None`")  # noqa: E501

        self._project_api_key = project_api_key

    @property
    def project_hmac_key(self):
        """Gets the project_hmac_key of this OrganizationCreateProject.  # noqa: E501


        :return: The project_hmac_key of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._project_hmac_key

    @project_hmac_key.setter
    def project_hmac_key(self, project_hmac_key):
        """Sets the project_hmac_key of this OrganizationCreateProject.


        :param project_hmac_key: The project_hmac_key of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_hmac_key is None:  # noqa: E501
            raise ValueError("Invalid value for `project_hmac_key`, must not be `None`")  # noqa: E501

        self._project_hmac_key = project_hmac_key

    @property
    def length_per_sample(self):
        """Gets the length_per_sample of this OrganizationCreateProject.  # noqa: E501


        :return: The length_per_sample of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._length_per_sample

    @length_per_sample.setter
    def length_per_sample(self, length_per_sample):
        """Sets the length_per_sample of this OrganizationCreateProject.


        :param length_per_sample: The length_per_sample of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and length_per_sample is None:  # noqa: E501
            raise ValueError("Invalid value for `length_per_sample`, must not be `None`")  # noqa: E501

        self._length_per_sample = length_per_sample

    @property
    def mapping_file(self):
        """Gets the mapping_file of this OrganizationCreateProject.  # noqa: E501


        :return: The mapping_file of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._mapping_file

    @mapping_file.setter
    def mapping_file(self, mapping_file):
        """Sets the mapping_file of this OrganizationCreateProject.


        :param mapping_file: The mapping_file of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mapping_file is None:  # noqa: E501
            raise ValueError("Invalid value for `mapping_file`, must not be `None`")  # noqa: E501

        self._mapping_file = mapping_file

    @property
    def category(self):
        """Gets the category of this OrganizationCreateProject.  # noqa: E501


        :return: The category of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OrganizationCreateProject.


        :param category: The category of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["training", "testing", "split"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationCreateProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationCreateProject):
            return True

        return self.to_dict() != other.to_dict()
