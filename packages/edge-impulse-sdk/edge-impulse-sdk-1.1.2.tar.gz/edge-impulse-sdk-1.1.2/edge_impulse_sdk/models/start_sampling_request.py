# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class StartSamplingRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'label': 'str',
        'length_ms': 'int',
        'category': 'str',
        'interval_ms': 'float',
        'sensor': 'str'
    }

    attribute_map = {
        'label': 'label',
        'length_ms': 'lengthMs',
        'category': 'category',
        'interval_ms': 'intervalMs',
        'sensor': 'sensor'
    }

    def __init__(self, label=None, length_ms=None, category=None, interval_ms=None, sensor=None, local_vars_configuration=None):  # noqa: E501
        """StartSamplingRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._label = None
        self._length_ms = None
        self._category = None
        self._interval_ms = None
        self._sensor = None
        self.discriminator = None

        self.label = label
        self.length_ms = length_ms
        self.category = category
        self.interval_ms = interval_ms
        if sensor is not None:
            self.sensor = sensor

    @property
    def label(self):
        """Gets the label of this StartSamplingRequest.  # noqa: E501

        Label to be used during sampling.  # noqa: E501

        :return: The label of this StartSamplingRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this StartSamplingRequest.

        Label to be used during sampling.  # noqa: E501

        :param label: The label of this StartSamplingRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def length_ms(self):
        """Gets the length_ms of this StartSamplingRequest.  # noqa: E501

        Requested length of the sample (in ms).  # noqa: E501

        :return: The length_ms of this StartSamplingRequest.  # noqa: E501
        :rtype: int
        """
        return self._length_ms

    @length_ms.setter
    def length_ms(self, length_ms):
        """Sets the length_ms of this StartSamplingRequest.

        Requested length of the sample (in ms).  # noqa: E501

        :param length_ms: The length_ms of this StartSamplingRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and length_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `length_ms`, must not be `None`")  # noqa: E501

        self._length_ms = length_ms

    @property
    def category(self):
        """Gets the category of this StartSamplingRequest.  # noqa: E501

        Which acquisition category to sample data into.  # noqa: E501

        :return: The category of this StartSamplingRequest.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StartSamplingRequest.

        Which acquisition category to sample data into.  # noqa: E501

        :param category: The category of this StartSamplingRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["training", "testing", "anomaly"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def interval_ms(self):
        """Gets the interval_ms of this StartSamplingRequest.  # noqa: E501

        Interval between samples (can be calculated like `1/hz * 1000`)  # noqa: E501

        :return: The interval_ms of this StartSamplingRequest.  # noqa: E501
        :rtype: float
        """
        return self._interval_ms

    @interval_ms.setter
    def interval_ms(self, interval_ms):
        """Sets the interval_ms of this StartSamplingRequest.

        Interval between samples (can be calculated like `1/hz * 1000`)  # noqa: E501

        :param interval_ms: The interval_ms of this StartSamplingRequest.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and interval_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `interval_ms`, must not be `None`")  # noqa: E501

        self._interval_ms = interval_ms

    @property
    def sensor(self):
        """Gets the sensor of this StartSamplingRequest.  # noqa: E501

        The sensor to sample from.  # noqa: E501

        :return: The sensor of this StartSamplingRequest.  # noqa: E501
        :rtype: str
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor):
        """Sets the sensor of this StartSamplingRequest.

        The sensor to sample from.  # noqa: E501

        :param sensor: The sensor of this StartSamplingRequest.  # noqa: E501
        :type: str
        """

        self._sensor = sensor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartSamplingRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StartSamplingRequest):
            return True

        return self.to_dict() != other.to_dict()
