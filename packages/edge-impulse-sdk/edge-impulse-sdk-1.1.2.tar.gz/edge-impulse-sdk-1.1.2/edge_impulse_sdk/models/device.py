# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class Device(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'device_id': 'str',
        'created': 'datetime',
        'last_seen': 'datetime',
        'name': 'str',
        'device_type': 'str',
        'sensors': 'list[DeviceSensors]',
        'remote_mgmt_connected': 'bool',
        'remote_mgmt_host': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device_id': 'deviceId',
        'created': 'created',
        'last_seen': 'lastSeen',
        'name': 'name',
        'device_type': 'deviceType',
        'sensors': 'sensors',
        'remote_mgmt_connected': 'remote_mgmt_connected',
        'remote_mgmt_host': 'remote_mgmt_host'
    }

    def __init__(self, id=None, device_id=None, created=None, last_seen=None, name=None, device_type=None, sensors=None, remote_mgmt_connected=None, remote_mgmt_host=None, local_vars_configuration=None):  # noqa: E501
        """Device - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._device_id = None
        self._created = None
        self._last_seen = None
        self._name = None
        self._device_type = None
        self._sensors = None
        self._remote_mgmt_connected = None
        self._remote_mgmt_host = None
        self.discriminator = None

        self.id = id
        self.device_id = device_id
        self.created = created
        self.last_seen = last_seen
        self.name = name
        self.device_type = device_type
        self.sensors = sensors
        self.remote_mgmt_connected = remote_mgmt_connected
        if remote_mgmt_host is not None:
            self.remote_mgmt_host = remote_mgmt_host

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501


        :return: The id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this Device.  # noqa: E501

        Unique identifier (such as MAC address) for a device  # noqa: E501

        :return: The device_id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Device.

        Unique identifier (such as MAC address) for a device  # noqa: E501

        :param device_id: The device_id of this Device.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device_id is None:  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def created(self):
        """Gets the created of this Device.  # noqa: E501


        :return: The created of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Device.


        :param created: The created of this Device.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def last_seen(self):
        """Gets the last_seen of this Device.  # noqa: E501

        Last message that was received from the device (ignoring keep-alive)  # noqa: E501

        :return: The last_seen of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Device.

        Last message that was received from the device (ignoring keep-alive)  # noqa: E501

        :param last_seen: The last_seen of this Device.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and last_seen is None:  # noqa: E501
            raise ValueError("Invalid value for `last_seen`, must not be `None`")  # noqa: E501

        self._last_seen = last_seen

    @property
    def name(self):
        """Gets the name of this Device.  # noqa: E501


        :return: The name of this Device.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def device_type(self):
        """Gets the device_type of this Device.  # noqa: E501


        :return: The device_type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Device.


        :param device_type: The device_type of this Device.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device_type is None:  # noqa: E501
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501

        self._device_type = device_type

    @property
    def sensors(self):
        """Gets the sensors of this Device.  # noqa: E501


        :return: The sensors of this Device.  # noqa: E501
        :rtype: list[DeviceSensors]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this Device.


        :param sensors: The sensors of this Device.  # noqa: E501
        :type: list[DeviceSensors]
        """
        if self.local_vars_configuration.client_side_validation and sensors is None:  # noqa: E501
            raise ValueError("Invalid value for `sensors`, must not be `None`")  # noqa: E501

        self._sensors = sensors

    @property
    def remote_mgmt_connected(self):
        """Gets the remote_mgmt_connected of this Device.  # noqa: E501

        Whether the device is connected to the remote management interface  # noqa: E501

        :return: The remote_mgmt_connected of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._remote_mgmt_connected

    @remote_mgmt_connected.setter
    def remote_mgmt_connected(self, remote_mgmt_connected):
        """Sets the remote_mgmt_connected of this Device.

        Whether the device is connected to the remote management interface  # noqa: E501

        :param remote_mgmt_connected: The remote_mgmt_connected of this Device.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and remote_mgmt_connected is None:  # noqa: E501
            raise ValueError("Invalid value for `remote_mgmt_connected`, must not be `None`")  # noqa: E501

        self._remote_mgmt_connected = remote_mgmt_connected

    @property
    def remote_mgmt_host(self):
        """Gets the remote_mgmt_host of this Device.  # noqa: E501

        The remote management host that the device is connected to  # noqa: E501

        :return: The remote_mgmt_host of this Device.  # noqa: E501
        :rtype: str
        """
        return self._remote_mgmt_host

    @remote_mgmt_host.setter
    def remote_mgmt_host(self, remote_mgmt_host):
        """Sets the remote_mgmt_host of this Device.

        The remote management host that the device is connected to  # noqa: E501

        :param remote_mgmt_host: The remote_mgmt_host of this Device.  # noqa: E501
        :type: str
        """

        self._remote_mgmt_host = remote_mgmt_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Device):
            return True

        return self.to_dict() != other.to_dict()
