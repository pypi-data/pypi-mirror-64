# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class DspRunRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'features': 'list[float]',
        'params': 'dict(str, str)',
        'interval_ms': 'int',
        'store': 'bool'
    }

    attribute_map = {
        'features': 'features',
        'params': 'params',
        'interval_ms': 'intervalMs',
        'store': 'store'
    }

    def __init__(self, features=None, params=None, interval_ms=None, store=None, local_vars_configuration=None):  # noqa: E501
        """DspRunRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._features = None
        self._params = None
        self._interval_ms = None
        self._store = None
        self.discriminator = None

        self.features = features
        self.params = params
        self.interval_ms = interval_ms
        self.store = store

    @property
    def features(self):
        """Gets the features of this DspRunRequest.  # noqa: E501

        Array of flattened raw features. E.g. if you have 3 frames with 2 axes AccX, AccY lay it out like `AccX[0], AccY[0], AccX[1], AccY[1], AccX[2], AccY[2]`  # noqa: E501

        :return: The features of this DspRunRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DspRunRequest.

        Array of flattened raw features. E.g. if you have 3 frames with 2 axes AccX, AccY lay it out like `AccX[0], AccY[0], AccX[1], AccY[1], AccX[2], AccY[2]`  # noqa: E501

        :param features: The features of this DspRunRequest.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and features is None:  # noqa: E501
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def params(self):
        """Gets the params of this DspRunRequest.  # noqa: E501

        DSP parameters with values  # noqa: E501

        :return: The params of this DspRunRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this DspRunRequest.

        DSP parameters with values  # noqa: E501

        :param params: The params of this DspRunRequest.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and params is None:  # noqa: E501
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    @property
    def interval_ms(self):
        """Gets the interval_ms of this DspRunRequest.  # noqa: E501

        Interval between data frames in this sample  # noqa: E501

        :return: The interval_ms of this DspRunRequest.  # noqa: E501
        :rtype: int
        """
        return self._interval_ms

    @interval_ms.setter
    def interval_ms(self, interval_ms):
        """Sets the interval_ms of this DspRunRequest.

        Interval between data frames in this sample  # noqa: E501

        :param interval_ms: The interval_ms of this DspRunRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and interval_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `interval_ms`, must not be `None`")  # noqa: E501

        self._interval_ms = interval_ms

    @property
    def store(self):
        """Gets the store of this DspRunRequest.  # noqa: E501

        Whether to store the DSP parameters as the new default parameters.  # noqa: E501

        :return: The store of this DspRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this DspRunRequest.

        Whether to store the DSP parameters as the new default parameters.  # noqa: E501

        :param store: The store of this DspRunRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and store is None:  # noqa: E501
            raise ValueError("Invalid value for `store`, must not be `None`")  # noqa: E501

        self._store = store

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DspRunRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DspRunRequest):
            return True

        return self.to_dict() != other.to_dict()
