# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class GetUserResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success': 'bool',
        'error': 'str',
        'id': 'int',
        'username': 'str',
        'name': 'str',
        'photo': 'str',
        'created': 'datetime',
        'email': 'str',
        'activated': 'bool',
        'organizations': 'list[GetUserResponseAllOfOrganizations]',
        'projects': 'list[Project]'
    }

    attribute_map = {
        'success': 'success',
        'error': 'error',
        'id': 'id',
        'username': 'username',
        'name': 'name',
        'photo': 'photo',
        'created': 'created',
        'email': 'email',
        'activated': 'activated',
        'organizations': 'organizations',
        'projects': 'projects'
    }

    def __init__(self, success=None, error=None, id=None, username=None, name=None, photo=None, created=None, email=None, activated=None, organizations=None, projects=None, local_vars_configuration=None):  # noqa: E501
        """GetUserResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._success = None
        self._error = None
        self._id = None
        self._username = None
        self._name = None
        self._photo = None
        self._created = None
        self._email = None
        self._activated = None
        self._organizations = None
        self._projects = None
        self.discriminator = None

        self.success = success
        if error is not None:
            self.error = error
        self.id = id
        self.username = username
        self.name = name
        if photo is not None:
            self.photo = photo
        self.created = created
        self.email = email
        self.activated = activated
        self.organizations = organizations
        self.projects = projects

    @property
    def success(self):
        """Gets the success of this GetUserResponse.  # noqa: E501

        Whether the operation succeeded  # noqa: E501

        :return: The success of this GetUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GetUserResponse.

        Whether the operation succeeded  # noqa: E501

        :param success: The success of this GetUserResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and success is None:  # noqa: E501
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def error(self):
        """Gets the error of this GetUserResponse.  # noqa: E501

        Optional error description (set if 'success' was false)  # noqa: E501

        :return: The error of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GetUserResponse.

        Optional error description (set if 'success' was false)  # noqa: E501

        :param error: The error of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this GetUserResponse.  # noqa: E501


        :return: The id of this GetUserResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetUserResponse.


        :param id: The id of this GetUserResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self):
        """Gets the username of this GetUserResponse.  # noqa: E501


        :return: The username of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GetUserResponse.


        :param username: The username of this GetUserResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def name(self):
        """Gets the name of this GetUserResponse.  # noqa: E501


        :return: The name of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUserResponse.


        :param name: The name of this GetUserResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def photo(self):
        """Gets the photo of this GetUserResponse.  # noqa: E501


        :return: The photo of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this GetUserResponse.


        :param photo: The photo of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def created(self):
        """Gets the created of this GetUserResponse.  # noqa: E501


        :return: The created of this GetUserResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GetUserResponse.


        :param created: The created of this GetUserResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def email(self):
        """Gets the email of this GetUserResponse.  # noqa: E501


        :return: The email of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetUserResponse.


        :param email: The email of this GetUserResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def activated(self):
        """Gets the activated of this GetUserResponse.  # noqa: E501


        :return: The activated of this GetUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this GetUserResponse.


        :param activated: The activated of this GetUserResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and activated is None:  # noqa: E501
            raise ValueError("Invalid value for `activated`, must not be `None`")  # noqa: E501

        self._activated = activated

    @property
    def organizations(self):
        """Gets the organizations of this GetUserResponse.  # noqa: E501

        Organizations that the user is a member of. Only filled when requesting information about yourself.  # noqa: E501

        :return: The organizations of this GetUserResponse.  # noqa: E501
        :rtype: list[GetUserResponseAllOfOrganizations]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this GetUserResponse.

        Organizations that the user is a member of. Only filled when requesting information about yourself.  # noqa: E501

        :param organizations: The organizations of this GetUserResponse.  # noqa: E501
        :type: list[GetUserResponseAllOfOrganizations]
        """
        if self.local_vars_configuration.client_side_validation and organizations is None:  # noqa: E501
            raise ValueError("Invalid value for `organizations`, must not be `None`")  # noqa: E501

        self._organizations = organizations

    @property
    def projects(self):
        """Gets the projects of this GetUserResponse.  # noqa: E501


        :return: The projects of this GetUserResponse.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this GetUserResponse.


        :param projects: The projects of this GetUserResponse.  # noqa: E501
        :type: list[Project]
        """
        if self.local_vars_configuration.client_side_validation and projects is None:  # noqa: E501
            raise ValueError("Invalid value for `projects`, must not be `None`")  # noqa: E501

        self._projects = projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUserResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetUserResponse):
            return True

        return self.to_dict() != other.to_dict()
