# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class SetKerasParameterRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mode': 'str',
        'minimum_confidence_rating': 'float',
        'script': 'str',
        'visual_layers': 'list[KerasVisualLayer]',
        'training_cycles': 'int',
        'learning_rate': 'float'
    }

    attribute_map = {
        'mode': 'mode',
        'minimum_confidence_rating': 'minimumConfidenceRating',
        'script': 'script',
        'visual_layers': 'visualLayers',
        'training_cycles': 'trainingCycles',
        'learning_rate': 'learningRate'
    }

    def __init__(self, mode=None, minimum_confidence_rating=None, script=None, visual_layers=None, training_cycles=None, learning_rate=None, local_vars_configuration=None):  # noqa: E501
        """SetKerasParameterRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mode = None
        self._minimum_confidence_rating = None
        self._script = None
        self._visual_layers = None
        self._training_cycles = None
        self._learning_rate = None
        self.discriminator = None

        if mode is not None:
            self.mode = mode
        if minimum_confidence_rating is not None:
            self.minimum_confidence_rating = minimum_confidence_rating
        if script is not None:
            self.script = script
        if visual_layers is not None:
            self.visual_layers = visual_layers
        if training_cycles is not None:
            self.training_cycles = training_cycles
        if learning_rate is not None:
            self.learning_rate = learning_rate

    @property
    def mode(self):
        """Gets the mode of this SetKerasParameterRequest.  # noqa: E501

        Whether to use visual or expert mode.  # noqa: E501

        :return: The mode of this SetKerasParameterRequest.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SetKerasParameterRequest.

        Whether to use visual or expert mode.  # noqa: E501

        :param mode: The mode of this SetKerasParameterRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["expert", "visual"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def minimum_confidence_rating(self):
        """Gets the minimum_confidence_rating of this SetKerasParameterRequest.  # noqa: E501

        Minimum confidence score, if the neural network scores a sample below this threshold it will be flagged as uncertain.  # noqa: E501

        :return: The minimum_confidence_rating of this SetKerasParameterRequest.  # noqa: E501
        :rtype: float
        """
        return self._minimum_confidence_rating

    @minimum_confidence_rating.setter
    def minimum_confidence_rating(self, minimum_confidence_rating):
        """Sets the minimum_confidence_rating of this SetKerasParameterRequest.

        Minimum confidence score, if the neural network scores a sample below this threshold it will be flagged as uncertain.  # noqa: E501

        :param minimum_confidence_rating: The minimum_confidence_rating of this SetKerasParameterRequest.  # noqa: E501
        :type: float
        """

        self._minimum_confidence_rating = minimum_confidence_rating

    @property
    def script(self):
        """Gets the script of this SetKerasParameterRequest.  # noqa: E501

        Raw Keras script (only used in expert mode)  # noqa: E501

        :return: The script of this SetKerasParameterRequest.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this SetKerasParameterRequest.

        Raw Keras script (only used in expert mode)  # noqa: E501

        :param script: The script of this SetKerasParameterRequest.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def visual_layers(self):
        """Gets the visual_layers of this SetKerasParameterRequest.  # noqa: E501

        The visual layers for the neural network (only in visual mode).  # noqa: E501

        :return: The visual_layers of this SetKerasParameterRequest.  # noqa: E501
        :rtype: list[KerasVisualLayer]
        """
        return self._visual_layers

    @visual_layers.setter
    def visual_layers(self, visual_layers):
        """Sets the visual_layers of this SetKerasParameterRequest.

        The visual layers for the neural network (only in visual mode).  # noqa: E501

        :param visual_layers: The visual_layers of this SetKerasParameterRequest.  # noqa: E501
        :type: list[KerasVisualLayer]
        """

        self._visual_layers = visual_layers

    @property
    def training_cycles(self):
        """Gets the training_cycles of this SetKerasParameterRequest.  # noqa: E501

        Number of training cycles (only in visual mode).  # noqa: E501

        :return: The training_cycles of this SetKerasParameterRequest.  # noqa: E501
        :rtype: int
        """
        return self._training_cycles

    @training_cycles.setter
    def training_cycles(self, training_cycles):
        """Sets the training_cycles of this SetKerasParameterRequest.

        Number of training cycles (only in visual mode).  # noqa: E501

        :param training_cycles: The training_cycles of this SetKerasParameterRequest.  # noqa: E501
        :type: int
        """

        self._training_cycles = training_cycles

    @property
    def learning_rate(self):
        """Gets the learning_rate of this SetKerasParameterRequest.  # noqa: E501

        Learning rate (between 0 and 1) (only in visual mode).  # noqa: E501

        :return: The learning_rate of this SetKerasParameterRequest.  # noqa: E501
        :rtype: float
        """
        return self._learning_rate

    @learning_rate.setter
    def learning_rate(self, learning_rate):
        """Sets the learning_rate of this SetKerasParameterRequest.

        Learning rate (between 0 and 1) (only in visual mode).  # noqa: E501

        :param learning_rate: The learning_rate of this SetKerasParameterRequest.  # noqa: E501
        :type: float
        """

        self._learning_rate = learning_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetKerasParameterRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetKerasParameterRequest):
            return True

        return self.to_dict() != other.to_dict()
