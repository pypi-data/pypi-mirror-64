# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ListEmailResponseAllOfEmails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'int',
        'project_id': 'int',
        '_from': 'str',
        'to': 'str',
        'created': 'datetime',
        'subject': 'str',
        'body_text': 'str',
        'body_html': 'str',
        'sent': 'bool',
        'provider_response': 'str'
    }

    attribute_map = {
        'user_id': 'userId',
        'project_id': 'projectId',
        '_from': 'from',
        'to': 'to',
        'created': 'created',
        'subject': 'subject',
        'body_text': 'bodyText',
        'body_html': 'bodyHTML',
        'sent': 'sent',
        'provider_response': 'providerResponse'
    }

    def __init__(self, user_id=None, project_id=None, _from=None, to=None, created=None, subject=None, body_text=None, body_html=None, sent=None, provider_response=None, local_vars_configuration=None):  # noqa: E501
        """ListEmailResponseAllOfEmails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._project_id = None
        self.__from = None
        self._to = None
        self._created = None
        self._subject = None
        self._body_text = None
        self._body_html = None
        self._sent = None
        self._provider_response = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if project_id is not None:
            self.project_id = project_id
        self._from = _from
        self.to = to
        self.created = created
        self.subject = subject
        self.body_text = body_text
        self.body_html = body_html
        self.sent = sent
        self.provider_response = provider_response

    @property
    def user_id(self):
        """Gets the user_id of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The user_id of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ListEmailResponseAllOfEmails.


        :param user_id: The user_id of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def project_id(self):
        """Gets the project_id of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The project_id of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ListEmailResponseAllOfEmails.


        :param project_id: The project_id of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def _from(self):
        """Gets the _from of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The _from of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ListEmailResponseAllOfEmails.


        :param _from: The _from of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and _from is None:  # noqa: E501
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The to of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ListEmailResponseAllOfEmails.


        :param to: The to of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and to is None:  # noqa: E501
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def created(self):
        """Gets the created of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The created of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ListEmailResponseAllOfEmails.


        :param created: The created of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def subject(self):
        """Gets the subject of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The subject of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ListEmailResponseAllOfEmails.


        :param subject: The subject of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and subject is None:  # noqa: E501
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body_text(self):
        """Gets the body_text of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The body_text of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: str
        """
        return self._body_text

    @body_text.setter
    def body_text(self, body_text):
        """Sets the body_text of this ListEmailResponseAllOfEmails.


        :param body_text: The body_text of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and body_text is None:  # noqa: E501
            raise ValueError("Invalid value for `body_text`, must not be `None`")  # noqa: E501

        self._body_text = body_text

    @property
    def body_html(self):
        """Gets the body_html of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The body_html of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this ListEmailResponseAllOfEmails.


        :param body_html: The body_html of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and body_html is None:  # noqa: E501
            raise ValueError("Invalid value for `body_html`, must not be `None`")  # noqa: E501

        self._body_html = body_html

    @property
    def sent(self):
        """Gets the sent of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The sent of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this ListEmailResponseAllOfEmails.


        :param sent: The sent of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and sent is None:  # noqa: E501
            raise ValueError("Invalid value for `sent`, must not be `None`")  # noqa: E501

        self._sent = sent

    @property
    def provider_response(self):
        """Gets the provider_response of this ListEmailResponseAllOfEmails.  # noqa: E501


        :return: The provider_response of this ListEmailResponseAllOfEmails.  # noqa: E501
        :rtype: str
        """
        return self._provider_response

    @provider_response.setter
    def provider_response(self, provider_response):
        """Sets the provider_response of this ListEmailResponseAllOfEmails.


        :param provider_response: The provider_response of this ListEmailResponseAllOfEmails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and provider_response is None:  # noqa: E501
            raise ValueError("Invalid value for `provider_response`, must not be `None`")  # noqa: E501

        self._provider_response = provider_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListEmailResponseAllOfEmails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListEmailResponseAllOfEmails):
            return True

        return self.to_dict() != other.to_dict()
