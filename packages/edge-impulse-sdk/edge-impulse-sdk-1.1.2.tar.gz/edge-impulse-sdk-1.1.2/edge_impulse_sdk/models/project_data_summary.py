# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ProjectDataSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_length_ms': 'int',
        'labels': 'list[str]',
        'data_count': 'int'
    }

    attribute_map = {
        'total_length_ms': 'totalLengthMs',
        'labels': 'labels',
        'data_count': 'dataCount'
    }

    def __init__(self, total_length_ms=None, labels=None, data_count=None, local_vars_configuration=None):  # noqa: E501
        """ProjectDataSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_length_ms = None
        self._labels = None
        self._data_count = None
        self.discriminator = None

        self.total_length_ms = total_length_ms
        self.labels = labels
        self.data_count = data_count

    @property
    def total_length_ms(self):
        """Gets the total_length_ms of this ProjectDataSummary.  # noqa: E501

        Total length (in ms.) of all data in the training set  # noqa: E501

        :return: The total_length_ms of this ProjectDataSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_length_ms

    @total_length_ms.setter
    def total_length_ms(self, total_length_ms):
        """Sets the total_length_ms of this ProjectDataSummary.

        Total length (in ms.) of all data in the training set  # noqa: E501

        :param total_length_ms: The total_length_ms of this ProjectDataSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_length_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `total_length_ms`, must not be `None`")  # noqa: E501

        self._total_length_ms = total_length_ms

    @property
    def labels(self):
        """Gets the labels of this ProjectDataSummary.  # noqa: E501

        Labels in the training set  # noqa: E501

        :return: The labels of this ProjectDataSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ProjectDataSummary.

        Labels in the training set  # noqa: E501

        :param labels: The labels of this ProjectDataSummary.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and labels is None:  # noqa: E501
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def data_count(self):
        """Gets the data_count of this ProjectDataSummary.  # noqa: E501


        :return: The data_count of this ProjectDataSummary.  # noqa: E501
        :rtype: int
        """
        return self._data_count

    @data_count.setter
    def data_count(self, data_count):
        """Sets the data_count of this ProjectDataSummary.


        :param data_count: The data_count of this ProjectDataSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and data_count is None:  # noqa: E501
            raise ValueError("Invalid value for `data_count`, must not be `None`")  # noqa: E501

        self._data_count = data_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDataSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectDataSummary):
            return True

        return self.to_dict() != other.to_dict()
