# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class RawSamplePayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_name': 'str',
        'device_type': 'str',
        'interval_ms': 'float',
        'sensors': 'list[Sensor]',
        'values': 'list[list[float]]'
    }

    attribute_map = {
        'device_name': 'device_name',
        'device_type': 'device_type',
        'interval_ms': 'interval_ms',
        'sensors': 'sensors',
        'values': 'values'
    }

    def __init__(self, device_name=None, device_type=None, interval_ms=None, sensors=None, values=None, local_vars_configuration=None):  # noqa: E501
        """RawSamplePayload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_name = None
        self._device_type = None
        self._interval_ms = None
        self._sensors = None
        self._values = None
        self.discriminator = None

        if device_name is not None:
            self.device_name = device_name
        self.device_type = device_type
        self.interval_ms = interval_ms
        self.sensors = sensors
        self.values = values

    @property
    def device_name(self):
        """Gets the device_name of this RawSamplePayload.  # noqa: E501

        Unique identifier for this device. **Only** set this when the device has a globally unique identifier (e.g. MAC address).  # noqa: E501

        :return: The device_name of this RawSamplePayload.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this RawSamplePayload.

        Unique identifier for this device. **Only** set this when the device has a globally unique identifier (e.g. MAC address).  # noqa: E501

        :param device_name: The device_name of this RawSamplePayload.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_type(self):
        """Gets the device_type of this RawSamplePayload.  # noqa: E501

        Device type, for example the exact model of the device. Should be the same for all similar devices.  # noqa: E501

        :return: The device_type of this RawSamplePayload.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this RawSamplePayload.

        Device type, for example the exact model of the device. Should be the same for all similar devices.  # noqa: E501

        :param device_type: The device_type of this RawSamplePayload.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device_type is None:  # noqa: E501
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501

        self._device_type = device_type

    @property
    def interval_ms(self):
        """Gets the interval_ms of this RawSamplePayload.  # noqa: E501

        The frequency of the data in this file (in milliseconds). E.g. for 100Hz fill in `10` (new data every 10 ms.). You can use a float here if you need the precision.  # noqa: E501

        :return: The interval_ms of this RawSamplePayload.  # noqa: E501
        :rtype: float
        """
        return self._interval_ms

    @interval_ms.setter
    def interval_ms(self, interval_ms):
        """Sets the interval_ms of this RawSamplePayload.

        The frequency of the data in this file (in milliseconds). E.g. for 100Hz fill in `10` (new data every 10 ms.). You can use a float here if you need the precision.  # noqa: E501

        :param interval_ms: The interval_ms of this RawSamplePayload.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and interval_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `interval_ms`, must not be `None`")  # noqa: E501

        self._interval_ms = interval_ms

    @property
    def sensors(self):
        """Gets the sensors of this RawSamplePayload.  # noqa: E501

        Array with sensor axes  # noqa: E501

        :return: The sensors of this RawSamplePayload.  # noqa: E501
        :rtype: list[Sensor]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this RawSamplePayload.

        Array with sensor axes  # noqa: E501

        :param sensors: The sensors of this RawSamplePayload.  # noqa: E501
        :type: list[Sensor]
        """
        if self.local_vars_configuration.client_side_validation and sensors is None:  # noqa: E501
            raise ValueError("Invalid value for `sensors`, must not be `None`")  # noqa: E501

        self._sensors = sensors

    @property
    def values(self):
        """Gets the values of this RawSamplePayload.  # noqa: E501

        Array of sensor values. One array item per interval, and as many items in this array as there are sensor axes. This type is returned if there are multiple axes.   # noqa: E501

        :return: The values of this RawSamplePayload.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this RawSamplePayload.

        Array of sensor values. One array item per interval, and as many items in this array as there are sensor axes. This type is returned if there are multiple axes.   # noqa: E501

        :param values: The values of this RawSamplePayload.  # noqa: E501
        :type: list[list[float]]
        """
        if self.local_vars_configuration.client_side_validation and values is None:  # noqa: E501
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawSamplePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RawSamplePayload):
            return True

        return self.to_dict() != other.to_dict()
