# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class DSPInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'window_length': 'int',
        'type': 'str',
        'classes': 'list[str]',
        'features': 'DSPInfoFeatures',
        'expected_window_count': 'int',
        'input_axes': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'window_length': 'windowLength',
        'type': 'type',
        'classes': 'classes',
        'features': 'features',
        'expected_window_count': 'expectedWindowCount',
        'input_axes': 'inputAxes'
    }

    def __init__(self, id=None, name=None, window_length=None, type=None, classes=None, features=None, expected_window_count=None, input_axes=None, local_vars_configuration=None):  # noqa: E501
        """DSPInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._window_length = None
        self._type = None
        self._classes = None
        self._features = None
        self._expected_window_count = None
        self._input_axes = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.window_length = window_length
        self.type = type
        self.classes = classes
        self.features = features
        self.expected_window_count = expected_window_count
        self.input_axes = input_axes

    @property
    def id(self):
        """Gets the id of this DSPInfo.  # noqa: E501


        :return: The id of this DSPInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DSPInfo.


        :param id: The id of this DSPInfo.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DSPInfo.  # noqa: E501


        :return: The name of this DSPInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DSPInfo.


        :param name: The name of this DSPInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def window_length(self):
        """Gets the window_length of this DSPInfo.  # noqa: E501


        :return: The window_length of this DSPInfo.  # noqa: E501
        :rtype: int
        """
        return self._window_length

    @window_length.setter
    def window_length(self, window_length):
        """Sets the window_length of this DSPInfo.


        :param window_length: The window_length of this DSPInfo.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and window_length is None:  # noqa: E501
            raise ValueError("Invalid value for `window_length`, must not be `None`")  # noqa: E501

        self._window_length = window_length

    @property
    def type(self):
        """Gets the type of this DSPInfo.  # noqa: E501


        :return: The type of this DSPInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DSPInfo.


        :param type: The type of this DSPInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def classes(self):
        """Gets the classes of this DSPInfo.  # noqa: E501


        :return: The classes of this DSPInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this DSPInfo.


        :param classes: The classes of this DSPInfo.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and classes is None:  # noqa: E501
            raise ValueError("Invalid value for `classes`, must not be `None`")  # noqa: E501

        self._classes = classes

    @property
    def features(self):
        """Gets the features of this DSPInfo.  # noqa: E501


        :return: The features of this DSPInfo.  # noqa: E501
        :rtype: DSPInfoFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DSPInfo.


        :param features: The features of this DSPInfo.  # noqa: E501
        :type: DSPInfoFeatures
        """
        if self.local_vars_configuration.client_side_validation and features is None:  # noqa: E501
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def expected_window_count(self):
        """Gets the expected_window_count of this DSPInfo.  # noqa: E501

        Expected number of windows that would be generated  # noqa: E501

        :return: The expected_window_count of this DSPInfo.  # noqa: E501
        :rtype: int
        """
        return self._expected_window_count

    @expected_window_count.setter
    def expected_window_count(self, expected_window_count):
        """Sets the expected_window_count of this DSPInfo.

        Expected number of windows that would be generated  # noqa: E501

        :param expected_window_count: The expected_window_count of this DSPInfo.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expected_window_count is None:  # noqa: E501
            raise ValueError("Invalid value for `expected_window_count`, must not be `None`")  # noqa: E501

        self._expected_window_count = expected_window_count

    @property
    def input_axes(self):
        """Gets the input_axes of this DSPInfo.  # noqa: E501

        Axes that this block depends on.  # noqa: E501

        :return: The input_axes of this DSPInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_axes

    @input_axes.setter
    def input_axes(self, input_axes):
        """Sets the input_axes of this DSPInfo.

        Axes that this block depends on.  # noqa: E501

        :param input_axes: The input_axes of this DSPInfo.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and input_axes is None:  # noqa: E501
            raise ValueError("Invalid value for `input_axes`, must not be `None`")  # noqa: E501

        self._input_axes = input_axes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSPInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSPInfo):
            return True

        return self.to_dict() != other.to_dict()
