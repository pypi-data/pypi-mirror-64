# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class AnomalyModelMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'scale': 'list[float]',
        'mean': 'list[float]',
        'clusters': 'list[AnomalyModelMetadataClusters]',
        'axes': 'list[int]'
    }

    attribute_map = {
        'created': 'created',
        'scale': 'scale',
        'mean': 'mean',
        'clusters': 'clusters',
        'axes': 'axes'
    }

    def __init__(self, created=None, scale=None, mean=None, clusters=None, axes=None, local_vars_configuration=None):  # noqa: E501
        """AnomalyModelMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created = None
        self._scale = None
        self._mean = None
        self._clusters = None
        self._axes = None
        self.discriminator = None

        self.created = created
        self.scale = scale
        self.mean = mean
        self.clusters = clusters
        self.axes = axes

    @property
    def created(self):
        """Gets the created of this AnomalyModelMetadata.  # noqa: E501

        Date when the model was trained  # noqa: E501

        :return: The created of this AnomalyModelMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AnomalyModelMetadata.

        Date when the model was trained  # noqa: E501

        :param created: The created of this AnomalyModelMetadata.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def scale(self):
        """Gets the scale of this AnomalyModelMetadata.  # noqa: E501

        Scale input for StandardScaler. Values are scaled like this (where `ix` is axis index): `input[ix] = (input[ix] - mean[ix]) / scale[ix];`  # noqa: E501

        :return: The scale of this AnomalyModelMetadata.  # noqa: E501
        :rtype: list[float]
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this AnomalyModelMetadata.

        Scale input for StandardScaler. Values are scaled like this (where `ix` is axis index): `input[ix] = (input[ix] - mean[ix]) / scale[ix];`  # noqa: E501

        :param scale: The scale of this AnomalyModelMetadata.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and scale is None:  # noqa: E501
            raise ValueError("Invalid value for `scale`, must not be `None`")  # noqa: E501

        self._scale = scale

    @property
    def mean(self):
        """Gets the mean of this AnomalyModelMetadata.  # noqa: E501

        Mean input for StandardScaler. Values are scaled like this (where `ix` is axis index): `input[ix] = (input[ix] - mean[ix]) / scale[ix];`  # noqa: E501

        :return: The mean of this AnomalyModelMetadata.  # noqa: E501
        :rtype: list[float]
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this AnomalyModelMetadata.

        Mean input for StandardScaler. Values are scaled like this (where `ix` is axis index): `input[ix] = (input[ix] - mean[ix]) / scale[ix];`  # noqa: E501

        :param mean: The mean of this AnomalyModelMetadata.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and mean is None:  # noqa: E501
            raise ValueError("Invalid value for `mean`, must not be `None`")  # noqa: E501

        self._mean = mean

    @property
    def clusters(self):
        """Gets the clusters of this AnomalyModelMetadata.  # noqa: E501

        Trained K-means clusters  # noqa: E501

        :return: The clusters of this AnomalyModelMetadata.  # noqa: E501
        :rtype: list[AnomalyModelMetadataClusters]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this AnomalyModelMetadata.

        Trained K-means clusters  # noqa: E501

        :param clusters: The clusters of this AnomalyModelMetadata.  # noqa: E501
        :type: list[AnomalyModelMetadataClusters]
        """
        if self.local_vars_configuration.client_side_validation and clusters is None:  # noqa: E501
            raise ValueError("Invalid value for `clusters`, must not be `None`")  # noqa: E501

        self._clusters = clusters

    @property
    def axes(self):
        """Gets the axes of this AnomalyModelMetadata.  # noqa: E501

        Which axes were included during training (by index)  # noqa: E501

        :return: The axes of this AnomalyModelMetadata.  # noqa: E501
        :rtype: list[int]
        """
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Sets the axes of this AnomalyModelMetadata.

        Which axes were included during training (by index)  # noqa: E501

        :param axes: The axes of this AnomalyModelMetadata.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and axes is None:  # noqa: E501
            raise ValueError("Invalid value for `axes`, must not be `None`")  # noqa: E501

        self._axes = axes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnomalyModelMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnomalyModelMetadata):
            return True

        return self.to_dict() != other.to_dict()
