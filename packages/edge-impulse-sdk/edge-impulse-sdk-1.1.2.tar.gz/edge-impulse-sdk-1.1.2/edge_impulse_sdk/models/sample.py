# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class Sample(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'filename': 'str',
        'signature_validate': 'bool',
        'signature_method': 'str',
        'signature_key': 'str',
        'created': 'datetime',
        'category': 'str',
        'coldstorage_filename': 'str',
        'label': 'str',
        'interval_ms': 'float',
        'device_name': 'str',
        'device_type': 'str',
        'sensors': 'list[Sensor]',
        'values_count': 'int',
        'total_length_ms': 'int',
        'added': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'filename': 'filename',
        'signature_validate': 'signatureValidate',
        'signature_method': 'signatureMethod',
        'signature_key': 'signatureKey',
        'created': 'created',
        'category': 'category',
        'coldstorage_filename': 'coldstorageFilename',
        'label': 'label',
        'interval_ms': 'intervalMs',
        'device_name': 'deviceName',
        'device_type': 'deviceType',
        'sensors': 'sensors',
        'values_count': 'valuesCount',
        'total_length_ms': 'totalLengthMs',
        'added': 'added'
    }

    def __init__(self, id=None, filename=None, signature_validate=None, signature_method=None, signature_key=None, created=None, category=None, coldstorage_filename=None, label=None, interval_ms=None, device_name=None, device_type=None, sensors=None, values_count=None, total_length_ms=None, added=None, local_vars_configuration=None):  # noqa: E501
        """Sample - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._filename = None
        self._signature_validate = None
        self._signature_method = None
        self._signature_key = None
        self._created = None
        self._category = None
        self._coldstorage_filename = None
        self._label = None
        self._interval_ms = None
        self._device_name = None
        self._device_type = None
        self._sensors = None
        self._values_count = None
        self._total_length_ms = None
        self._added = None
        self.discriminator = None

        self.id = id
        self.filename = filename
        self.signature_validate = signature_validate
        if signature_method is not None:
            self.signature_method = signature_method
        if signature_key is not None:
            self.signature_key = signature_key
        self.created = created
        self.category = category
        self.coldstorage_filename = coldstorage_filename
        self.label = label
        self.interval_ms = interval_ms
        if device_name is not None:
            self.device_name = device_name
        self.device_type = device_type
        self.sensors = sensors
        self.values_count = values_count
        if total_length_ms is not None:
            self.total_length_ms = total_length_ms
        self.added = added

    @property
    def id(self):
        """Gets the id of this Sample.  # noqa: E501


        :return: The id of this Sample.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sample.


        :param id: The id of this Sample.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def filename(self):
        """Gets the filename of this Sample.  # noqa: E501


        :return: The filename of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Sample.


        :param filename: The filename of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filename is None:  # noqa: E501
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def signature_validate(self):
        """Gets the signature_validate of this Sample.  # noqa: E501

        Whether signature validation passed  # noqa: E501

        :return: The signature_validate of this Sample.  # noqa: E501
        :rtype: bool
        """
        return self._signature_validate

    @signature_validate.setter
    def signature_validate(self, signature_validate):
        """Sets the signature_validate of this Sample.

        Whether signature validation passed  # noqa: E501

        :param signature_validate: The signature_validate of this Sample.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and signature_validate is None:  # noqa: E501
            raise ValueError("Invalid value for `signature_validate`, must not be `None`")  # noqa: E501

        self._signature_validate = signature_validate

    @property
    def signature_method(self):
        """Gets the signature_method of this Sample.  # noqa: E501


        :return: The signature_method of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._signature_method

    @signature_method.setter
    def signature_method(self, signature_method):
        """Sets the signature_method of this Sample.


        :param signature_method: The signature_method of this Sample.  # noqa: E501
        :type: str
        """

        self._signature_method = signature_method

    @property
    def signature_key(self):
        """Gets the signature_key of this Sample.  # noqa: E501

        Either the shared key or the public key that was used to validate the sample  # noqa: E501

        :return: The signature_key of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._signature_key

    @signature_key.setter
    def signature_key(self, signature_key):
        """Sets the signature_key of this Sample.

        Either the shared key or the public key that was used to validate the sample  # noqa: E501

        :param signature_key: The signature_key of this Sample.  # noqa: E501
        :type: str
        """

        self._signature_key = signature_key

    @property
    def created(self):
        """Gets the created of this Sample.  # noqa: E501

        Timestamp when the sample was created on device, or if no accurate time was known on device, the time that the file was processed by the ingestion service.  # noqa: E501

        :return: The created of this Sample.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Sample.

        Timestamp when the sample was created on device, or if no accurate time was known on device, the time that the file was processed by the ingestion service.  # noqa: E501

        :param created: The created of this Sample.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def category(self):
        """Gets the category of this Sample.  # noqa: E501


        :return: The category of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Sample.


        :param category: The category of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def coldstorage_filename(self):
        """Gets the coldstorage_filename of this Sample.  # noqa: E501


        :return: The coldstorage_filename of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._coldstorage_filename

    @coldstorage_filename.setter
    def coldstorage_filename(self, coldstorage_filename):
        """Sets the coldstorage_filename of this Sample.


        :param coldstorage_filename: The coldstorage_filename of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and coldstorage_filename is None:  # noqa: E501
            raise ValueError("Invalid value for `coldstorage_filename`, must not be `None`")  # noqa: E501

        self._coldstorage_filename = coldstorage_filename

    @property
    def label(self):
        """Gets the label of this Sample.  # noqa: E501


        :return: The label of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Sample.


        :param label: The label of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def interval_ms(self):
        """Gets the interval_ms of this Sample.  # noqa: E501


        :return: The interval_ms of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._interval_ms

    @interval_ms.setter
    def interval_ms(self, interval_ms):
        """Sets the interval_ms of this Sample.


        :param interval_ms: The interval_ms of this Sample.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and interval_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `interval_ms`, must not be `None`")  # noqa: E501

        self._interval_ms = interval_ms

    @property
    def device_name(self):
        """Gets the device_name of this Sample.  # noqa: E501


        :return: The device_name of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Sample.


        :param device_name: The device_name of this Sample.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_type(self):
        """Gets the device_type of this Sample.  # noqa: E501


        :return: The device_type of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Sample.


        :param device_type: The device_type of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device_type is None:  # noqa: E501
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501

        self._device_type = device_type

    @property
    def sensors(self):
        """Gets the sensors of this Sample.  # noqa: E501


        :return: The sensors of this Sample.  # noqa: E501
        :rtype: list[Sensor]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this Sample.


        :param sensors: The sensors of this Sample.  # noqa: E501
        :type: list[Sensor]
        """
        if self.local_vars_configuration.client_side_validation and sensors is None:  # noqa: E501
            raise ValueError("Invalid value for `sensors`, must not be `None`")  # noqa: E501

        self._sensors = sensors

    @property
    def values_count(self):
        """Gets the values_count of this Sample.  # noqa: E501

        Number of readings in this file  # noqa: E501

        :return: The values_count of this Sample.  # noqa: E501
        :rtype: int
        """
        return self._values_count

    @values_count.setter
    def values_count(self, values_count):
        """Sets the values_count of this Sample.

        Number of readings in this file  # noqa: E501

        :param values_count: The values_count of this Sample.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and values_count is None:  # noqa: E501
            raise ValueError("Invalid value for `values_count`, must not be `None`")  # noqa: E501

        self._values_count = values_count

    @property
    def total_length_ms(self):
        """Gets the total_length_ms of this Sample.  # noqa: E501

        Total length (in ms.) of this file  # noqa: E501

        :return: The total_length_ms of this Sample.  # noqa: E501
        :rtype: int
        """
        return self._total_length_ms

    @total_length_ms.setter
    def total_length_ms(self, total_length_ms):
        """Sets the total_length_ms of this Sample.

        Total length (in ms.) of this file  # noqa: E501

        :param total_length_ms: The total_length_ms of this Sample.  # noqa: E501
        :type: int
        """

        self._total_length_ms = total_length_ms

    @property
    def added(self):
        """Gets the added of this Sample.  # noqa: E501

        Timestamp when the sample was added to the current acquisition bucket.  # noqa: E501

        :return: The added of this Sample.  # noqa: E501
        :rtype: datetime
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this Sample.

        Timestamp when the sample was added to the current acquisition bucket.  # noqa: E501

        :param added: The added of this Sample.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and added is None:  # noqa: E501
            raise ValueError("Invalid value for `added`, must not be `None`")  # noqa: E501

        self._added = added

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sample):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Sample):
            return True

        return self.to_dict() != other.to_dict()
