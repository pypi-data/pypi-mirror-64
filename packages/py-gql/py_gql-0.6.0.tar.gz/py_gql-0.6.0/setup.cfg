[wheel]

[bdist_wheel]

[aliases]
test = pytest

[isort]
indent = 4
force_grid_wrap = 0
include_trailing_comma = True
include_trailing_comment = True
line_length = 80
multi_line_output = 3
use_parentheses = True
combine_as_imports = True
atomic = True
not_skip = __init__.py
lines_after_imports = 2
default_section = THIRDPARTY
sections = FUTURE,STDLIB,THIRDPARTY,DJANGO,FIRSTPARTY,LOCALFOLDER
known_first_party = py_gql

[mypy]
warn_incomplete_stub = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_unused_configs = True
disallow_incomplete_defs = True
follow_imports = normal
ignore_missing_imports = True
no_implicit_optional = True
strict_optional = True
disallow_any_generics = True
check_untyped_defs = True
warn_return_any = True
allow_redefinition = False

[darglint]
ignore_regex = ^(_|test_)(.*)
docstring_style = google
strictness = long

[flake8]
max-complexity = 14
max-line-length = 80
doctests = True
show-source = True
accept-encodings = utf-8,utf-16
convention = google
format = default
select = 
	C
	E
	F
	W
	B
	BLK
	B9
	I
	T
ignore = 
	B903
	E203
	E501
	E731
	W503
	B006
	C101
	C401
	C403
	C405
	C408
	C8
	D400
	D200
	D10
	DAR402
exclude = 
	.git,
	__pycache__,
	.tox,
	*.pyc
per-file-ignores = 
	py_gql/lang/parser.py:DAR401,D403,D205,D401
	py_gql/validation/rules/__init__.py:D205
	py_gql/validation/rules/overlapping_fields_can_be_merged.py:D205
	py_gql/validation/rules/values_of_correct_type.py:D205
	tests/*.py:D,DAR
	examples/*.py:D,DAR
	py_gql/execution/default_resolver.py:DAR101
	py_gql/schema/schema.py:DAR203

[tool:pytest]
addopts = 
	--color yes
	--doctest-modules
	--doctest-continue-on-failure
	--benchmark-skip
doctest_optionflags = 
	IGNORE_EXCEPTION_DETAIL
	ALLOW_UNICODE
	ELLIPSIS
	NORMALIZE_WHITESPACE
python_files = 
	tests/**/_utils.py
	tests/**/_test_utils.py
	test_*.py
	*_test.py
testpaths = 
	src
	tests
junit_family = xunit2
filterwarnings = 
	once::Warning

[coverage:run]
branch = True
source = py_gql

[coverage:paths]
source = 
	src/
	.tox/*/site-packages/

[coverage:report]
show_missing = False
precision = 2
ignore_errors = True
exclude_lines = 
	pragma: no cover
	assert False
	raise AssertionError
	if self\.debug
	if debug
	raise NotImplementedError
	raise NotImplementedError()
	if 0:
	if __name__ == .__main__.:
	def __repr__
	def __str__
	if TYPE_CHECKING:

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

[egg_info]
tag_build = 
tag_date = 0

